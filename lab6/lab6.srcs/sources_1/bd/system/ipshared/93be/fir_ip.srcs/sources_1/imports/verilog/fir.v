// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2012.4
// Copyright (C) 2012 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2012_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.660000,HLS_SYN_LAT=55,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=125,HLS_SYN_LUT=166}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] y;
output   y_ap_vld;
input  [15:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;
reg   [1:0] ap_CS_fsm = 2'b00;
reg   [5:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
wire   [15:0] shift_reg_d0;
wire   [15:0] shift_reg_q0;
wire   [5:0] shift_reg_address1;
reg    shift_reg_ce1;
reg    shift_reg_we1;
wire   [15:0] shift_reg_d1;
wire   [5:0] c_address0;
reg    c_ce0;
wire   [15:0] c_q0;
reg   [5:0] indvar_reg_113;
reg   [36:0] acc_1_reg_124;
wire   [36:0] acc_cast_fu_168_p1;
wire   [0:0] exitcond2_fu_172_p2;
reg   [0:0] exitcond2_reg_300;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond2_reg_300_pp0_it1;
wire   [5:0] indvar_next_fu_178_p2;
wire   [31:0] i_cast_fu_205_p1;
reg   [31:0] i_cast_reg_309;
reg   [15:0] shift_reg_load_1_reg_324;
reg   [15:0] c_load_reg_329;
wire   [37:0] acc_1_cast8_fu_210_p1;
reg   [37:0] acc_1_cast8_reg_334;
wire   [36:0] acc_3_fu_230_p2;
wire   [31:0] tmp1_cast_fu_194_p1;
wire   [24:0] tmp_cast4_fu_138_p1;
wire   [24:0] p_shl_fu_142_p2;
wire   [21:0] tmp_cast_fu_134_p1;
wire   [21:0] p_shl1_fu_152_p2;
wire   [25:0] acc_fu_162_p0;
wire   [25:0] acc_fu_162_p1;
wire   [25:0] acc_fu_162_p2;
wire   [6:0] indvar_cast_fu_184_p1;
wire   [6:0] tmp1_fu_188_p2;
wire   [5:0] i_fu_199_p2;
wire   [15:0] tmp_s_fu_220_p0;
wire   [15:0] tmp_s_fu_220_p1;
wire   [31:0] tmp_s_fu_220_p2;
wire   [36:0] acc_3_fu_230_p0;
wire   [24:0] tmp_2_cast6_fu_239_p1;
wire   [24:0] p_shl2_fu_242_p2;
wire   [21:0] tmp_2_cast_fu_236_p1;
wire   [21:0] p_shl4_fu_252_p2;
wire   [25:0] tmp_3_fu_262_p0;
wire   [25:0] tmp_3_fu_262_p1;
wire   [25:0] tmp_3_fu_262_p2;
wire   [37:0] acc_2_fu_272_p1;
wire   [37:0] acc_2_fu_272_p2;
reg   [1:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_st2_fsm_1 = 2'b01;
parameter    ap_ST_pp0_stg0_fsm_2 = 2'b10;
parameter    ap_ST_st6_fsm_3 = 2'b11;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv6_31 = 6'b110001;
parameter    ap_const_lv25_9 = 25'b0000000000000000000001001;
parameter    ap_const_lv22_6 = 22'b0000000000000000000110;
parameter    ap_const_lv6_32 = 6'b110010;
parameter    ap_const_lv6_1 = 6'b000001;
parameter    ap_const_lv7_30 = 7'b0110000;
parameter    ap_const_lv32_F = 32'b00000000000000000000000000001111;
parameter    ap_const_lv32_1E = 32'b00000000000000000000000000011110;
parameter    ap_true = 1'b1;


fir_shift_reg #(
    .DataWidth( 16 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
shift_reg_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( shift_reg_address0 ),
    .ce0( shift_reg_ce0 ),
    .we0( shift_reg_we0 ),
    .d0( shift_reg_d0 ),
    .q0( shift_reg_q0 ),
    .address1( shift_reg_address1 ),
    .ce1( shift_reg_ce1 ),
    .we1( shift_reg_we1 ),
    .d1( shift_reg_d1 )
);

fir_c #(
    .DataWidth( 16 ),
    .AddressRange( 51 ),
    .AddressWidth( 6 ))
c_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( c_address0 ),
    .ce0( c_ce0 ),
    .q0( c_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~(exitcond2_fu_172_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if ((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
        end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if ((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) begin
        acc_1_cast8_reg_334[0] <= acc_1_cast8_fu_210_p1[0];
        acc_1_cast8_reg_334[1] <= acc_1_cast8_fu_210_p1[1];
        acc_1_cast8_reg_334[2] <= acc_1_cast8_fu_210_p1[2];
        acc_1_cast8_reg_334[3] <= acc_1_cast8_fu_210_p1[3];
        acc_1_cast8_reg_334[4] <= acc_1_cast8_fu_210_p1[4];
        acc_1_cast8_reg_334[5] <= acc_1_cast8_fu_210_p1[5];
        acc_1_cast8_reg_334[6] <= acc_1_cast8_fu_210_p1[6];
        acc_1_cast8_reg_334[7] <= acc_1_cast8_fu_210_p1[7];
        acc_1_cast8_reg_334[8] <= acc_1_cast8_fu_210_p1[8];
        acc_1_cast8_reg_334[9] <= acc_1_cast8_fu_210_p1[9];
        acc_1_cast8_reg_334[10] <= acc_1_cast8_fu_210_p1[10];
        acc_1_cast8_reg_334[11] <= acc_1_cast8_fu_210_p1[11];
        acc_1_cast8_reg_334[12] <= acc_1_cast8_fu_210_p1[12];
        acc_1_cast8_reg_334[13] <= acc_1_cast8_fu_210_p1[13];
        acc_1_cast8_reg_334[14] <= acc_1_cast8_fu_210_p1[14];
        acc_1_cast8_reg_334[15] <= acc_1_cast8_fu_210_p1[15];
        acc_1_cast8_reg_334[16] <= acc_1_cast8_fu_210_p1[16];
        acc_1_cast8_reg_334[17] <= acc_1_cast8_fu_210_p1[17];
        acc_1_cast8_reg_334[18] <= acc_1_cast8_fu_210_p1[18];
        acc_1_cast8_reg_334[19] <= acc_1_cast8_fu_210_p1[19];
        acc_1_cast8_reg_334[20] <= acc_1_cast8_fu_210_p1[20];
        acc_1_cast8_reg_334[21] <= acc_1_cast8_fu_210_p1[21];
        acc_1_cast8_reg_334[22] <= acc_1_cast8_fu_210_p1[22];
        acc_1_cast8_reg_334[23] <= acc_1_cast8_fu_210_p1[23];
        acc_1_cast8_reg_334[24] <= acc_1_cast8_fu_210_p1[24];
        acc_1_cast8_reg_334[25] <= acc_1_cast8_fu_210_p1[25];
        acc_1_cast8_reg_334[26] <= acc_1_cast8_fu_210_p1[26];
        acc_1_cast8_reg_334[27] <= acc_1_cast8_fu_210_p1[27];
        acc_1_cast8_reg_334[28] <= acc_1_cast8_fu_210_p1[28];
        acc_1_cast8_reg_334[29] <= acc_1_cast8_fu_210_p1[29];
        acc_1_cast8_reg_334[30] <= acc_1_cast8_fu_210_p1[30];
        acc_1_cast8_reg_334[31] <= acc_1_cast8_fu_210_p1[31];
        acc_1_cast8_reg_334[32] <= acc_1_cast8_fu_210_p1[32];
        acc_1_cast8_reg_334[33] <= acc_1_cast8_fu_210_p1[33];
        acc_1_cast8_reg_334[34] <= acc_1_cast8_fu_210_p1[34];
        acc_1_cast8_reg_334[35] <= acc_1_cast8_fu_210_p1[35];
        acc_1_cast8_reg_334[36] <= acc_1_cast8_fu_210_p1[36];
    end
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (ap_reg_ppstg_exitcond2_reg_300_pp0_it1 == ap_const_lv1_0))) begin
        acc_1_reg_124 <= acc_3_fu_230_p2;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        acc_1_reg_124 <= acc_cast_fu_168_p1;
    end
    if ((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm)) begin
        ap_reg_ppstg_exitcond2_reg_300_pp0_it1 <= exitcond2_reg_300;
    end
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond2_reg_300 == ap_const_lv1_0))) begin
        c_load_reg_329 <= c_q0;
    end
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        exitcond2_reg_300 <= exitcond2_fu_172_p2;
    end
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond2_fu_172_p2 == ap_const_lv1_0))) begin
        i_cast_reg_309[0] <= i_cast_fu_205_p1[0];
        i_cast_reg_309[1] <= i_cast_fu_205_p1[1];
        i_cast_reg_309[2] <= i_cast_fu_205_p1[2];
        i_cast_reg_309[3] <= i_cast_fu_205_p1[3];
        i_cast_reg_309[4] <= i_cast_fu_205_p1[4];
        i_cast_reg_309[5] <= i_cast_fu_205_p1[5];
    end
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond2_fu_172_p2 == ap_const_lv1_0))) begin
        indvar_reg_113 <= indvar_next_fu_178_p2;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        indvar_reg_113 <= ap_const_lv6_0;
    end
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond2_reg_300 == ap_const_lv1_0))) begin
        shift_reg_load_1_reg_324 <= shift_reg_q0;
    end
end

/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        ap_NS_fsm = ap_ST_st6_fsm_3;
    end else if ((ap_ST_st6_fsm_3 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st1_fsm_0;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        ap_NS_fsm = ap_ST_st2_fsm_1;
    end else begin
        ap_NS_fsm = ap_CS_fsm;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st6_fsm_3 == ap_CS_fsm)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st6_fsm_3 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// c_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond2_fu_172_p2 or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond2_fu_172_p2 == ap_const_lv1_0))) begin
        c_ce0 = ap_const_logic_1;
    end else begin
        c_ce0 = ap_const_logic_0;
    end
end

/// shift_reg_address0 assign process. ///
always @ (ap_start or ap_CS_fsm or exitcond2_fu_172_p2 or ap_reg_ppiten_pp0_it0 or tmp1_cast_fu_194_p1)
begin
    if ((ap_ST_st6_fsm_3 == ap_CS_fsm)) begin
        shift_reg_address0 = ap_const_lv6_0;
    end else if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond2_fu_172_p2 == ap_const_lv1_0))) begin
        shift_reg_address0 = tmp1_cast_fu_194_p1;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        shift_reg_address0 = ap_const_lv6_31;
    end else begin
        shift_reg_address0 = ap_const_lv6_31;
    end
end

/// shift_reg_ce0 assign process. ///
always @ (ap_start or ap_CS_fsm or exitcond2_fu_172_p2 or ap_reg_ppiten_pp0_it0)
begin
    if ((((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond2_fu_172_p2 == ap_const_lv1_0)) | (ap_ST_st6_fsm_3 == ap_CS_fsm) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)))) begin
        shift_reg_ce0 = ap_const_logic_1;
    end else begin
        shift_reg_ce0 = ap_const_logic_0;
    end
end

/// shift_reg_ce1 assign process. ///
always @ (ap_CS_fsm or exitcond2_reg_300 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond2_reg_300 == ap_const_lv1_0))) begin
        shift_reg_ce1 = ap_const_logic_1;
    end else begin
        shift_reg_ce1 = ap_const_logic_0;
    end
end

/// shift_reg_we0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st6_fsm_3 == ap_CS_fsm)) begin
        shift_reg_we0 = ap_const_logic_1;
    end else begin
        shift_reg_we0 = ap_const_logic_0;
    end
end

/// shift_reg_we1 assign process. ///
always @ (ap_CS_fsm or exitcond2_reg_300 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond2_reg_300 == ap_const_lv1_0))) begin
        shift_reg_we1 = ap_const_logic_1;
    end else begin
        shift_reg_we1 = ap_const_logic_0;
    end
end

/// y_ap_vld assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st6_fsm_3 == ap_CS_fsm)) begin
        y_ap_vld = ap_const_logic_1;
    end else begin
        y_ap_vld = ap_const_logic_0;
    end
end
assign acc_1_cast8_fu_210_p1 = $unsigned(acc_1_reg_124);
assign acc_2_fu_272_p1 = $signed(tmp_3_fu_262_p2);
assign acc_2_fu_272_p2 = (acc_1_cast8_reg_334 + acc_2_fu_272_p1);
assign acc_3_fu_230_p0 = $signed(tmp_s_fu_220_p2);
assign acc_3_fu_230_p2 = (acc_3_fu_230_p0 + acc_1_reg_124);
assign acc_cast_fu_168_p1 = $signed(acc_fu_162_p2);
assign acc_fu_162_p0 = $signed(p_shl1_fu_152_p2);
assign acc_fu_162_p1 = $signed(p_shl_fu_142_p2);
assign acc_fu_162_p2 = (acc_fu_162_p0 - acc_fu_162_p1);
assign c_address0 = i_cast_fu_205_p1;
assign exitcond2_fu_172_p2 = (indvar_reg_113 == ap_const_lv6_32? 1'b1: 1'b0);
assign i_cast_fu_205_p1 = $unsigned(i_fu_199_p2);
assign i_fu_199_p2 = (ap_const_lv6_31 - indvar_reg_113);
assign indvar_cast_fu_184_p1 = $unsigned(indvar_reg_113);
assign indvar_next_fu_178_p2 = (indvar_reg_113 + ap_const_lv6_1);
assign p_shl1_fu_152_p2 = tmp_cast_fu_134_p1 << ap_const_lv22_6;
assign p_shl2_fu_242_p2 = tmp_2_cast6_fu_239_p1 << ap_const_lv25_9;
assign p_shl4_fu_252_p2 = tmp_2_cast_fu_236_p1 << ap_const_lv22_6;
assign p_shl_fu_142_p2 = tmp_cast4_fu_138_p1 << ap_const_lv25_9;
assign shift_reg_address1 = i_cast_reg_309;
assign shift_reg_d0 = x;
assign shift_reg_d1 = shift_reg_q0;
assign tmp1_cast_fu_194_p1 = $signed(tmp1_fu_188_p2);
assign tmp1_fu_188_p2 = (ap_const_lv7_30 - indvar_cast_fu_184_p1);
assign tmp_2_cast6_fu_239_p1 = $unsigned(x);
assign tmp_2_cast_fu_236_p1 = $unsigned(x);
assign tmp_3_fu_262_p0 = $signed(p_shl4_fu_252_p2);
assign tmp_3_fu_262_p1 = $signed(p_shl2_fu_242_p2);
assign tmp_3_fu_262_p2 = (tmp_3_fu_262_p0 - tmp_3_fu_262_p1);
assign tmp_cast4_fu_138_p1 = $unsigned(shift_reg_q0);
assign tmp_cast_fu_134_p1 = $unsigned(shift_reg_q0);
assign tmp_s_fu_220_p0 = c_load_reg_329;
assign tmp_s_fu_220_p1 = shift_reg_load_1_reg_324;
assign tmp_s_fu_220_p2 = ($signed(tmp_s_fu_220_p0) * $signed(tmp_s_fu_220_p1));
assign y = {{acc_2_fu_272_p2[ap_const_lv32_1E : ap_const_lv32_F]}};
always @ (posedge ap_clk)
begin
    i_cast_reg_309[31:6] <= 26'b00000000000000000000000000;
    acc_1_cast8_reg_334[37] <= 1'b0;
end



endmodule //fir

