// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_Xpose_Row_Outer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        row_outbuf_i_address0,
        row_outbuf_i_ce0,
        row_outbuf_i_q0,
        col_inbuf_address0,
        col_inbuf_ce0,
        col_inbuf_we0,
        col_inbuf_d0,
        col_inbuf_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [5:0] row_outbuf_i_address0;
output   row_outbuf_i_ce0;
input  [15:0] row_outbuf_i_q0;
output  [2:0] col_inbuf_address0;
output   col_inbuf_ce0;
output   col_inbuf_we0;
output  [127:0] col_inbuf_d0;
input  [127:0] col_inbuf_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg row_outbuf_i_ce0;
reg[2:0] col_inbuf_address0;
reg col_inbuf_ce0;
reg col_inbuf_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] indvar_flatten_reg_81;
reg   [3:0] j_0_i_reg_92;
reg   [3:0] i_1_i_reg_104;
wire   [0:0] exitcond_flatten_fu_116_p2;
reg   [0:0] exitcond_flatten_reg_331;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_331;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_331;
wire   [6:0] indvar_flatten_next_fu_122_p2;
reg   [6:0] indvar_flatten_next_reg_335;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] i_1_i_mid2_fu_140_p3;
reg   [3:0] i_1_i_mid2_reg_340;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_flag00011001;
wire   [3:0] tmp_3_mid2_v_fu_148_p3;
reg   [3:0] tmp_3_mid2_v_reg_346;
wire   [2:0] tmp_27_fu_156_p1;
reg   [2:0] tmp_27_reg_353;
reg   [2:0] col_inbuf_addr_reg_363;
reg   [2:0] ap_reg_pp0_iter2_col_inbuf_addr_reg_363;
wire   [3:0] i_fu_189_p2;
reg   [3:0] i_reg_368;
reg    ap_enable_reg_pp0_iter1;
reg   [15:0] row_outbuf_i_load_reg_373;
wire   [0:0] tmp_28_fu_207_p2;
reg   [0:0] tmp_28_reg_378;
wire   [7:0] tmp_29_fu_213_p1;
reg   [7:0] tmp_29_reg_384;
wire   [127:0] p_demorgan_fu_263_p2;
reg   [127:0] p_demorgan_reg_390;
wire   [127:0] tmp_40_fu_287_p2;
reg   [127:0] tmp_40_reg_396;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_flag00011011;
reg    ap_enable_reg_pp0_iter2;
reg   [6:0] indvar_flatten_phi_fu_85_p4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [3:0] j_0_i_phi_fu_96_p4;
wire    ap_block_pp0_stage1_flag00000000;
reg   [3:0] i_1_i_phi_fu_108_p4;
wire   [63:0] tmp_10_cast_fu_184_p1;
wire   [63:0] tmp_3_mid2_fu_160_p1;
wire   [0:0] tmp_s_fu_134_p2;
wire   [3:0] j_fu_128_p2;
wire   [6:0] tmp_fu_167_p3;
wire   [7:0] tmp_9_cast_fu_174_p1;
wire   [7:0] tmp_3_mid2_cast_fu_164_p1;
wire   [7:0] tmp_1_fu_178_p2;
wire   [6:0] tmp_4_fu_194_p3;
wire   [6:0] tmp_5_fu_201_p2;
wire   [7:0] tmp_30_fu_217_p1;
wire   [7:0] tmp_33_fu_221_p3;
wire   [7:0] tmp_34_fu_229_p3;
wire   [7:0] tmp_36_fu_237_p2;
wire   [127:0] tmp_38_fu_243_p1;
wire   [127:0] tmp_39_fu_247_p1;
wire   [127:0] tmp_43_fu_251_p2;
wire   [127:0] tmp_44_fu_257_p2;
wire   [7:0] tmp_32_fu_272_p2;
wire   [7:0] tmp_35_fu_277_p3;
wire   [127:0] tmp_31_fu_269_p1;
wire   [127:0] tmp_37_fu_283_p1;
reg   [127:0] tmp_41_fu_293_p4;
wire   [127:0] tmp_45_fu_308_p2;
wire   [127:0] tmp_42_fu_302_p3;
wire   [127:0] tmp_46_fu_313_p2;
wire   [127:0] tmp_47_fu_319_p2;
wire    ap_CS_fsm_state8;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_reg_pp0_iter1_exitcond_flatten_reg_331 == 1'd0))) begin
        i_1_i_reg_104 <= i_reg_368;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        i_1_i_reg_104 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_331 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_reg_81 <= indvar_flatten_next_reg_335;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_81 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_reg_pp0_iter1_exitcond_flatten_reg_331 == 1'd0))) begin
        j_0_i_reg_92 <= tmp_3_mid2_v_reg_346;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        j_0_i_reg_92 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_331 <= exitcond_flatten_reg_331;
        ap_reg_pp0_iter2_col_inbuf_addr_reg_363 <= col_inbuf_addr_reg_363;
        ap_reg_pp0_iter2_exitcond_flatten_reg_331 <= ap_reg_pp0_iter1_exitcond_flatten_reg_331;
        exitcond_flatten_reg_331 <= exitcond_flatten_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_331 == 1'd0))) begin
        col_inbuf_addr_reg_363 <= tmp_3_mid2_fu_160_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (exitcond_flatten_reg_331 == 1'd0))) begin
        i_1_i_mid2_reg_340 <= i_1_i_mid2_fu_140_p3;
        tmp_27_reg_353 <= tmp_27_fu_156_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_331 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_reg_368 <= i_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_flatten_next_reg_335 <= indvar_flatten_next_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (ap_reg_pp0_iter1_exitcond_flatten_reg_331 == 1'd0))) begin
        p_demorgan_reg_390 <= p_demorgan_fu_263_p2;
        row_outbuf_i_load_reg_373 <= row_outbuf_i_q0;
        tmp_28_reg_378 <= tmp_28_fu_207_p2;
        tmp_29_reg_384[6 : 4] <= tmp_29_fu_213_p1[6 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (exitcond_flatten_reg_331 == 1'd0))) begin
        tmp_3_mid2_v_reg_346 <= tmp_3_mid2_v_fu_148_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter1_exitcond_flatten_reg_331 == 1'd0))) begin
        tmp_40_reg_396 <= tmp_40_fu_287_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_116_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter2)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            col_inbuf_address0 = ap_reg_pp0_iter2_col_inbuf_addr_reg_363;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            col_inbuf_address0 = col_inbuf_addr_reg_363;
        end else begin
            col_inbuf_address0 = 'bx;
        end
    end else begin
        col_inbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        col_inbuf_ce0 = 1'b1;
    end else begin
        col_inbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_reg_pp0_iter2_exitcond_flatten_reg_331 == 1'd0))) begin
        col_inbuf_we0 = 1'b1;
    end else begin
        col_inbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_reg_pp0_iter1_exitcond_flatten_reg_331 == 1'd0) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        i_1_i_phi_fu_108_p4 = i_reg_368;
    end else begin
        i_1_i_phi_fu_108_p4 = i_1_i_reg_104;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_331 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten_phi_fu_85_p4 = indvar_flatten_next_reg_335;
    end else begin
        indvar_flatten_phi_fu_85_p4 = indvar_flatten_reg_81;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_reg_pp0_iter1_exitcond_flatten_reg_331 == 1'd0) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        j_0_i_phi_fu_96_p4 = tmp_3_mid2_v_reg_346;
    end else begin
        j_0_i_phi_fu_96_p4 = j_0_i_reg_92;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        row_outbuf_i_ce0 = 1'b1;
    end else begin
        row_outbuf_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_116_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_116_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_block_pp0_stage1_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign col_inbuf_d0 = (tmp_46_fu_313_p2 | tmp_47_fu_319_p2);

assign exitcond_flatten_fu_116_p2 = ((indvar_flatten_phi_fu_85_p4 == 7'd64) ? 1'b1 : 1'b0);

assign i_1_i_mid2_fu_140_p3 = ((tmp_s_fu_134_p2[0:0] === 1'b1) ? 4'd0 : i_1_i_phi_fu_108_p4);

assign i_fu_189_p2 = (4'd1 + i_1_i_mid2_reg_340);

assign indvar_flatten_next_fu_122_p2 = (indvar_flatten_phi_fu_85_p4 + 7'd1);

assign j_fu_128_p2 = (4'd1 + j_0_i_phi_fu_96_p4);

assign p_demorgan_fu_263_p2 = (tmp_43_fu_251_p2 & tmp_44_fu_257_p2);

assign row_outbuf_i_address0 = tmp_10_cast_fu_184_p1;

assign tmp_10_cast_fu_184_p1 = tmp_1_fu_178_p2;

assign tmp_1_fu_178_p2 = (tmp_9_cast_fu_174_p1 + tmp_3_mid2_cast_fu_164_p1);

assign tmp_27_fu_156_p1 = i_1_i_mid2_fu_140_p3[2:0];

assign tmp_28_fu_207_p2 = ((tmp_4_fu_194_p3 > tmp_5_fu_201_p2) ? 1'b1 : 1'b0);

assign tmp_29_fu_213_p1 = tmp_4_fu_194_p3;

assign tmp_30_fu_217_p1 = tmp_5_fu_201_p2;

assign tmp_31_fu_269_p1 = row_outbuf_i_load_reg_373;

assign tmp_32_fu_272_p2 = (tmp_29_reg_384 ^ 8'd127);

assign tmp_33_fu_221_p3 = ((tmp_28_fu_207_p2[0:0] === 1'b1) ? tmp_29_fu_213_p1 : tmp_30_fu_217_p1);

assign tmp_34_fu_229_p3 = ((tmp_28_fu_207_p2[0:0] === 1'b1) ? tmp_30_fu_217_p1 : tmp_29_fu_213_p1);

assign tmp_35_fu_277_p3 = ((tmp_28_reg_378[0:0] === 1'b1) ? tmp_32_fu_272_p2 : tmp_29_reg_384);

assign tmp_36_fu_237_p2 = (tmp_33_fu_221_p3 ^ 8'd127);

assign tmp_37_fu_283_p1 = tmp_35_fu_277_p3;

assign tmp_38_fu_243_p1 = tmp_34_fu_229_p3;

assign tmp_39_fu_247_p1 = tmp_36_fu_237_p2;

assign tmp_3_mid2_cast_fu_164_p1 = tmp_3_mid2_v_reg_346;

assign tmp_3_mid2_fu_160_p1 = tmp_3_mid2_v_reg_346;

assign tmp_3_mid2_v_fu_148_p3 = ((tmp_s_fu_134_p2[0:0] === 1'b1) ? j_fu_128_p2 : j_0_i_phi_fu_96_p4);

assign tmp_40_fu_287_p2 = tmp_31_fu_269_p1 << tmp_37_fu_283_p1;

integer ap_tvar_int_0;

always @ (tmp_40_reg_396) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_41_fu_293_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_41_fu_293_p4[ap_tvar_int_0] = tmp_40_reg_396[127 - ap_tvar_int_0];
        end
    end
end

assign tmp_42_fu_302_p3 = ((tmp_28_reg_378[0:0] === 1'b1) ? tmp_41_fu_293_p4 : tmp_40_reg_396);

assign tmp_43_fu_251_p2 = 128'd340282366920938463463374607431768211455 << tmp_38_fu_243_p1;

assign tmp_44_fu_257_p2 = 128'd340282366920938463463374607431768211455 >> tmp_39_fu_247_p1;

assign tmp_45_fu_308_p2 = (p_demorgan_reg_390 ^ 128'd340282366920938463463374607431768211455);

assign tmp_46_fu_313_p2 = (col_inbuf_q0 & tmp_45_fu_308_p2);

assign tmp_47_fu_319_p2 = (tmp_42_fu_302_p3 & p_demorgan_reg_390);

assign tmp_4_fu_194_p3 = {{tmp_27_reg_353}, {4'd0}};

assign tmp_5_fu_201_p2 = (tmp_4_fu_194_p3 | 7'd15);

assign tmp_9_cast_fu_174_p1 = tmp_fu_167_p3;

assign tmp_fu_167_p3 = {{i_1_i_mid2_reg_340}, {3'd0}};

assign tmp_s_fu_134_p2 = ((i_1_i_phi_fu_108_p4 == 4'd8) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_29_reg_384[3:0] <= 4'b0000;
    tmp_29_reg_384[7] <= 1'b0;
end

endmodule //Loop_Xpose_Row_Outer
