-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_Col_DCT_Loop_pr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    col_inbuf_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_ce0 : OUT STD_LOGIC;
    col_inbuf_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    col_outbuf_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_outbuf_i_ce0 : OUT STD_LOGIC;
    col_outbuf_i_we0 : OUT STD_LOGIC;
    col_outbuf_i_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Loop_Col_DCT_Loop_pr is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv9_1F : STD_LOGIC_VECTOR (8 downto 0) := "000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv9_20 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_const_lv9_2F : STD_LOGIC_VECTOR (8 downto 0) := "000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_30 : STD_LOGIC_VECTOR (8 downto 0) := "000110000";
    constant ap_const_lv9_3F : STD_LOGIC_VECTOR (8 downto 0) := "000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv9_40 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_const_lv9_4F : STD_LOGIC_VECTOR (8 downto 0) := "001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv9_50 : STD_LOGIC_VECTOR (8 downto 0) := "001010000";
    constant ap_const_lv9_5F : STD_LOGIC_VECTOR (8 downto 0) := "001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv9_60 : STD_LOGIC_VECTOR (8 downto 0) := "001100000";
    constant ap_const_lv9_6F : STD_LOGIC_VECTOR (8 downto 0) := "001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv9_70 : STD_LOGIC_VECTOR (8 downto 0) := "001110000";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dct_coeff_table_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_ce0 : STD_LOGIC;
    signal dct_coeff_table_q0 : STD_LOGIC_VECTOR (126 downto 0);
    signal k_i_reg_158 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_175_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_507 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_cast_fu_194_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_cast_reg_512 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_inbuf_addr_reg_517 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_522 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_i_reg_522 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_i_reg_522 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_i_reg_522 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_i_reg_522 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_204_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_6_fu_219_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_531 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter1_tmp_6_reg_531 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_tmp_6_reg_531 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_tmp_6_reg_531 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter4_tmp_6_reg_531 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_fu_224_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_51_reg_541 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_fu_228_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_reg_546 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_i_reg_551 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter2_tmp_10_i_reg_551 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_i_reg_556 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter2_tmp_11_i_reg_556 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_i_reg_561 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_i_reg_566 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_i_reg_571 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter2_tmp_15_i_reg_571 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_i_reg_576 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter2_tmp_16_i_reg_576 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_i_reg_581 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_i_reg_586 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_i_reg_591 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter2_tmp_19_i_reg_591 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_i_reg_596 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter2_tmp_20_i_reg_596 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_i_reg_601 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_i_reg_606 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_611 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_24_i_reg_616 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i_fu_447_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_i_reg_621 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_2_i_fu_453_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_2_i_reg_626 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_4_i_fu_459_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_4_i_reg_631 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_465_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_reg_636 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal grp_fu_481_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp1_reg_641 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal grp_fu_488_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp2_reg_646 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp3_fu_420_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp3_fu_420_p2 : signal is "no";
    signal tmp3_reg_651 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_i_reg_656 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal i_2_i_reg_147 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_141_cast_i_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_32_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal tmp_22_cast_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_186_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_i_cast_fu_215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_495_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_fu_424_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp_fu_424_p2 : signal is "no";
    signal tmp_3_i_fu_428_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_472_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_472_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component dct_mul_mul_16s_1cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component Loop_Row_DCT_Loopbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (126 downto 0) );
    end component;



begin
    dct_coeff_table_U : component Loop_Row_DCT_Loopbkb
    generic map (
        DataWidth => 127,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_address0,
        ce0 => dct_coeff_table_ce0,
        q0 => dct_coeff_table_q0);

    dct_mul_mul_16s_1cud_x_U16 : component dct_mul_mul_16s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_51_reg_541,
        din1 => tmp_52_reg_546,
        dout => tmp_8_i_fu_447_p2);

    dct_mul_mul_16s_1cud_x_U17 : component dct_mul_mul_16s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_12_i_reg_561,
        din1 => tmp_13_i_reg_566,
        dout => tmp_8_2_i_fu_453_p2);

    dct_mul_mul_16s_1cud_x_U18 : component dct_mul_mul_16s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_17_i_reg_581,
        din1 => tmp_18_i_reg_586,
        dout => tmp_8_4_i_fu_459_p2);

    dct_mac_muladd_16dEe_x_U19 : component dct_mac_muladd_16dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_21_i_reg_601,
        din1 => tmp_22_i_reg_606,
        din2 => grp_fu_472_p3,
        dout => grp_fu_465_p3);

    dct_mac_muladd_16eOg_x_U20 : component dct_mac_muladd_16eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_24_i_reg_616,
        din1 => tmp_3_reg_611,
        din2 => grp_fu_472_p2,
        dout => grp_fu_472_p3);

    dct_mac_muladd_16dEe_x_U21 : component dct_mac_muladd_16dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => ap_reg_pp0_iter2_tmp_10_i_reg_551,
        din1 => ap_reg_pp0_iter2_tmp_11_i_reg_556,
        din2 => tmp_8_i_reg_621,
        dout => grp_fu_481_p3);

    dct_mac_muladd_16dEe_x_U22 : component dct_mac_muladd_16dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => ap_reg_pp0_iter2_tmp_15_i_reg_571,
        din1 => ap_reg_pp0_iter2_tmp_16_i_reg_576,
        din2 => tmp_8_2_i_reg_626,
        dout => grp_fu_488_p3);

    dct_mac_muladd_16dEe_x_U23 : component dct_mac_muladd_16dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => ap_reg_pp0_iter2_tmp_19_i_reg_591,
        din1 => ap_reg_pp0_iter2_tmp_20_i_reg_596,
        din2 => tmp_8_4_i_reg_631,
        dout => grp_fu_495_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_fu_169_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_fu_169_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_fu_169_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_2_i_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_2_i_reg_147 <= i_reg_507;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                i_2_i_reg_147 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_i_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = tmp_i_fu_198_p2))) then 
                k_i_reg_158 <= k_fu_204_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_fu_169_p2 = ap_const_lv1_0))) then 
                k_i_reg_158 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_tmp_6_reg_531 <= tmp_6_reg_531;
                ap_reg_pp0_iter1_tmp_i_reg_522 <= tmp_i_reg_522;
                tmp_i_reg_522 <= tmp_i_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter2_tmp_10_i_reg_551 <= tmp_10_i_reg_551;
                ap_reg_pp0_iter2_tmp_11_i_reg_556 <= tmp_11_i_reg_556;
                ap_reg_pp0_iter2_tmp_15_i_reg_571 <= tmp_15_i_reg_571;
                ap_reg_pp0_iter2_tmp_16_i_reg_576 <= tmp_16_i_reg_576;
                ap_reg_pp0_iter2_tmp_19_i_reg_591 <= tmp_19_i_reg_591;
                ap_reg_pp0_iter2_tmp_20_i_reg_596 <= tmp_20_i_reg_596;
                ap_reg_pp0_iter2_tmp_6_reg_531 <= ap_reg_pp0_iter1_tmp_6_reg_531;
                ap_reg_pp0_iter2_tmp_i_reg_522 <= ap_reg_pp0_iter1_tmp_i_reg_522;
                ap_reg_pp0_iter3_tmp_6_reg_531 <= ap_reg_pp0_iter2_tmp_6_reg_531;
                ap_reg_pp0_iter3_tmp_i_reg_522 <= ap_reg_pp0_iter2_tmp_i_reg_522;
                ap_reg_pp0_iter4_tmp_6_reg_531 <= ap_reg_pp0_iter3_tmp_6_reg_531;
                ap_reg_pp0_iter4_tmp_i_reg_522 <= ap_reg_pp0_iter3_tmp_i_reg_522;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_fu_169_p2 = ap_const_lv1_0))) then
                col_inbuf_addr_reg_517 <= tmp_141_cast_i_fu_181_p1(3 - 1 downto 0);
                    tmp_21_cast_reg_512(6 downto 3) <= tmp_21_cast_fu_194_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_507 <= i_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_lv1_0 = ap_reg_pp0_iter2_tmp_i_reg_522))) then
                tmp1_reg_641 <= grp_fu_481_p3;
                tmp2_reg_646 <= grp_fu_488_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_tmp_i_reg_522))) then
                tmp3_reg_651 <= tmp3_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_i_reg_522) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then
                tmp5_reg_636 <= grp_fu_465_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_i_reg_522))) then
                tmp_10_i_reg_551 <= dct_coeff_table_q0(31 downto 16);
                tmp_11_i_reg_556 <= col_inbuf_q0(31 downto 16);
                tmp_12_i_reg_561 <= dct_coeff_table_q0(47 downto 32);
                tmp_13_i_reg_566 <= col_inbuf_q0(47 downto 32);
                tmp_15_i_reg_571 <= dct_coeff_table_q0(63 downto 48);
                tmp_16_i_reg_576 <= col_inbuf_q0(63 downto 48);
                tmp_17_i_reg_581 <= dct_coeff_table_q0(79 downto 64);
                tmp_18_i_reg_586 <= col_inbuf_q0(79 downto 64);
                tmp_19_i_reg_591 <= dct_coeff_table_q0(95 downto 80);
                tmp_20_i_reg_596 <= col_inbuf_q0(95 downto 80);
                tmp_21_i_reg_601 <= dct_coeff_table_q0(111 downto 96);
                tmp_22_i_reg_606 <= col_inbuf_q0(111 downto 96);
                tmp_24_i_reg_616 <= col_inbuf_q0(127 downto 112);
                tmp_3_reg_611 <= dct_coeff_table_q0(126 downto 112);
                tmp_51_reg_541 <= tmp_51_fu_224_p1;
                tmp_52_reg_546 <= tmp_52_fu_228_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter3_tmp_i_reg_522))) then
                tmp_5_i_reg_656 <= tmp_3_i_fu_428_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_i_fu_198_p2))) then
                tmp_6_reg_531 <= tmp_6_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_i_reg_522))) then
                tmp_8_2_i_reg_626 <= tmp_8_2_i_fu_453_p2;
                tmp_8_4_i_reg_631 <= tmp_8_4_i_fu_459_p2;
                tmp_8_i_reg_621 <= tmp_8_i_fu_447_p2;
            end if;
        end if;
    end process;
    tmp_21_cast_reg_512(2 downto 0) <= "000";
    tmp_21_cast_reg_512(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, tmp_2_fu_169_p2, ap_CS_fsm_state2, tmp_i_fu_198_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_fu_169_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (tmp_i_fu_198_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (tmp_i_fu_198_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(3);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(tmp_i_fu_198_p2)
    begin
        if ((tmp_i_fu_198_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, tmp_2_fu_169_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_fu_169_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_2_fu_169_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_fu_169_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_address0 <= col_inbuf_addr_reg_517;

    col_inbuf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            col_inbuf_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_i_address0 <= tmp_22_cast_fu_443_p1(6 - 1 downto 0);

    col_outbuf_i_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5))) then 
            col_outbuf_i_ce0 <= ap_const_logic_1;
        else 
            col_outbuf_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_i_d0 <= tmp_5_i_reg_656;

    col_outbuf_i_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter4_tmp_i_reg_522, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_lv1_0 = ap_reg_pp0_iter4_tmp_i_reg_522))) then 
            col_outbuf_i_we0 <= ap_const_logic_1;
        else 
            col_outbuf_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_address0 <= tmp_i_32_fu_210_p1(3 - 1 downto 0);

    dct_coeff_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            dct_coeff_table_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_472_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    i_fu_175_p2 <= std_logic_vector(unsigned(i_2_i_reg_147) + unsigned(ap_const_lv4_1));
    k_fu_204_p2 <= std_logic_vector(unsigned(k_i_reg_158) + unsigned(ap_const_lv4_1));
    tmp3_fu_420_p2 <= std_logic_vector(signed(tmp5_reg_636) + signed(grp_fu_495_p3));
    tmp_141_cast_i_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_i_reg_147),64));
    tmp_21_cast_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_186_p3),8));
    tmp_22_cast_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter4_tmp_6_reg_531),64));
    tmp_2_fu_169_p2 <= "1" when (i_2_i_reg_147 = ap_const_lv4_8) else "0";
    tmp_3_i_fu_428_p2 <= std_logic_vector(unsigned(tmp3_reg_651) + unsigned(tmp_fu_424_p2));
    tmp_51_fu_224_p1 <= dct_coeff_table_q0(16 - 1 downto 0);
    tmp_52_fu_228_p1 <= col_inbuf_q0(16 - 1 downto 0);
    tmp_6_fu_219_p2 <= std_logic_vector(unsigned(tmp_i_cast_fu_215_p1) + unsigned(tmp_21_cast_reg_512));
    tmp_fu_424_p2 <= std_logic_vector(signed(tmp2_reg_646) + signed(tmp1_reg_641));
    tmp_i_32_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_i_reg_158),64));
    tmp_i_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_i_reg_158),8));
    tmp_i_fu_198_p2 <= "1" when (k_i_reg_158 = ap_const_lv4_8) else "0";
    tmp_s_fu_186_p3 <= (i_2_i_reg_147 & ap_const_lv3_0);
end behav;
