// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _read_data_HH_
#define _read_data_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct read_data : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > input_r_address0;
    sc_out< sc_logic > input_r_ce0;
    sc_in< sc_lv<16> > input_r_q0;
    sc_out< sc_lv<3> > buf_r_address0;
    sc_out< sc_logic > buf_r_ce0;
    sc_out< sc_logic > buf_r_we0;
    sc_out< sc_lv<128> > buf_r_d0;
    sc_in< sc_lv<128> > buf_r_q0;


    // Module declarations
    read_data(sc_module_name name);
    SC_HAS_PROCESS(read_data);

    ~read_data();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > indvar_flatten_reg_81;
    sc_signal< sc_lv<4> > r_reg_92;
    sc_signal< sc_lv<4> > c_reg_104;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_116_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_332;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_flatten_reg_332;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter2_exitcond_flatten_reg_332;
    sc_signal< sc_lv<7> > indvar_flatten_next_fu_122_p2;
    sc_signal< sc_lv<7> > indvar_flatten_next_reg_336;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<4> > c_mid2_fu_140_p3;
    sc_signal< sc_lv<4> > c_mid2_reg_341;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_state7_pp0_stage1_iter2;
    sc_signal< bool > ap_block_pp0_stage1_flag00011001;
    sc_signal< sc_lv<4> > tmp_mid2_v_v_fu_148_p3;
    sc_signal< sc_lv<4> > tmp_mid2_v_v_reg_347;
    sc_signal< sc_lv<3> > tmp_fu_156_p1;
    sc_signal< sc_lv<3> > tmp_reg_352;
    sc_signal< sc_lv<3> > buf_addr_reg_357;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter1_buf_addr_reg_357;
    sc_signal< sc_lv<3> > tmp_4_fu_165_p1;
    sc_signal< sc_lv<3> > tmp_4_reg_362;
    sc_signal< sc_lv<4> > c_2_fu_190_p2;
    sc_signal< sc_lv<4> > c_2_reg_372;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<16> > input_load_reg_377;
    sc_signal< sc_lv<1> > tmp_5_fu_208_p2;
    sc_signal< sc_lv<1> > tmp_5_reg_382;
    sc_signal< sc_lv<8> > tmp_6_fu_214_p1;
    sc_signal< sc_lv<8> > tmp_6_reg_388;
    sc_signal< sc_lv<128> > p_demorgan_fu_264_p2;
    sc_signal< sc_lv<128> > p_demorgan_reg_394;
    sc_signal< sc_lv<128> > tmp_18_fu_288_p2;
    sc_signal< sc_lv<128> > tmp_18_reg_400;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage1_flag00011011;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<7> > indvar_flatten_phi_fu_85_p4;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_lv<4> > r_phi_fu_96_p4;
    sc_signal< bool > ap_block_pp0_stage1_flag00000000;
    sc_signal< sc_lv<4> > c_phi_fu_108_p4;
    sc_signal< sc_lv<64> > tmp_7_mid2_fu_160_p1;
    sc_signal< sc_lv<64> > tmp_s_fu_185_p1;
    sc_signal< sc_lv<1> > exitcond5_fu_134_p2;
    sc_signal< sc_lv<4> > r_2_fu_128_p2;
    sc_signal< sc_lv<6> > c_cast2_fu_176_p1;
    sc_signal< sc_lv<6> > tmp_mid2_fu_169_p3;
    sc_signal< sc_lv<6> > tmp_9_fu_179_p2;
    sc_signal< sc_lv<7> > tmp_2_fu_195_p3;
    sc_signal< sc_lv<7> > tmp_3_fu_202_p2;
    sc_signal< sc_lv<8> > tmp_7_fu_218_p1;
    sc_signal< sc_lv<8> > tmp_11_fu_222_p3;
    sc_signal< sc_lv<8> > tmp_12_fu_230_p3;
    sc_signal< sc_lv<8> > tmp_14_fu_238_p2;
    sc_signal< sc_lv<128> > tmp_16_fu_244_p1;
    sc_signal< sc_lv<128> > tmp_17_fu_248_p1;
    sc_signal< sc_lv<128> > tmp_21_fu_252_p2;
    sc_signal< sc_lv<128> > tmp_22_fu_258_p2;
    sc_signal< sc_lv<8> > tmp_10_fu_273_p2;
    sc_signal< sc_lv<8> > tmp_13_fu_278_p3;
    sc_signal< sc_lv<128> > tmp_8_fu_270_p1;
    sc_signal< sc_lv<128> > tmp_15_fu_284_p1;
    sc_signal< sc_lv<128> > tmp_19_fu_294_p4;
    sc_signal< sc_lv<128> > tmp_23_fu_309_p2;
    sc_signal< sc_lv<128> > tmp_20_fu_303_p3;
    sc_signal< sc_lv<128> > tmp_24_fu_314_p2;
    sc_signal< sc_lv<128> > tmp_25_fu_320_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<7> ap_const_lv7_F;
    static const sc_lv<8> ap_const_lv8_7F;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_pp0_stage1_flag00000000();
    void thread_ap_block_pp0_stage1_flag00011001();
    void thread_ap_block_pp0_stage1_flag00011011();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_block_state6_pp0_stage0_iter2();
    void thread_ap_block_state7_pp0_stage1_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_buf_r_address0();
    void thread_buf_r_ce0();
    void thread_buf_r_d0();
    void thread_buf_r_we0();
    void thread_c_2_fu_190_p2();
    void thread_c_cast2_fu_176_p1();
    void thread_c_mid2_fu_140_p3();
    void thread_c_phi_fu_108_p4();
    void thread_exitcond5_fu_134_p2();
    void thread_exitcond_flatten_fu_116_p2();
    void thread_indvar_flatten_next_fu_122_p2();
    void thread_indvar_flatten_phi_fu_85_p4();
    void thread_input_r_address0();
    void thread_input_r_ce0();
    void thread_p_demorgan_fu_264_p2();
    void thread_r_2_fu_128_p2();
    void thread_r_phi_fu_96_p4();
    void thread_tmp_10_fu_273_p2();
    void thread_tmp_11_fu_222_p3();
    void thread_tmp_12_fu_230_p3();
    void thread_tmp_13_fu_278_p3();
    void thread_tmp_14_fu_238_p2();
    void thread_tmp_15_fu_284_p1();
    void thread_tmp_16_fu_244_p1();
    void thread_tmp_17_fu_248_p1();
    void thread_tmp_18_fu_288_p2();
    void thread_tmp_19_fu_294_p4();
    void thread_tmp_20_fu_303_p3();
    void thread_tmp_21_fu_252_p2();
    void thread_tmp_22_fu_258_p2();
    void thread_tmp_23_fu_309_p2();
    void thread_tmp_24_fu_314_p2();
    void thread_tmp_25_fu_320_p2();
    void thread_tmp_2_fu_195_p3();
    void thread_tmp_3_fu_202_p2();
    void thread_tmp_4_fu_165_p1();
    void thread_tmp_5_fu_208_p2();
    void thread_tmp_6_fu_214_p1();
    void thread_tmp_7_fu_218_p1();
    void thread_tmp_7_mid2_fu_160_p1();
    void thread_tmp_8_fu_270_p1();
    void thread_tmp_9_fu_179_p2();
    void thread_tmp_fu_156_p1();
    void thread_tmp_mid2_fu_169_p3();
    void thread_tmp_mid2_v_v_fu_148_p3();
    void thread_tmp_s_fu_185_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
