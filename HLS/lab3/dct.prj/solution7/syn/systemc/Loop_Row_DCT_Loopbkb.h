// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __Loop_Row_DCT_Loopbkb_H__
#define __Loop_Row_DCT_Loopbkb_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct Loop_Row_DCT_Loopbkb_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 127;
  static const unsigned AddressRange = 8;
  static const unsigned AddressWidth = 3;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(Loop_Row_DCT_Loopbkb_ram) {
        ram[0] = "0b0100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000";
        ram[1] = "0b1010011100111101101101001100000111001101101110011110111001011000000100011010100000110010010010000100101101000010010110001100011";
        ram[2] = "0b0101001110011110001000101010001111011101010111111010110001100011101011000110001111011101010111100010001010100010010100111001111";
        ram[3] = "0b1011010011000000000100011010100001011000110001100011001001001001110011011011100110100111001111011110111001011000010010110100001";
        ram[4] = "0b0100000000000001110000000000001111000000000000100100000000000000010000000000000111000000000000011100000000000000010000000000000";
        ram[5] = "0b1100110110111000010110001100011111101110010110011011010011000000010010110100001000010001101010011010011100111100001100100100100";
        ram[6] = "0b0010001010100011101011000110001001010011100111111101110101011111110111010101111001010011100111111010110001100010001000101010001";
        ram[7] = "0b1110111001011000001100100100100110110100110000000101100011000111101001110011110001001011010000111100110110111000000100011010100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(Loop_Row_DCT_Loopbkb) {


static const unsigned DataWidth = 127;
static const unsigned AddressRange = 8;
static const unsigned AddressWidth = 3;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


Loop_Row_DCT_Loopbkb_ram* meminst;


SC_CTOR(Loop_Row_DCT_Loopbkb) {
meminst = new Loop_Row_DCT_Loopbkb_ram("Loop_Row_DCT_Loopbkb_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~Loop_Row_DCT_Loopbkb() {
    delete meminst;
}


};//endmodule
#endif
