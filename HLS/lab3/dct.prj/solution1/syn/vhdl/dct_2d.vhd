-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_block_ce0 : OUT STD_LOGIC;
    in_block_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_block_ce0 : OUT STD_LOGIC;
    out_block_we0 : OUT STD_LOGIC;
    out_block_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_4_fu_192_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_363 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_2_fu_204_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_reg_371 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_3_cast_fu_210_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_cast_reg_376 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_cast_fu_222_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_cast_reg_381 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_6_fu_232_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_reg_389 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_7_fu_242_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_394 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_279_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_407 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_3_fu_291_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_415 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_9_cast_fu_297_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_cast_reg_420 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_cast_fu_309_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_cast_reg_425 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_7_fu_319_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_reg_433 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_12_fu_329_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_reg_438 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_outbuf_ce0 : STD_LOGIC;
    signal row_outbuf_we0 : STD_LOGIC;
    signal row_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_outbuf_ce0 : STD_LOGIC;
    signal col_outbuf_we0 : STD_LOGIC;
    signal col_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_ce0 : STD_LOGIC;
    signal col_inbuf_we0 : STD_LOGIC;
    signal col_inbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d2_fu_171_ap_start : STD_LOGIC;
    signal grp_dct_1d2_fu_171_ap_done : STD_LOGIC;
    signal grp_dct_1d2_fu_171_ap_idle : STD_LOGIC;
    signal grp_dct_1d2_fu_171_ap_ready : STD_LOGIC;
    signal grp_dct_1d2_fu_171_src_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_1d2_fu_171_src_ce0 : STD_LOGIC;
    signal grp_dct_1d2_fu_171_src_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d2_fu_171_tmp_6 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_1d2_fu_171_dst_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_1d2_fu_171_dst_ce0 : STD_LOGIC;
    signal grp_dct_1d2_fu_171_dst_we0 : STD_LOGIC;
    signal grp_dct_1d2_fu_171_dst_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d2_fu_171_tmp_61 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_103 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_reg_115 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_126 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_2_reg_137 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_1_reg_149 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_160 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_reg_grp_dct_1d2_fu_171_ap_start : STD_LOGIC := '0';
    signal tmp_16_cast_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_cast_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_214_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_cast_fu_238_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_247_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_cast_fu_255_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_259_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_301_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_cast_fu_325_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_334_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_cast_fu_342_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_346_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component dct_1d2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        tmp_6 : IN STD_LOGIC_VECTOR (3 downto 0);
        dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        tmp_61 : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component dct_2d_row_outbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    row_outbuf_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_outbuf_address0,
        ce0 => row_outbuf_ce0,
        we0 => row_outbuf_we0,
        d0 => grp_dct_1d2_fu_171_dst_d0,
        q0 => row_outbuf_q0);

    col_outbuf_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_outbuf_address0,
        ce0 => col_outbuf_ce0,
        we0 => col_outbuf_we0,
        d0 => grp_dct_1d2_fu_171_dst_d0,
        q0 => col_outbuf_q0);

    col_inbuf_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_inbuf_address0,
        ce0 => col_inbuf_ce0,
        we0 => col_inbuf_we0,
        d0 => row_outbuf_q0,
        q0 => col_inbuf_q0);

    grp_dct_1d2_fu_171 : component dct_1d2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dct_1d2_fu_171_ap_start,
        ap_done => grp_dct_1d2_fu_171_ap_done,
        ap_idle => grp_dct_1d2_fu_171_ap_idle,
        ap_ready => grp_dct_1d2_fu_171_ap_ready,
        src_address0 => grp_dct_1d2_fu_171_src_address0,
        src_ce0 => grp_dct_1d2_fu_171_src_ce0,
        src_q0 => grp_dct_1d2_fu_171_src_q0,
        tmp_6 => grp_dct_1d2_fu_171_tmp_6,
        dst_address0 => grp_dct_1d2_fu_171_dst_address0,
        dst_ce0 => grp_dct_1d2_fu_171_dst_ce0,
        dst_we0 => grp_dct_1d2_fu_171_dst_we0,
        dst_d0 => grp_dct_1d2_fu_171_dst_d0,
        tmp_61 => grp_dct_1d2_fu_171_tmp_61);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_dct_1d2_fu_171_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dct_1d2_fu_171_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_fu_186_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_4_fu_273_p2)))) then 
                    ap_reg_grp_dct_1d2_fu_171_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dct_1d2_fu_171_ap_ready)) then 
                    ap_reg_grp_dct_1d2_fu_171_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_1_reg_126 <= i_6_reg_389;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_2_fu_198_p2 = ap_const_lv1_0))) then 
                i_1_reg_126 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_2_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_2_fu_198_p2 = ap_const_lv1_1))) then 
                i_2_reg_137 <= ap_const_lv4_0;
            elsif (((grp_dct_1d2_fu_171_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_2_reg_137 <= i_5_reg_407;
            end if; 
        end if;
    end process;

    i_3_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_3_reg_160 <= i_7_reg_433;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_8_fu_285_p2))) then 
                i_3_reg_160 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_dct_1d2_fu_171_ap_done = ap_const_logic_1))) then 
                i_reg_103 <= i_4_reg_363;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_103 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_1_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_4_fu_273_p2))) then 
                j_1_reg_149 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_1_fu_313_p2 = ap_const_lv1_1))) then 
                j_1_reg_149 <= j_3_reg_415;
            end if; 
        end if;
    end process;

    j_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_186_p2))) then 
                j_reg_115 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_5_fu_226_p2 = ap_const_lv1_1))) then 
                j_reg_115 <= j_2_reg_371;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_4_reg_363 <= i_4_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_5_reg_407 <= i_5_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_6_reg_389 <= i_6_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_7_reg_433 <= i_7_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_2_reg_371 <= j_2_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                j_3_reg_415 <= j_3_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_2_fu_198_p2 = ap_const_lv1_0))) then
                    tmp_12_cast_reg_381(6 downto 3) <= tmp_12_cast_fu_222_p1(6 downto 3);
                    tmp_3_cast_reg_376(3 downto 0) <= tmp_3_cast_fu_210_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = tmp_1_fu_313_p2))) then
                tmp_12_reg_438 <= tmp_12_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_8_fu_285_p2))) then
                    tmp_18_cast_reg_425(6 downto 3) <= tmp_18_cast_fu_309_p1(6 downto 3);
                    tmp_9_cast_reg_420(3 downto 0) <= tmp_9_cast_fu_297_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_5_fu_226_p2))) then
                tmp_7_reg_394 <= tmp_7_fu_242_p2;
            end if;
        end if;
    end process;
    tmp_3_cast_reg_376(7 downto 4) <= "0000";
    tmp_12_cast_reg_381(2 downto 0) <= "000";
    tmp_12_cast_reg_381(7) <= '0';
    tmp_9_cast_reg_420(7 downto 4) <= "0000";
    tmp_18_cast_reg_425(2 downto 0) <= "000";
    tmp_18_cast_reg_425(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_2_fu_198_p2, ap_CS_fsm_state5, tmp_5_fu_226_p2, ap_CS_fsm_state7, ap_CS_fsm_state9, tmp_8_fu_285_p2, ap_CS_fsm_state10, tmp_1_fu_313_p2, grp_dct_1d2_fu_171_ap_done, ap_CS_fsm_state3, tmp_fu_186_p2, ap_CS_fsm_state8, tmp_4_fu_273_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_186_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_dct_1d2_fu_171_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_2_fu_198_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_5_fu_226_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_4_fu_273_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((grp_dct_1d2_fu_171_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_8_fu_285_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_1_fu_313_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, tmp_8_fu_285_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_8_fu_285_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, tmp_8_fu_285_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_8_fu_285_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_address0_assign_proc : process(grp_dct_1d2_fu_171_src_address0, ap_CS_fsm_state6, ap_CS_fsm_state8, tmp_13_cast_fu_269_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            col_inbuf_address0 <= tmp_13_cast_fu_269_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            col_inbuf_address0 <= grp_dct_1d2_fu_171_src_address0;
        else 
            col_inbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    col_inbuf_ce0_assign_proc : process(grp_dct_1d2_fu_171_src_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            col_inbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            col_inbuf_ce0 <= grp_dct_1d2_fu_171_src_ce0;
        else 
            col_inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            col_inbuf_we0 <= ap_const_logic_1;
        else 
            col_inbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    col_outbuf_address0_assign_proc : process(ap_CS_fsm_state10, grp_dct_1d2_fu_171_dst_address0, ap_CS_fsm_state8, tmp_22_cast_fu_351_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            col_outbuf_address0 <= tmp_22_cast_fu_351_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            col_outbuf_address0 <= grp_dct_1d2_fu_171_dst_address0;
        else 
            col_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    col_outbuf_ce0_assign_proc : process(ap_CS_fsm_state10, grp_dct_1d2_fu_171_dst_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            col_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            col_outbuf_ce0 <= grp_dct_1d2_fu_171_dst_ce0;
        else 
            col_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    col_outbuf_we0_assign_proc : process(grp_dct_1d2_fu_171_dst_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            col_outbuf_we0 <= grp_dct_1d2_fu_171_dst_we0;
        else 
            col_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_dct_1d2_fu_171_ap_start <= ap_reg_grp_dct_1d2_fu_171_ap_start;

    grp_dct_1d2_fu_171_src_q0_assign_proc : process(in_block_q0, col_inbuf_q0, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_dct_1d2_fu_171_src_q0 <= col_inbuf_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_dct_1d2_fu_171_src_q0 <= in_block_q0;
        else 
            grp_dct_1d2_fu_171_src_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_dct_1d2_fu_171_tmp_6_assign_proc : process(i_reg_103, ap_CS_fsm_state3, i_2_reg_137, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_dct_1d2_fu_171_tmp_6 <= i_2_reg_137;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_dct_1d2_fu_171_tmp_6 <= i_reg_103;
        else 
            grp_dct_1d2_fu_171_tmp_6 <= "XXXX";
        end if; 
    end process;


    grp_dct_1d2_fu_171_tmp_61_assign_proc : process(i_reg_103, ap_CS_fsm_state3, i_2_reg_137, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_dct_1d2_fu_171_tmp_61 <= i_2_reg_137;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_dct_1d2_fu_171_tmp_61 <= i_reg_103;
        else 
            grp_dct_1d2_fu_171_tmp_61 <= "XXXX";
        end if; 
    end process;

    i_4_fu_192_p2 <= std_logic_vector(unsigned(i_reg_103) + unsigned(ap_const_lv4_1));
    i_5_fu_279_p2 <= std_logic_vector(unsigned(i_2_reg_137) + unsigned(ap_const_lv4_1));
    i_6_fu_232_p2 <= std_logic_vector(unsigned(i_1_reg_126) + unsigned(ap_const_lv4_1));
    i_7_fu_319_p2 <= std_logic_vector(unsigned(i_3_reg_160) + unsigned(ap_const_lv4_1));
    in_block_address0 <= grp_dct_1d2_fu_171_src_address0;

    in_block_ce0_assign_proc : process(grp_dct_1d2_fu_171_src_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_block_ce0 <= grp_dct_1d2_fu_171_src_ce0;
        else 
            in_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_204_p2 <= std_logic_vector(unsigned(j_reg_115) + unsigned(ap_const_lv4_1));
    j_3_fu_291_p2 <= std_logic_vector(unsigned(j_1_reg_149) + unsigned(ap_const_lv4_1));
    out_block_address0 <= tmp_19_cast_fu_356_p1(6 - 1 downto 0);

    out_block_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_block_ce0 <= ap_const_logic_1;
        else 
            out_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_block_d0 <= col_outbuf_q0;

    out_block_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_block_we0 <= ap_const_logic_1;
        else 
            out_block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_outbuf_address0_assign_proc : process(ap_CS_fsm_state5, grp_dct_1d2_fu_171_dst_address0, ap_CS_fsm_state3, tmp_16_cast_fu_264_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            row_outbuf_address0 <= tmp_16_cast_fu_264_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_outbuf_address0 <= grp_dct_1d2_fu_171_dst_address0;
        else 
            row_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    row_outbuf_ce0_assign_proc : process(ap_CS_fsm_state5, grp_dct_1d2_fu_171_dst_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            row_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_outbuf_ce0 <= grp_dct_1d2_fu_171_dst_ce0;
        else 
            row_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_outbuf_we0_assign_proc : process(grp_dct_1d2_fu_171_dst_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_outbuf_we0 <= grp_dct_1d2_fu_171_dst_we0;
        else 
            row_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_160),8));
    tmp_10_fu_259_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_376) + unsigned(tmp_15_cast_fu_255_p1));
    tmp_11_fu_301_p3 <= (j_1_reg_149 & ap_const_lv3_0);
    tmp_12_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_214_p3),8));
    tmp_12_fu_329_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_325_p1) + unsigned(tmp_18_cast_reg_425));
    tmp_13_cast_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_394),64));
    tmp_13_fu_334_p3 <= (i_3_reg_160 & ap_const_lv3_0);
    tmp_14_fu_346_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_420) + unsigned(tmp_21_cast_fu_342_p1));
    tmp_15_cast_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_247_p3),8));
    tmp_16_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_259_p2),64));
    tmp_18_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_301_p3),8));
    tmp_19_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_438),64));
    tmp_1_fu_313_p2 <= "1" when (i_3_reg_160 = ap_const_lv4_8) else "0";
    tmp_21_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_334_p3),8));
    tmp_22_cast_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_346_p2),64));
    tmp_2_fu_198_p2 <= "1" when (j_reg_115 = ap_const_lv4_8) else "0";
    tmp_3_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_115),8));
    tmp_3_fu_214_p3 <= (j_reg_115 & ap_const_lv3_0);
    tmp_4_fu_273_p2 <= "1" when (i_2_reg_137 = ap_const_lv4_8) else "0";
    tmp_5_fu_226_p2 <= "1" when (i_1_reg_126 = ap_const_lv4_8) else "0";
    tmp_7_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_126),8));
    tmp_7_fu_242_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_238_p1) + unsigned(tmp_12_cast_reg_381));
    tmp_8_fu_285_p2 <= "1" when (j_1_reg_149 = ap_const_lv4_8) else "0";
    tmp_9_cast_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_149),8));
    tmp_9_fu_247_p3 <= (i_1_reg_126 & ap_const_lv3_0);
    tmp_fu_186_p2 <= "1" when (i_reg_103 = ap_const_lv4_8) else "0";
end behav;
