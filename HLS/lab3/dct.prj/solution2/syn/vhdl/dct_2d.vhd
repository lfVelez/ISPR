-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_block_ce0 : OUT STD_LOGIC;
    in_block_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_block_ce0 : OUT STD_LOGIC;
    out_block_we0 : OUT STD_LOGIC;
    out_block_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_133 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_144 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_155 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten1_reg_178 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_189 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_200 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_4_fu_232_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_444 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_449 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_449 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_244_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal i_1_mid2_fu_262_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_mid2_reg_458 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter1_i_1_mid2_reg_458 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_mid2_v_fu_270_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_mid2_v_reg_465 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter1_tmp_3_mid2_v_reg_465 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_fu_303_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_4_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_5_fu_339_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_486 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten1_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_491 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state10_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp1_iter1_exitcond_flatten1_reg_491 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next1_fu_351_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal i_3_mid2_fu_369_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_mid2_reg_500 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp1_iter1_i_3_mid2_reg_500 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_mid2_v_fu_377_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_mid2_v_reg_507 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp1_iter1_tmp_9_mid2_v_reg_507 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_fu_410_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal row_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_outbuf_ce0 : STD_LOGIC;
    signal row_outbuf_we0 : STD_LOGIC;
    signal row_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_outbuf_ce0 : STD_LOGIC;
    signal col_outbuf_we0 : STD_LOGIC;
    signal col_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_ce0 : STD_LOGIC;
    signal col_inbuf_we0 : STD_LOGIC;
    signal col_inbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d2_fu_211_ap_start : STD_LOGIC;
    signal grp_dct_1d2_fu_211_ap_done : STD_LOGIC;
    signal grp_dct_1d2_fu_211_ap_idle : STD_LOGIC;
    signal grp_dct_1d2_fu_211_ap_ready : STD_LOGIC;
    signal grp_dct_1d2_fu_211_src_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_1d2_fu_211_src_ce0 : STD_LOGIC;
    signal grp_dct_1d2_fu_211_src_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d2_fu_211_tmp_6 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_1d2_fu_211_dst_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_1d2_fu_211_dst_ce0 : STD_LOGIC;
    signal grp_dct_1d2_fu_211_dst_we0 : STD_LOGIC;
    signal grp_dct_1d2_fu_211_dst_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d2_fu_211_tmp_61 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_121 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_phi_fu_148_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal i_1_phi_fu_159_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_166 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_1_phi_fu_193_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal i_3_phi_fu_204_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_grp_dct_1d2_fu_211_ap_start : STD_LOGIC := '0';
    signal tmp_11_cast_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_cast_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_250_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_281_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_mid2_cast_fu_278_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_cast_fu_288_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_292_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_308_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_cast_fu_319_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_cast_fu_315_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_322_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_357_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_388_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_mid2_cast_fu_385_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_cast_fu_395_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_399_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_415_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_cast_fu_426_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_cast_fu_422_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_429_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component dct_1d2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        tmp_6 : IN STD_LOGIC_VECTOR (3 downto 0);
        dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        tmp_61 : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component dct_2d_row_outbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    row_outbuf_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_outbuf_address0,
        ce0 => row_outbuf_ce0,
        we0 => row_outbuf_we0,
        d0 => grp_dct_1d2_fu_211_dst_d0,
        q0 => row_outbuf_q0);

    col_outbuf_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_outbuf_address0,
        ce0 => col_outbuf_ce0,
        we0 => col_outbuf_we0,
        d0 => grp_dct_1d2_fu_211_dst_d0,
        q0 => col_outbuf_q0);

    col_inbuf_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_inbuf_address0,
        ce0 => col_inbuf_ce0,
        we0 => col_inbuf_we0,
        d0 => row_outbuf_q0,
        q0 => col_inbuf_q0);

    grp_dct_1d2_fu_211 : component dct_1d2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dct_1d2_fu_211_ap_start,
        ap_done => grp_dct_1d2_fu_211_ap_done,
        ap_idle => grp_dct_1d2_fu_211_ap_idle,
        ap_ready => grp_dct_1d2_fu_211_ap_ready,
        src_address0 => grp_dct_1d2_fu_211_src_address0,
        src_ce0 => grp_dct_1d2_fu_211_src_ce0,
        src_q0 => grp_dct_1d2_fu_211_src_q0,
        tmp_6 => grp_dct_1d2_fu_211_tmp_6,
        dst_address0 => grp_dct_1d2_fu_211_dst_address0,
        dst_ce0 => grp_dct_1d2_fu_211_dst_ce0,
        dst_we0 => grp_dct_1d2_fu_211_dst_we0,
        dst_d0 => grp_dct_1d2_fu_211_dst_d0,
        tmp_61 => grp_dct_1d2_fu_211_tmp_61);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_226_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state4 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_226_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_4_fu_333_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state10 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_4_fu_333_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dct_1d2_fu_211_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dct_1d2_fu_211_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_226_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = tmp_4_fu_333_p2)))) then 
                    ap_reg_grp_dct_1d2_fu_211_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dct_1d2_fu_211_ap_ready)) then 
                    ap_reg_grp_dct_1d2_fu_211_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_226_p2 = ap_const_lv1_1))) then 
                i_1_reg_155 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_449 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_1_reg_155 <= i_6_fu_303_p2;
            end if; 
        end if;
    end process;

    i_2_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_2_reg_166 <= ap_const_lv4_0;
            elsif (((grp_dct_1d2_fu_211_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_2_reg_166 <= i_5_reg_486;
            end if; 
        end if;
    end process;

    i_3_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_4_fu_333_p2 = ap_const_lv1_1))) then 
                i_3_reg_200 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten1_reg_491) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                i_3_reg_200 <= i_7_fu_410_p2;
            end if; 
        end if;
    end process;

    i_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_dct_1d2_fu_211_ap_done = ap_const_logic_1))) then 
                i_reg_121 <= i_4_reg_444;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_121 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_4_fu_333_p2 = ap_const_lv1_1))) then 
                indvar_flatten1_reg_178 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten1_fu_345_p2))) then 
                indvar_flatten1_reg_178 <= indvar_flatten_next1_fu_351_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_226_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_133 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_238_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_133 <= indvar_flatten_next_fu_244_p2;
            end if; 
        end if;
    end process;

    j_1_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_4_fu_333_p2 = ap_const_lv1_1))) then 
                j_1_reg_189 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten1_reg_491) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                j_1_reg_189 <= tmp_9_mid2_v_reg_507;
            end if; 
        end if;
    end process;

    j_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_226_p2 = ap_const_lv1_1))) then 
                j_reg_144 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_449 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                j_reg_144 <= tmp_3_mid2_v_reg_465;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_449 <= exitcond_flatten_reg_449;
                ap_reg_pp0_iter1_i_1_mid2_reg_458 <= i_1_mid2_reg_458;
                ap_reg_pp0_iter1_tmp_3_mid2_v_reg_465 <= tmp_3_mid2_v_reg_465;
                exitcond_flatten_reg_449 <= exitcond_flatten_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_exitcond_flatten1_reg_491 <= exitcond_flatten1_reg_491;
                ap_reg_pp1_iter1_i_3_mid2_reg_500 <= i_3_mid2_reg_500;
                ap_reg_pp1_iter1_tmp_9_mid2_v_reg_507 <= tmp_9_mid2_v_reg_507;
                exitcond_flatten1_reg_491 <= exitcond_flatten1_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_fu_238_p2 = ap_const_lv1_0))) then
                i_1_mid2_reg_458 <= i_1_mid2_fu_262_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten1_fu_345_p2))) then
                i_3_mid2_reg_500 <= i_3_mid2_fu_369_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_4_reg_444 <= i_4_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_5_reg_486 <= i_5_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_238_p2 = ap_const_lv1_0))) then
                tmp_3_mid2_v_reg_465 <= tmp_3_mid2_v_fu_270_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten1_fu_345_p2))) then
                tmp_9_mid2_v_reg_507 <= tmp_9_mid2_v_fu_377_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_226_p2, ap_CS_fsm_state2, exitcond_flatten_fu_238_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, tmp_4_fu_333_p2, ap_CS_fsm_state8, exitcond_flatten1_fu_345_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_flag00011011, ap_enable_reg_pp1_iter2, grp_dct_1d2_fu_211_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_226_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_dct_1d2_fu_211_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_238_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_238_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_4_fu_333_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((grp_dct_1d2_fu_211_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten1_fu_345_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten1_fu_345_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond_flatten_fu_238_p2)
    begin
        if ((exitcond_flatten_fu_238_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state10_assign_proc : process(exitcond_flatten1_fu_345_p2)
    begin
        if ((exitcond_flatten1_fu_345_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1) and (ap_const_logic_0 = ap_enable_reg_pp1_iter2))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_address0_assign_proc : process(ap_enable_reg_pp0_iter2, grp_dct_1d2_fu_211_src_address0, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_state9, tmp_13_cast_fu_328_p1)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            col_inbuf_address0 <= tmp_13_cast_fu_328_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            col_inbuf_address0 <= grp_dct_1d2_fu_211_src_address0;
        else 
            col_inbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    col_inbuf_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2, grp_dct_1d2_fu_211_src_ce0, ap_CS_fsm_state9)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            col_inbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            col_inbuf_ce0 <= grp_dct_1d2_fu_211_src_ce0;
        else 
            col_inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_exitcond_flatten_reg_449, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter1_exitcond_flatten_reg_449 = ap_const_lv1_0))) then 
            col_inbuf_we0 <= ap_const_logic_1;
        else 
            col_inbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    col_outbuf_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, grp_dct_1d2_fu_211_dst_address0, ap_CS_fsm_state9, ap_block_pp1_stage0_flag00000000, tmp_19_cast_fu_405_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            col_outbuf_address0 <= tmp_19_cast_fu_405_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            col_outbuf_address0 <= grp_dct_1d2_fu_211_dst_address0;
        else 
            col_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    col_outbuf_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter1, grp_dct_1d2_fu_211_dst_ce0, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            col_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            col_outbuf_ce0 <= grp_dct_1d2_fu_211_dst_ce0;
        else 
            col_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    col_outbuf_we0_assign_proc : process(grp_dct_1d2_fu_211_dst_we0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            col_outbuf_we0 <= grp_dct_1d2_fu_211_dst_we0;
        else 
            col_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten1_fu_345_p2 <= "1" when (indvar_flatten1_reg_178 = ap_const_lv7_40) else "0";
    exitcond_flatten_fu_238_p2 <= "1" when (indvar_flatten_reg_133 = ap_const_lv7_40) else "0";
    grp_dct_1d2_fu_211_ap_start <= ap_reg_grp_dct_1d2_fu_211_ap_start;

    grp_dct_1d2_fu_211_src_q0_assign_proc : process(in_block_q0, col_inbuf_q0, ap_CS_fsm_state3, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_dct_1d2_fu_211_src_q0 <= col_inbuf_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_dct_1d2_fu_211_src_q0 <= in_block_q0;
        else 
            grp_dct_1d2_fu_211_src_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_dct_1d2_fu_211_tmp_6_assign_proc : process(i_reg_121, ap_CS_fsm_state3, i_2_reg_166, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_dct_1d2_fu_211_tmp_6 <= i_2_reg_166;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_dct_1d2_fu_211_tmp_6 <= i_reg_121;
        else 
            grp_dct_1d2_fu_211_tmp_6 <= "XXXX";
        end if; 
    end process;


    grp_dct_1d2_fu_211_tmp_61_assign_proc : process(i_reg_121, ap_CS_fsm_state3, i_2_reg_166, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_dct_1d2_fu_211_tmp_61 <= i_2_reg_166;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_dct_1d2_fu_211_tmp_61 <= i_reg_121;
        else 
            grp_dct_1d2_fu_211_tmp_61 <= "XXXX";
        end if; 
    end process;

    i_1_mid2_fu_262_p3 <= 
        ap_const_lv4_0 when (tmp_1_fu_256_p2(0) = '1') else 
        i_1_phi_fu_159_p4;

    i_1_phi_fu_159_p4_assign_proc : process(i_1_reg_155, exitcond_flatten_reg_449, ap_CS_fsm_pp0_stage0, i_6_fu_303_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_449 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_1_phi_fu_159_p4 <= i_6_fu_303_p2;
        else 
            i_1_phi_fu_159_p4 <= i_1_reg_155;
        end if; 
    end process;

    i_3_mid2_fu_369_p3 <= 
        ap_const_lv4_0 when (tmp_7_fu_363_p2(0) = '1') else 
        i_3_phi_fu_204_p4;

    i_3_phi_fu_204_p4_assign_proc : process(i_3_reg_200, exitcond_flatten1_reg_491, ap_CS_fsm_pp1_stage0, i_7_fu_410_p2, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten1_reg_491) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_3_phi_fu_204_p4 <= i_7_fu_410_p2;
        else 
            i_3_phi_fu_204_p4 <= i_3_reg_200;
        end if; 
    end process;

    i_4_fu_232_p2 <= std_logic_vector(unsigned(i_reg_121) + unsigned(ap_const_lv4_1));
    i_5_fu_339_p2 <= std_logic_vector(unsigned(i_2_reg_166) + unsigned(ap_const_lv4_1));
    i_6_fu_303_p2 <= std_logic_vector(unsigned(i_1_mid2_reg_458) + unsigned(ap_const_lv4_1));
    i_7_fu_410_p2 <= std_logic_vector(unsigned(i_3_mid2_reg_500) + unsigned(ap_const_lv4_1));
    in_block_address0 <= grp_dct_1d2_fu_211_src_address0;

    in_block_ce0_assign_proc : process(grp_dct_1d2_fu_211_src_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_block_ce0 <= grp_dct_1d2_fu_211_src_ce0;
        else 
            in_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next1_fu_351_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_178) + unsigned(ap_const_lv7_1));
    indvar_flatten_next_fu_244_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_133) + unsigned(ap_const_lv7_1));

    j_1_phi_fu_193_p4_assign_proc : process(j_1_reg_189, exitcond_flatten1_reg_491, ap_CS_fsm_pp1_stage0, tmp_9_mid2_v_reg_507, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten1_reg_491) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            j_1_phi_fu_193_p4 <= tmp_9_mid2_v_reg_507;
        else 
            j_1_phi_fu_193_p4 <= j_1_reg_189;
        end if; 
    end process;

    j_2_fu_250_p2 <= std_logic_vector(unsigned(j_phi_fu_148_p4) + unsigned(ap_const_lv4_1));
    j_3_fu_357_p2 <= std_logic_vector(unsigned(j_1_phi_fu_193_p4) + unsigned(ap_const_lv4_1));

    j_phi_fu_148_p4_assign_proc : process(j_reg_144, exitcond_flatten_reg_449, ap_CS_fsm_pp0_stage0, tmp_3_mid2_v_reg_465, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_449 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            j_phi_fu_148_p4 <= tmp_3_mid2_v_reg_465;
        else 
            j_phi_fu_148_p4 <= j_reg_144;
        end if; 
    end process;

    out_block_address0 <= tmp_16_cast_fu_435_p1(6 - 1 downto 0);

    out_block_ce0_assign_proc : process(ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2))) then 
            out_block_ce0 <= ap_const_logic_1;
        else 
            out_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_block_d0 <= col_outbuf_q0;

    out_block_we0_assign_proc : process(ap_block_pp1_stage0_flag00011001, ap_reg_pp1_iter1_exitcond_flatten1_reg_491, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_flatten1_reg_491))) then 
            out_block_we0 <= ap_const_logic_1;
        else 
            out_block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_outbuf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, grp_dct_1d2_fu_211_dst_address0, ap_CS_fsm_state3, ap_block_pp0_stage0_flag00000000, tmp_11_cast_fu_298_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            row_outbuf_address0 <= tmp_11_cast_fu_298_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_outbuf_address0 <= grp_dct_1d2_fu_211_dst_address0;
        else 
            row_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    row_outbuf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1, grp_dct_1d2_fu_211_dst_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            row_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_outbuf_ce0 <= grp_dct_1d2_fu_211_dst_ce0;
        else 
            row_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_outbuf_we0_assign_proc : process(grp_dct_1d2_fu_211_dst_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_outbuf_we0 <= grp_dct_1d2_fu_211_dst_we0;
        else 
            row_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp1_iter1_i_3_mid2_reg_500),8));
    tmp_10_fu_429_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_426_p1) + unsigned(tmp_15_cast_fu_422_p1));
    tmp_11_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_292_p2),64));
    tmp_11_fu_388_p3 <= (i_3_mid2_reg_500 & ap_const_lv3_0);
    tmp_12_fu_399_p2 <= std_logic_vector(unsigned(tmp_9_mid2_cast_fu_385_p1) + unsigned(tmp_18_cast_fu_395_p1));
    tmp_13_cast_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_322_p2),64));
    tmp_15_cast_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_415_p3),8));
    tmp_16_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_429_p2),64));
    tmp_18_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_388_p3),8));
    tmp_19_cast_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_399_p2),64));
    tmp_1_fu_256_p2 <= "1" when (i_1_phi_fu_159_p4 = ap_const_lv4_8) else "0";
    tmp_2_fu_308_p3 <= (ap_reg_pp0_iter1_tmp_3_mid2_v_reg_465 & ap_const_lv3_0);
    tmp_3_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_308_p3),8));
    tmp_3_fu_292_p2 <= std_logic_vector(unsigned(tmp_3_mid2_cast_fu_278_p1) + unsigned(tmp_9_cast_fu_288_p1));
    tmp_3_mid2_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_mid2_v_reg_465),8));
    tmp_3_mid2_v_fu_270_p3 <= 
        j_2_fu_250_p2 when (tmp_1_fu_256_p2(0) = '1') else 
        j_phi_fu_148_p4;
    tmp_4_fu_333_p2 <= "1" when (i_2_reg_166 = ap_const_lv4_8) else "0";
    tmp_5_fu_322_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_319_p1) + unsigned(tmp_3_cast_fu_315_p1));
    tmp_7_cast_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_i_1_mid2_reg_458),8));
    tmp_7_fu_363_p2 <= "1" when (i_3_phi_fu_204_p4 = ap_const_lv4_8) else "0";
    tmp_8_fu_281_p3 <= (i_1_mid2_reg_458 & ap_const_lv3_0);
    tmp_9_cast_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_281_p3),8));
    tmp_9_fu_415_p3 <= (ap_reg_pp1_iter1_tmp_9_mid2_v_reg_507 & ap_const_lv3_0);
    tmp_9_mid2_cast_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_mid2_v_reg_507),8));
    tmp_9_mid2_v_fu_377_p3 <= 
        j_3_fu_357_p2 when (tmp_7_fu_363_p2(0) = '1') else 
        j_1_phi_fu_193_p4;
    tmp_fu_226_p2 <= "1" when (i_reg_121 = ap_const_lv4_8) else "0";
end behav;
