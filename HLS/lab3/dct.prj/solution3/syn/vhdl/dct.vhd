-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dct,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.727437,HLS_SYN_LAT=895,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=8,HLS_SYN_FF=736,HLS_SYN_LUT=1332}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_134 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_i_reg_145 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_i_reg_156 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten2_reg_167 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_i2_reg_178 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_i6_reg_189 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_411 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_411 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_228_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal c_i_mid2_fu_246_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_i_mid2_reg_420 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter1_c_i_mid2_reg_420 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_mid2_v_v_fu_254_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_mid2_v_v_reg_427 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter1_tmp_i_mid2_v_v_reg_427 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_262_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_433 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_fu_287_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond_flatten2_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_448 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp1_iter1_exitcond_flatten2_reg_448 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next2_fu_323_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal c_i6_mid2_fu_341_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_i6_mid2_reg_457 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i4_mid2_v_fu_349_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i4_mid2_v_reg_464 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_357_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_470 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_i_fu_396_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_i_reg_480 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_1_fu_402_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_dct_2d_fu_200_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal buf_2d_in_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_2d_in_ce0 : STD_LOGIC;
    signal buf_2d_in_we0 : STD_LOGIC;
    signal buf_2d_in_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_ce1 : STD_LOGIC;
    signal buf_2d_in_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_out_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_2d_out_ce0 : STD_LOGIC;
    signal buf_2d_out_we0 : STD_LOGIC;
    signal buf_2d_out_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_2d_fu_200_ap_start : STD_LOGIC;
    signal grp_dct_2d_fu_200_ap_idle : STD_LOGIC;
    signal grp_dct_2d_fu_200_ap_ready : STD_LOGIC;
    signal grp_dct_2d_fu_200_in_block_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_2d_fu_200_in_block_ce0 : STD_LOGIC;
    signal grp_dct_2d_fu_200_in_block_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_2d_fu_200_in_block_ce1 : STD_LOGIC;
    signal grp_dct_2d_fu_200_out_block_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_2d_fu_200_out_block_ce0 : STD_LOGIC;
    signal grp_dct_2d_fu_200_out_block_we0 : STD_LOGIC;
    signal grp_dct_2d_fu_200_out_block_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_i_phi_fu_149_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal c_i_phi_fu_160_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_i2_phi_fu_182_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal c_i6_phi_fu_193_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_grp_dct_2d_fu_200_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_i_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_cast_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_cast_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_i_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_234_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_i_cast6_fu_273_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_mid2_fu_266_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_i_fu_276_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_292_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_40_cast_fu_299_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i_cast_fu_303_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_fu_306_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_i1_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_fu_329_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_34_fu_361_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_cast_fu_368_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_i_cast_fu_382_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_385_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_i6_cast2_fu_379_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_i5_mid2_fu_372_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component dct_2d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_block_ce0 : OUT STD_LOGIC;
        in_block_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_block_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_block_ce1 : OUT STD_LOGIC;
        in_block_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        out_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_block_ce0 : OUT STD_LOGIC;
        out_block_we0 : OUT STD_LOGIC;
        out_block_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dct_2d_col_inbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dct_2d_row_outbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    buf_2d_in_U : component dct_2d_col_inbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_2d_in_address0,
        ce0 => buf_2d_in_ce0,
        we0 => buf_2d_in_we0,
        d0 => input_r_q0,
        q0 => buf_2d_in_q0,
        address1 => grp_dct_2d_fu_200_in_block_address1,
        ce1 => buf_2d_in_ce1,
        q1 => buf_2d_in_q1);

    buf_2d_out_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_2d_out_address0,
        ce0 => buf_2d_out_ce0,
        we0 => buf_2d_out_we0,
        d0 => grp_dct_2d_fu_200_out_block_d0,
        q0 => buf_2d_out_q0);

    grp_dct_2d_fu_200 : component dct_2d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dct_2d_fu_200_ap_start,
        ap_done => grp_dct_2d_fu_200_ap_done,
        ap_idle => grp_dct_2d_fu_200_ap_idle,
        ap_ready => grp_dct_2d_fu_200_ap_ready,
        in_block_address0 => grp_dct_2d_fu_200_in_block_address0,
        in_block_ce0 => grp_dct_2d_fu_200_in_block_ce0,
        in_block_q0 => buf_2d_in_q0,
        in_block_address1 => grp_dct_2d_fu_200_in_block_address1,
        in_block_ce1 => grp_dct_2d_fu_200_in_block_ce1,
        in_block_q1 => buf_2d_in_q1,
        out_block_address0 => grp_dct_2d_fu_200_out_block_address0,
        out_block_ce0 => grp_dct_2d_fu_200_out_block_ce0,
        out_block_we0 => grp_dct_2d_fu_200_out_block_we0,
        out_block_d0 => grp_dct_2d_fu_200_out_block_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dct_2d_fu_200_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state7 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dct_2d_fu_200_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dct_2d_fu_200_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dct_2d_fu_200_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_reg_grp_dct_2d_fu_200_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dct_2d_fu_200_ap_ready)) then 
                    ap_reg_grp_dct_2d_fu_200_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_i6_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten2_reg_448) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                c_i6_reg_189 <= c_1_fu_402_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dct_2d_fu_200_ap_done = ap_const_logic_1))) then 
                c_i6_reg_189 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    c_i_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_411 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                c_i_reg_156 <= c_fu_287_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_i_reg_156 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten2_fu_317_p2))) then 
                indvar_flatten2_reg_167 <= indvar_flatten_next2_fu_323_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dct_2d_fu_200_ap_done = ap_const_logic_1))) then 
                indvar_flatten2_reg_167 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_222_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_134 <= indvar_flatten_next_fu_228_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_134 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    r_i2_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten2_reg_448) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                r_i2_reg_178 <= tmp_i4_mid2_v_reg_464;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dct_2d_fu_200_ap_done = ap_const_logic_1))) then 
                r_i2_reg_178 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_i_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_411 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                r_i_reg_145 <= tmp_i_mid2_v_v_reg_427;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_i_reg_145 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_c_i_mid2_reg_420 <= c_i_mid2_reg_420;
                ap_reg_pp0_iter1_exitcond_flatten_reg_411 <= exitcond_flatten_reg_411;
                ap_reg_pp0_iter1_tmp_i_mid2_v_v_reg_427 <= tmp_i_mid2_v_v_reg_427;
                exitcond_flatten_reg_411 <= exitcond_flatten_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_exitcond_flatten2_reg_448 <= exitcond_flatten2_reg_448;
                exitcond_flatten2_reg_448 <= exitcond_flatten2_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten2_fu_317_p2))) then
                c_i6_mid2_reg_457 <= c_i6_mid2_fu_341_p3;
                tmp_1_reg_470 <= tmp_1_fu_357_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_fu_222_p2 = ap_const_lv1_0))) then
                c_i_mid2_reg_420 <= c_i_mid2_fu_246_p3;
                tmp_reg_433 <= tmp_fu_262_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten2_reg_448))) then
                tmp_4_i_reg_480 <= tmp_4_i_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten2_fu_317_p2))) then
                tmp_i4_mid2_v_reg_464 <= tmp_i4_mid2_v_fu_349_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_222_p2 = ap_const_lv1_0))) then
                tmp_i_mid2_v_v_reg_427 <= tmp_i_mid2_v_v_fu_254_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_222_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten2_fu_317_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter2, ap_CS_fsm_state6, grp_dct_2d_fu_200_ap_done, ap_block_pp1_stage0_flag00011011, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_222_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_222_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dct_2d_fu_200_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten2_fu_317_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten2_fu_317_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_222_p2)
    begin
        if ((exitcond_flatten_fu_222_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(exitcond_flatten2_fu_317_p2)
    begin
        if ((exitcond_flatten2_fu_317_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1) and (ap_const_logic_0 = ap_enable_reg_pp1_iter2))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_address0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_state6, grp_dct_2d_fu_200_in_block_address0, ap_block_pp0_stage0_flag00000000, tmp_41_cast_fu_312_p1)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            buf_2d_in_address0 <= tmp_41_cast_fu_312_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_2d_in_address0 <= grp_dct_2d_fu_200_in_block_address0;
        else 
            buf_2d_in_address0 <= "XXXXXX";
        end if; 
    end process;


    buf_2d_in_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2, ap_CS_fsm_state6, grp_dct_2d_fu_200_in_block_ce0)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            buf_2d_in_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_2d_in_ce0 <= grp_dct_2d_fu_200_in_block_ce0;
        else 
            buf_2d_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_ce1_assign_proc : process(ap_CS_fsm_state6, grp_dct_2d_fu_200_in_block_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_2d_in_ce1 <= grp_dct_2d_fu_200_in_block_ce1;
        else 
            buf_2d_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_exitcond_flatten_reg_411, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter1_exitcond_flatten_reg_411 = ap_const_lv1_0))) then 
            buf_2d_in_we0 <= ap_const_logic_1;
        else 
            buf_2d_in_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state6, grp_dct_2d_fu_200_out_block_address0, ap_block_pp1_stage0_flag00000000, tmp_45_cast_fu_391_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            buf_2d_out_address0 <= tmp_45_cast_fu_391_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_2d_out_address0 <= grp_dct_2d_fu_200_out_block_address0;
        else 
            buf_2d_out_address0 <= "XXXXXX";
        end if; 
    end process;


    buf_2d_out_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state6, grp_dct_2d_fu_200_out_block_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            buf_2d_out_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_2d_out_ce0 <= grp_dct_2d_fu_200_out_block_ce0;
        else 
            buf_2d_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_we0_assign_proc : process(ap_CS_fsm_state6, grp_dct_2d_fu_200_out_block_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_2d_out_we0 <= grp_dct_2d_fu_200_out_block_we0;
        else 
            buf_2d_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_402_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(c_i6_mid2_reg_457));
    c_fu_287_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(c_i_mid2_reg_420));
    c_i6_cast2_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_i6_mid2_reg_457),6));
    c_i6_mid2_fu_341_p3 <= 
        ap_const_lv4_0 when (exitcond_i1_fu_335_p2(0) = '1') else 
        c_i6_phi_fu_193_p4;

    c_i6_phi_fu_193_p4_assign_proc : process(c_i6_reg_189, exitcond_flatten2_reg_448, ap_CS_fsm_pp1_stage0, c_1_fu_402_p2, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten2_reg_448) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            c_i6_phi_fu_193_p4 <= c_1_fu_402_p2;
        else 
            c_i6_phi_fu_193_p4 <= c_i6_reg_189;
        end if; 
    end process;

    c_i_cast6_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_i_mid2_reg_420),6));
    c_i_mid2_fu_246_p3 <= 
        ap_const_lv4_0 when (exitcond_i_fu_240_p2(0) = '1') else 
        c_i_phi_fu_160_p4;

    c_i_phi_fu_160_p4_assign_proc : process(c_i_reg_156, exitcond_flatten_reg_411, ap_CS_fsm_pp0_stage0, c_fu_287_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_411 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            c_i_phi_fu_160_p4 <= c_fu_287_p2;
        else 
            c_i_phi_fu_160_p4 <= c_i_reg_156;
        end if; 
    end process;

    exitcond_flatten2_fu_317_p2 <= "1" when (indvar_flatten2_reg_167 = ap_const_lv7_40) else "0";
    exitcond_flatten_fu_222_p2 <= "1" when (indvar_flatten_reg_134 = ap_const_lv7_40) else "0";
    exitcond_i1_fu_335_p2 <= "1" when (c_i6_phi_fu_193_p4 = ap_const_lv4_8) else "0";
    exitcond_i_fu_240_p2 <= "1" when (c_i_phi_fu_160_p4 = ap_const_lv4_8) else "0";
    grp_dct_2d_fu_200_ap_start <= ap_reg_grp_dct_2d_fu_200_ap_start;
    indvar_flatten_next2_fu_323_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_167) + unsigned(ap_const_lv7_1));
    indvar_flatten_next_fu_228_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_134) + unsigned(ap_const_lv7_1));
    input_r_address0 <= tmp_i_fu_282_p1(6 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_address0 <= tmp_5_i_fu_407_p1(6 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= buf_2d_out_q0;

    output_r_we0_assign_proc : process(ap_block_pp1_stage0_flag00011001, ap_reg_pp1_iter1_exitcond_flatten2_reg_448, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_flatten2_reg_448))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_1_fu_329_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(r_i2_phi_fu_182_p4));
    r_fu_234_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(r_i_phi_fu_149_p4));

    r_i2_phi_fu_182_p4_assign_proc : process(r_i2_reg_178, exitcond_flatten2_reg_448, ap_CS_fsm_pp1_stage0, tmp_i4_mid2_v_reg_464, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten2_reg_448) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            r_i2_phi_fu_182_p4 <= tmp_i4_mid2_v_reg_464;
        else 
            r_i2_phi_fu_182_p4 <= r_i2_reg_178;
        end if; 
    end process;


    r_i_phi_fu_149_p4_assign_proc : process(r_i_reg_145, exitcond_flatten_reg_411, ap_CS_fsm_pp0_stage0, tmp_i_mid2_v_v_reg_427, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_411 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            r_i_phi_fu_149_p4 <= tmp_i_mid2_v_v_reg_427;
        else 
            r_i_phi_fu_149_p4 <= r_i_reg_145;
        end if; 
    end process;

    tmp_1_fu_357_p1 <= tmp_i4_mid2_v_fu_349_p3(3 - 1 downto 0);
    tmp_1_i5_mid2_fu_372_p3 <= (tmp_1_reg_470 & ap_const_lv3_0);
    tmp_1_i_cast_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_c_i_mid2_reg_420),8));
    tmp_33_fu_306_p2 <= std_logic_vector(unsigned(tmp_40_cast_fu_299_p1) + unsigned(tmp_1_i_cast_fu_303_p1));
    tmp_34_fu_361_p3 <= (tmp_i4_mid2_v_reg_464 & ap_const_lv3_0);
    tmp_35_fu_385_p2 <= std_logic_vector(unsigned(tmp_43_cast_fu_368_p1) + unsigned(tmp_3_i_cast_fu_382_p1));
    tmp_3_i_cast_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_i6_mid2_reg_457),8));
    tmp_40_cast_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_292_p3),8));
    tmp_41_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_306_p2),64));
    tmp_43_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_361_p3),8));
    tmp_45_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_385_p2),64));
    tmp_4_i_fu_396_p2 <= std_logic_vector(unsigned(c_i6_cast2_fu_379_p1) + unsigned(tmp_1_i5_mid2_fu_372_p3));
    tmp_5_i_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_i_reg_480),64));
    tmp_9_i_fu_276_p2 <= std_logic_vector(unsigned(c_i_cast6_fu_273_p1) + unsigned(tmp_i_mid2_fu_266_p3));
    tmp_fu_262_p1 <= tmp_i_mid2_v_v_fu_254_p3(3 - 1 downto 0);
    tmp_i4_mid2_v_fu_349_p3 <= 
        r_1_fu_329_p2 when (exitcond_i1_fu_335_p2(0) = '1') else 
        r_i2_phi_fu_182_p4;
    tmp_i_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_i_fu_276_p2),64));
    tmp_i_mid2_fu_266_p3 <= (tmp_reg_433 & ap_const_lv3_0);
    tmp_i_mid2_v_v_fu_254_p3 <= 
        r_fu_234_p2 when (exitcond_i_fu_240_p2(0) = '1') else 
        r_i_phi_fu_149_p4;
    tmp_s_fu_292_p3 <= (ap_reg_pp0_iter1_tmp_i_mid2_v_v_reg_427 & ap_const_lv3_0);
end behav;
