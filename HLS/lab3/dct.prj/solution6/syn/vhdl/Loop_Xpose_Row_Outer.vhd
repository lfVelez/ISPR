-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_Xpose_Row_Outer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    row_outbuf_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    row_outbuf_i_ce0 : OUT STD_LOGIC;
    row_outbuf_i_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_0_ce0 : OUT STD_LOGIC;
    col_inbuf_0_we0 : OUT STD_LOGIC;
    col_inbuf_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_1_ce0 : OUT STD_LOGIC;
    col_inbuf_1_we0 : OUT STD_LOGIC;
    col_inbuf_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_2_ce0 : OUT STD_LOGIC;
    col_inbuf_2_we0 : OUT STD_LOGIC;
    col_inbuf_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_3_ce0 : OUT STD_LOGIC;
    col_inbuf_3_we0 : OUT STD_LOGIC;
    col_inbuf_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_4_ce0 : OUT STD_LOGIC;
    col_inbuf_4_we0 : OUT STD_LOGIC;
    col_inbuf_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_5_ce0 : OUT STD_LOGIC;
    col_inbuf_5_we0 : OUT STD_LOGIC;
    col_inbuf_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_6_ce0 : OUT STD_LOGIC;
    col_inbuf_6_we0 : OUT STD_LOGIC;
    col_inbuf_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_7_ce0 : OUT STD_LOGIC;
    col_inbuf_7_we0 : OUT STD_LOGIC;
    col_inbuf_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Loop_Xpose_Row_Outer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_188 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_i_reg_199 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_i_reg_210 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_306 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal indvar_flatten_next_fu_227_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal i_1_i_mid2_fu_245_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_i_mid2_reg_315 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_mid2_v_fu_253_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_mid2_v_reg_321 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter1_tmp_3_mid2_v_reg_321 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_261_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_reg_328 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter1_tmp_3_reg_328 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_290_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal j_0_i_phi_fu_203_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal i_1_i_phi_fu_214_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_cast_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_mid2_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_233_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_268_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_cast_fu_275_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_mid2_cast_fu_265_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_279_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_i_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_306 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_1_i_reg_210 <= i_fu_290_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                i_1_i_reg_210 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_221_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_188 <= indvar_flatten_next_fu_227_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                indvar_flatten_reg_188 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_306 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                j_0_i_reg_199 <= tmp_3_mid2_v_reg_321;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                j_0_i_reg_199 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_tmp_3_mid2_v_reg_321 <= tmp_3_mid2_v_reg_321;
                ap_reg_pp0_iter1_tmp_3_reg_328 <= tmp_3_reg_328;
                exitcond_flatten_reg_306 <= exitcond_flatten_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_fu_221_p2 = ap_const_lv1_0))) then
                i_1_i_mid2_reg_315 <= i_1_i_mid2_fu_245_p3;
                tmp_3_reg_328 <= tmp_3_fu_261_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_221_p2 = ap_const_lv1_0))) then
                tmp_3_mid2_v_reg_321 <= tmp_3_mid2_v_fu_253_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_221_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_221_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_221_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_221_p2)
    begin
        if ((exitcond_flatten_fu_221_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_0_address0 <= tmp_3_mid2_fu_295_p1(3 - 1 downto 0);

    col_inbuf_0_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            col_inbuf_0_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_0_d0 <= row_outbuf_i_q0;

    col_inbuf_0_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_tmp_3_reg_328, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter1_tmp_3_reg_328 = ap_const_lv3_0))) then 
            col_inbuf_0_we0 <= ap_const_logic_1;
        else 
            col_inbuf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_1_address0 <= tmp_3_mid2_fu_295_p1(3 - 1 downto 0);

    col_inbuf_1_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            col_inbuf_1_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_1_d0 <= row_outbuf_i_q0;

    col_inbuf_1_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_tmp_3_reg_328, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter1_tmp_3_reg_328 = ap_const_lv3_1))) then 
            col_inbuf_1_we0 <= ap_const_logic_1;
        else 
            col_inbuf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_2_address0 <= tmp_3_mid2_fu_295_p1(3 - 1 downto 0);

    col_inbuf_2_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            col_inbuf_2_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_2_d0 <= row_outbuf_i_q0;

    col_inbuf_2_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_tmp_3_reg_328, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter1_tmp_3_reg_328 = ap_const_lv3_2))) then 
            col_inbuf_2_we0 <= ap_const_logic_1;
        else 
            col_inbuf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_3_address0 <= tmp_3_mid2_fu_295_p1(3 - 1 downto 0);

    col_inbuf_3_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            col_inbuf_3_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_3_d0 <= row_outbuf_i_q0;

    col_inbuf_3_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_tmp_3_reg_328, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter1_tmp_3_reg_328 = ap_const_lv3_3))) then 
            col_inbuf_3_we0 <= ap_const_logic_1;
        else 
            col_inbuf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_4_address0 <= tmp_3_mid2_fu_295_p1(3 - 1 downto 0);

    col_inbuf_4_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            col_inbuf_4_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_4_d0 <= row_outbuf_i_q0;

    col_inbuf_4_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_tmp_3_reg_328, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter1_tmp_3_reg_328 = ap_const_lv3_4))) then 
            col_inbuf_4_we0 <= ap_const_logic_1;
        else 
            col_inbuf_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_5_address0 <= tmp_3_mid2_fu_295_p1(3 - 1 downto 0);

    col_inbuf_5_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            col_inbuf_5_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_5_d0 <= row_outbuf_i_q0;

    col_inbuf_5_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_tmp_3_reg_328, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter1_tmp_3_reg_328 = ap_const_lv3_5))) then 
            col_inbuf_5_we0 <= ap_const_logic_1;
        else 
            col_inbuf_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_6_address0 <= tmp_3_mid2_fu_295_p1(3 - 1 downto 0);

    col_inbuf_6_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            col_inbuf_6_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_6_d0 <= row_outbuf_i_q0;

    col_inbuf_6_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_tmp_3_reg_328, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter1_tmp_3_reg_328 = ap_const_lv3_6))) then 
            col_inbuf_6_we0 <= ap_const_logic_1;
        else 
            col_inbuf_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_7_address0 <= tmp_3_mid2_fu_295_p1(3 - 1 downto 0);

    col_inbuf_7_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            col_inbuf_7_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_7_d0 <= row_outbuf_i_q0;

    col_inbuf_7_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_tmp_3_reg_328, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter1_tmp_3_reg_328 = ap_const_lv3_7))) then 
            col_inbuf_7_we0 <= ap_const_logic_1;
        else 
            col_inbuf_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_221_p2 <= "1" when (indvar_flatten_reg_188 = ap_const_lv7_40) else "0";
    i_1_i_mid2_fu_245_p3 <= 
        ap_const_lv4_0 when (tmp_s_fu_239_p2(0) = '1') else 
        i_1_i_phi_fu_214_p4;

    i_1_i_phi_fu_214_p4_assign_proc : process(i_1_i_reg_210, exitcond_flatten_reg_306, ap_CS_fsm_pp0_stage0, i_fu_290_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_306 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_1_i_phi_fu_214_p4 <= i_fu_290_p2;
        else 
            i_1_i_phi_fu_214_p4 <= i_1_i_reg_210;
        end if; 
    end process;

    i_fu_290_p2 <= std_logic_vector(unsigned(i_1_i_mid2_reg_315) + unsigned(ap_const_lv4_1));
    indvar_flatten_next_fu_227_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_188) + unsigned(ap_const_lv7_1));

    j_0_i_phi_fu_203_p4_assign_proc : process(j_0_i_reg_199, exitcond_flatten_reg_306, ap_CS_fsm_pp0_stage0, tmp_3_mid2_v_reg_321, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_306 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            j_0_i_phi_fu_203_p4 <= tmp_3_mid2_v_reg_321;
        else 
            j_0_i_phi_fu_203_p4 <= j_0_i_reg_199;
        end if; 
    end process;

    j_fu_233_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(j_0_i_phi_fu_203_p4));
    row_outbuf_i_address0 <= tmp_9_cast_fu_285_p1(6 - 1 downto 0);

    row_outbuf_i_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            row_outbuf_i_ce0 <= ap_const_logic_1;
        else 
            row_outbuf_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_261_p1 <= i_1_i_mid2_fu_245_p3(3 - 1 downto 0);
    tmp_3_mid2_cast_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_mid2_v_reg_321),8));
    tmp_3_mid2_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_tmp_3_mid2_v_reg_321),64));
    tmp_3_mid2_v_fu_253_p3 <= 
        j_fu_233_p2 when (tmp_s_fu_239_p2(0) = '1') else 
        j_0_i_phi_fu_203_p4;
    tmp_8_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_268_p3),8));
    tmp_9_cast_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_279_p2),64));
    tmp_9_fu_279_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_275_p1) + unsigned(tmp_3_mid2_cast_fu_265_p1));
    tmp_fu_268_p3 <= (i_1_i_mid2_reg_315 & ap_const_lv3_0);
    tmp_s_fu_239_p2 <= "1" when (i_1_i_phi_fu_214_p4 = ap_const_lv4_8) else "0";
end behav;
