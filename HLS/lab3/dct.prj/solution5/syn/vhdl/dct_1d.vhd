-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_1d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src1_ce0 : OUT STD_LOGIC;
    src1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src2_ce0 : OUT STD_LOGIC;
    src2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src3_ce0 : OUT STD_LOGIC;
    src3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src4_ce0 : OUT STD_LOGIC;
    src4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src5_ce0 : OUT STD_LOGIC;
    src5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src6_ce0 : OUT STD_LOGIC;
    src6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src7_ce0 : OUT STD_LOGIC;
    src7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    tmp_6 : IN STD_LOGIC_VECTOR (3 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    tmp_61 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of dct_1d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dct_coeff_table_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_0_ce0 : STD_LOGIC;
    signal dct_coeff_table_0_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dct_coeff_table_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_1_ce0 : STD_LOGIC;
    signal dct_coeff_table_1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_2_ce0 : STD_LOGIC;
    signal dct_coeff_table_2_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_3_ce0 : STD_LOGIC;
    signal dct_coeff_table_3_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_4_ce0 : STD_LOGIC;
    signal dct_coeff_table_4_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_5_ce0 : STD_LOGIC;
    signal dct_coeff_table_5_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_6_ce0 : STD_LOGIC;
    signal dct_coeff_table_6_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_7_ce0 : STD_LOGIC;
    signal dct_coeff_table_7_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_reg_290 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_cast_fu_309_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_cast_reg_485 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_addr_reg_490 : STD_LOGIC_VECTOR (2 downto 0);
    signal src1_addr_reg_495 : STD_LOGIC_VECTOR (2 downto 0);
    signal src2_addr_reg_500 : STD_LOGIC_VECTOR (2 downto 0);
    signal src3_addr_reg_505 : STD_LOGIC_VECTOR (2 downto 0);
    signal src4_addr_reg_510 : STD_LOGIC_VECTOR (2 downto 0);
    signal src5_addr_reg_515 : STD_LOGIC_VECTOR (2 downto 0);
    signal src6_addr_reg_520 : STD_LOGIC_VECTOR (2 downto 0);
    signal src7_addr_reg_525 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_331_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_s_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_539 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_348_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_548 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter1_tmp_13_reg_548 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_tmp_13_reg_548 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_tmp_13_reg_548 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter4_tmp_13_reg_548 : STD_LOGIC_VECTOR (7 downto 0);
    signal dct_coeff_table_1_lo_reg_573 : STD_LOGIC_VECTOR (14 downto 0);
    signal src1_load_reg_578 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_3_lo_reg_588 : STD_LOGIC_VECTOR (14 downto 0);
    signal src3_load_reg_593 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_5_lo_reg_603 : STD_LOGIC_VECTOR (14 downto 0);
    signal src5_load_reg_608 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_0_lo_reg_623 : STD_LOGIC_VECTOR (13 downto 0);
    signal src_load_reg_628 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_1_fu_428_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_18_1_reg_633 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_2_lo_reg_638 : STD_LOGIC_VECTOR (14 downto 0);
    signal src2_load_reg_643 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_3_fu_434_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_18_3_reg_648 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_4_lo_reg_653 : STD_LOGIC_VECTOR (14 downto 0);
    signal src4_load_reg_658 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_5_fu_440_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_18_5_reg_663 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_6_lo_reg_668 : STD_LOGIC_VECTOR (14 downto 0);
    signal src6_load_reg_673 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_7_lo_reg_678 : STD_LOGIC_VECTOR (14 downto 0);
    signal src7_load_reg_683 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_401_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp1_fu_401_p2 : signal is "no";
    signal tmp1_reg_688 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_462_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_reg_693 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal grp_fu_469_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp6_reg_698 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_reg_703 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal tmp_6_cast_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal tmp_21_cast_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_301_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_fu_344_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_446_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_454_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp4_fu_405_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp4_fu_405_p2 : signal is "no";
    signal tmp_5_fu_409_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_446_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_476_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_476_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_446_p00 : STD_LOGIC_VECTOR (28 downto 0);

    component dct_mul_mul_15s_1jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_14kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_15lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_15mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_1d_dct_coeff_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component dct_1d_dct_coeff_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_dct_coeff_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_dct_coeff_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_dct_coeff_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_dct_coeff_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_dct_coeff_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_dct_coeff_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    dct_coeff_table_0_U : component dct_1d_dct_coeff_bkb
    generic map (
        DataWidth => 14,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_0_address0,
        ce0 => dct_coeff_table_0_ce0,
        q0 => dct_coeff_table_0_q0);

    dct_coeff_table_1_U : component dct_1d_dct_coeff_cud
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_1_address0,
        ce0 => dct_coeff_table_1_ce0,
        q0 => dct_coeff_table_1_q0);

    dct_coeff_table_2_U : component dct_1d_dct_coeff_dEe
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_2_address0,
        ce0 => dct_coeff_table_2_ce0,
        q0 => dct_coeff_table_2_q0);

    dct_coeff_table_3_U : component dct_1d_dct_coeff_eOg
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_3_address0,
        ce0 => dct_coeff_table_3_ce0,
        q0 => dct_coeff_table_3_q0);

    dct_coeff_table_4_U : component dct_1d_dct_coeff_fYi
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_4_address0,
        ce0 => dct_coeff_table_4_ce0,
        q0 => dct_coeff_table_4_q0);

    dct_coeff_table_5_U : component dct_1d_dct_coeff_g8j
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_5_address0,
        ce0 => dct_coeff_table_5_ce0,
        q0 => dct_coeff_table_5_q0);

    dct_coeff_table_6_U : component dct_1d_dct_coeff_hbi
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_6_address0,
        ce0 => dct_coeff_table_6_ce0,
        q0 => dct_coeff_table_6_q0);

    dct_coeff_table_7_U : component dct_1d_dct_coeff_ibs
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_7_address0,
        ce0 => dct_coeff_table_7_ce0,
        q0 => dct_coeff_table_7_q0);

    dct_mul_mul_15s_1jbC_U10 : component dct_mul_mul_15s_1jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_1_lo_reg_573,
        din1 => src1_load_reg_578,
        dout => tmp_18_1_fu_428_p2);

    dct_mul_mul_15s_1jbC_U11 : component dct_mul_mul_15s_1jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_3_lo_reg_588,
        din1 => src3_load_reg_593,
        dout => tmp_18_3_fu_434_p2);

    dct_mul_mul_15s_1jbC_U12 : component dct_mul_mul_15s_1jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_5_lo_reg_603,
        din1 => src5_load_reg_608,
        dout => tmp_18_5_fu_440_p2);

    dct_mac_muladd_14kbM_U13 : component dct_mac_muladd_14kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_446_p0,
        din1 => src_load_reg_628,
        din2 => tmp_18_1_reg_633,
        dout => grp_fu_446_p3);

    dct_mac_muladd_15lbW_U14 : component dct_mac_muladd_15lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_2_lo_reg_638,
        din1 => src2_load_reg_643,
        din2 => tmp_18_3_reg_648,
        dout => grp_fu_454_p3);

    dct_mac_muladd_15lbW_U15 : component dct_mac_muladd_15lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_4_lo_reg_653,
        din1 => src4_load_reg_658,
        din2 => tmp_18_5_reg_663,
        dout => grp_fu_462_p3);

    dct_mac_muladd_15lbW_U16 : component dct_mac_muladd_15lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_6_lo_reg_668,
        din1 => src6_load_reg_673,
        din2 => grp_fu_476_p3,
        dout => grp_fu_469_p3);

    dct_mac_muladd_15mb6_U17 : component dct_mac_muladd_15mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_7_lo_reg_678,
        din1 => src7_load_reg_683,
        din2 => grp_fu_476_p2,
        dout => grp_fu_476_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_fu_325_p2 = ap_const_lv1_0))) then 
                k_reg_290 <= k_1_fu_331_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_reg_290 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_tmp_13_reg_548 <= tmp_13_reg_548;
                ap_reg_pp0_iter1_tmp_reg_530 <= tmp_reg_530;
                tmp_reg_530 <= tmp_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter2_tmp_13_reg_548 <= ap_reg_pp0_iter1_tmp_13_reg_548;
                ap_reg_pp0_iter2_tmp_reg_530 <= ap_reg_pp0_iter1_tmp_reg_530;
                ap_reg_pp0_iter3_tmp_13_reg_548 <= ap_reg_pp0_iter2_tmp_13_reg_548;
                ap_reg_pp0_iter3_tmp_reg_530 <= ap_reg_pp0_iter2_tmp_reg_530;
                ap_reg_pp0_iter4_tmp_13_reg_548 <= ap_reg_pp0_iter3_tmp_13_reg_548;
                ap_reg_pp0_iter4_tmp_reg_530 <= ap_reg_pp0_iter3_tmp_reg_530;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter1_tmp_reg_530 = ap_const_lv1_0))) then
                dct_coeff_table_0_lo_reg_623 <= dct_coeff_table_0_q0;
                dct_coeff_table_2_lo_reg_638 <= dct_coeff_table_2_q0;
                dct_coeff_table_4_lo_reg_653 <= dct_coeff_table_4_q0;
                dct_coeff_table_6_lo_reg_668 <= dct_coeff_table_6_q0;
                dct_coeff_table_7_lo_reg_678 <= dct_coeff_table_7_q0;
                src2_load_reg_643 <= src2_q0;
                src4_load_reg_658 <= src4_q0;
                src6_load_reg_673 <= src6_q0;
                src7_load_reg_683 <= src7_q0;
                src_load_reg_628 <= src_q0;
                tmp_18_1_reg_633 <= tmp_18_1_fu_428_p2;
                tmp_18_3_reg_648 <= tmp_18_3_fu_434_p2;
                tmp_18_5_reg_663 <= tmp_18_5_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (tmp_reg_530 = ap_const_lv1_0))) then
                dct_coeff_table_1_lo_reg_573 <= dct_coeff_table_1_q0;
                dct_coeff_table_3_lo_reg_588 <= dct_coeff_table_3_q0;
                dct_coeff_table_5_lo_reg_603 <= dct_coeff_table_5_q0;
                src1_load_reg_578 <= src1_q0;
                src3_load_reg_593 <= src3_q0;
                src5_load_reg_608 <= src5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                src1_addr_reg_495 <= tmp_6_cast_fu_313_p1(3 - 1 downto 0);
                src2_addr_reg_500 <= tmp_6_cast_fu_313_p1(3 - 1 downto 0);
                src3_addr_reg_505 <= tmp_6_cast_fu_313_p1(3 - 1 downto 0);
                src4_addr_reg_510 <= tmp_6_cast_fu_313_p1(3 - 1 downto 0);
                src5_addr_reg_515 <= tmp_6_cast_fu_313_p1(3 - 1 downto 0);
                src6_addr_reg_520 <= tmp_6_cast_fu_313_p1(3 - 1 downto 0);
                src7_addr_reg_525 <= tmp_6_cast_fu_313_p1(3 - 1 downto 0);
                src_addr_reg_490 <= tmp_6_cast_fu_313_p1(3 - 1 downto 0);
                    tmp_20_cast_reg_485(6 downto 3) <= tmp_20_cast_fu_309_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter2_tmp_reg_530 = ap_const_lv1_0))) then
                tmp1_reg_688 <= tmp1_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter2_tmp_reg_530 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then
                tmp5_reg_693 <= grp_fu_462_p3;
                tmp6_reg_698 <= grp_fu_469_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (tmp_fu_325_p2 = ap_const_lv1_0))) then
                tmp_13_reg_548 <= tmp_13_fu_348_p2;
                    tmp_s_reg_539(3 downto 0) <= tmp_s_fu_337_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter3_tmp_reg_530 = ap_const_lv1_0))) then
                tmp_7_reg_703 <= tmp_5_fu_409_p2(28 downto 13);
            end if;
        end if;
    end process;
    tmp_20_cast_reg_485(2 downto 0) <= "000";
    tmp_20_cast_reg_485(7) <= '0';
    tmp_s_reg_539(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_325_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (tmp_fu_325_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (tmp_fu_325_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state8 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_fu_325_p2)
    begin
        if ((tmp_fu_325_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_0_address0 <= tmp_s_reg_539(3 - 1 downto 0);

    dct_coeff_table_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            dct_coeff_table_0_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_1_address0 <= tmp_s_fu_337_p1(3 - 1 downto 0);

    dct_coeff_table_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            dct_coeff_table_1_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_2_address0 <= tmp_s_reg_539(3 - 1 downto 0);

    dct_coeff_table_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            dct_coeff_table_2_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_3_address0 <= tmp_s_fu_337_p1(3 - 1 downto 0);

    dct_coeff_table_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            dct_coeff_table_3_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_4_address0 <= tmp_s_reg_539(3 - 1 downto 0);

    dct_coeff_table_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            dct_coeff_table_4_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_5_address0 <= tmp_s_fu_337_p1(3 - 1 downto 0);

    dct_coeff_table_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            dct_coeff_table_5_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_6_address0 <= tmp_s_reg_539(3 - 1 downto 0);

    dct_coeff_table_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            dct_coeff_table_6_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_7_address0 <= tmp_s_reg_539(3 - 1 downto 0);

    dct_coeff_table_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            dct_coeff_table_7_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_address0 <= tmp_21_cast_fu_424_p1(6 - 1 downto 0);

    dst_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_d0 <= tmp_7_reg_703;

    dst_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter4_tmp_reg_530, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_reg_pp0_iter4_tmp_reg_530 = ap_const_lv1_0))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_446_p0 <= grp_fu_446_p00(14 - 1 downto 0);
    grp_fu_446_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dct_coeff_table_0_lo_reg_623),29));
    grp_fu_476_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    k_1_fu_331_p2 <= std_logic_vector(unsigned(k_reg_290) + unsigned(ap_const_lv4_1));
    src1_address0 <= src1_addr_reg_495;

    src1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            src1_ce0 <= ap_const_logic_1;
        else 
            src1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src2_address0 <= src2_addr_reg_500;

    src2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            src2_ce0 <= ap_const_logic_1;
        else 
            src2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src3_address0 <= src3_addr_reg_505;

    src3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            src3_ce0 <= ap_const_logic_1;
        else 
            src3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src4_address0 <= src4_addr_reg_510;

    src4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            src4_ce0 <= ap_const_logic_1;
        else 
            src4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src5_address0 <= src5_addr_reg_515;

    src5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            src5_ce0 <= ap_const_logic_1;
        else 
            src5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src6_address0 <= src6_addr_reg_520;

    src6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            src6_ce0 <= ap_const_logic_1;
        else 
            src6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src7_address0 <= src7_addr_reg_525;

    src7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            src7_ce0 <= ap_const_logic_1;
        else 
            src7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    src_address0 <= src_addr_reg_490;

    src_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_401_p2 <= std_logic_vector(signed(grp_fu_446_p3) + signed(grp_fu_454_p3));
    tmp4_fu_405_p2 <= std_logic_vector(signed(tmp5_reg_693) + signed(tmp6_reg_698));
    tmp_12_fu_301_p3 <= (tmp_61 & ap_const_lv3_0);
    tmp_13_fu_348_p2 <= std_logic_vector(unsigned(tmp_20_cast_reg_485) + unsigned(tmp_cast_fu_344_p1));
    tmp_20_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_301_p3),8));
    tmp_21_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter4_tmp_13_reg_548),64));
    tmp_5_fu_409_p2 <= std_logic_vector(unsigned(tmp1_reg_688) + unsigned(tmp4_fu_405_p2));
    tmp_6_cast_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6),64));
    tmp_cast_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_290),8));
    tmp_fu_325_p2 <= "1" when (k_reg_290 = ap_const_lv4_8) else "0";
    tmp_s_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_290),64));
end behav;
