// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rgb2yuv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width_read,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width_read;
input  [15:0] in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] x_2_fu_213_p2;
reg   [15:0] x_2_reg_549;
wire    ap_CS_fsm_state2;
wire   [22:0] tmp_22_fu_243_p2;
reg   [22:0] tmp_22_reg_554;
wire   [0:0] exitcond1_fu_208_p2;
wire   [15:0] y_2_fu_264_p2;
reg   [15:0] y_2_reg_562;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_24_cast_fu_279_p1;
reg   [63:0] tmp_24_cast_reg_567;
wire   [0:0] exitcond_fu_259_p2;
wire    ap_CS_fsm_state5;
reg   [7:0] R_reg_590;
wire    ap_CS_fsm_state6;
reg   [7:0] G_reg_598;
wire    ap_CS_fsm_state7;
wire   [15:0] tmp_35_cast1_fu_288_p1;
reg   [15:0] tmp_35_cast1_reg_610;
reg   [7:0] B_reg_616;
wire    ap_CS_fsm_state8;
wire   [8:0] tmp4_fu_306_p2;
reg   [8:0] tmp4_reg_624;
reg   [7:0] tmp_27_reg_629;
wire    ap_CS_fsm_state9;
wire   [15:0] grp_fu_291_p2;
reg   [15:0] tmp_29_reg_634;
wire   [15:0] tmp_30_fu_412_p2;
reg   [15:0] tmp_30_reg_639;
wire   [15:0] grp_fu_297_p2;
reg   [15:0] tmp_33_reg_644;
wire   [13:0] tmp8_fu_445_p2;
reg   [13:0] tmp8_reg_649;
wire    ap_CS_fsm_state10;
reg   [7:0] tmp_32_reg_664;
reg   [7:0] tmp_37_reg_669;
wire    ap_CS_fsm_state11;
reg   [15:0] x_reg_186;
reg   [15:0] y_reg_197;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state4;
wire   [12:0] tmp_fu_219_p1;
wire   [14:0] tmp_21_fu_231_p1;
wire   [22:0] p_shl_cast_fu_223_p3;
wire   [22:0] p_shl7_cast_fu_235_p3;
wire   [22:0] tmp_cast_fu_270_p1;
wire   [22:0] tmp_24_fu_274_p2;
wire   [7:0] grp_fu_291_p0;
wire  signed [7:0] grp_fu_291_p1;
wire   [7:0] grp_fu_297_p0;
wire   [7:0] grp_fu_297_p1;
wire   [8:0] tmp_35_cast2_fu_303_p1;
wire   [13:0] p_shl5_fu_312_p3;
wire   [8:0] p_shl6_fu_323_p3;
wire   [14:0] p_shl4_fu_334_p3;
wire   [14:0] p_shl6_cast_fu_330_p1;
wire   [14:0] p_shl5_cast_fu_319_p1;
wire   [14:0] tmp2_fu_348_p2;
wire   [15:0] tmp2_cast_fu_354_p1;
wire   [15:0] p_shl4_cast_fu_341_p1;
wire   [12:0] grp_fu_510_p3;
wire   [15:0] tmp3_cast_fu_367_p1;
wire   [15:0] tmp1_fu_358_p2;
wire   [15:0] tmp_26_fu_370_p2;
wire   [14:0] p_shl2_fu_386_p3;
wire   [11:0] p_shl3_fu_397_p3;
wire   [15:0] p_shl2_cast_fu_393_p1;
wire   [15:0] p_shl3_cast_fu_408_p1;
wire   [12:0] p_shl3_cast9_fu_404_p1;
wire   [12:0] p_neg_fu_418_p2;
wire   [8:0] p_shl1_fu_428_p3;
wire  signed [13:0] p_neg_cast_fu_424_p1;
wire   [13:0] p_shl1_cast_fu_435_p1;
wire   [13:0] tmp_35_fu_439_p2;
wire   [15:0] tmp6_fu_460_p2;
wire  signed [15:0] grp_fu_519_p3;
(* use_dsp48 = "no" *) wire   [15:0] tmp_31_fu_465_p2;
wire  signed [15:0] tmp8_cast_fu_480_p1;
wire  signed [15:0] grp_fu_527_p3;
(* use_dsp48 = "no" *) wire   [15:0] tmp_36_fu_483_p2;
wire   [7:0] grp_fu_510_p0;
wire   [5:0] grp_fu_510_p1;
wire   [8:0] grp_fu_510_p2;
wire   [7:0] grp_fu_519_p0;
wire  signed [6:0] grp_fu_519_p1;
wire   [7:0] grp_fu_527_p0;
wire  signed [7:0] grp_fu_527_p1;
reg   [11:0] ap_NS_fsm;
wire   [15:0] grp_fu_291_p00;
wire   [15:0] grp_fu_297_p00;
wire   [12:0] grp_fu_510_p00;
wire   [12:0] grp_fu_510_p20;
wire   [14:0] grp_fu_519_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

yuv_filter_mul_8nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
yuv_filter_mul_8nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_291_p0),
    .din1(grp_fu_291_p1),
    .ce(1'b1),
    .dout(grp_fu_291_p2)
);

yuv_filter_mul_8ncud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
yuv_filter_mul_8ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_297_p0),
    .din1(grp_fu_297_p1),
    .ce(1'b1),
    .dout(grp_fu_297_p2)
);

yuv_filter_mac_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 13 ))
yuv_filter_mac_mudEe_U3(
    .din0(grp_fu_510_p0),
    .din1(grp_fu_510_p1),
    .din2(grp_fu_510_p2),
    .dout(grp_fu_510_p3)
);

yuv_filter_mac_mueOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
yuv_filter_mac_mueOg_U4(
    .din0(grp_fu_519_p0),
    .din1(grp_fu_519_p1),
    .din2(tmp_29_reg_634),
    .dout(grp_fu_519_p3)
);

yuv_filter_mac_mufYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
yuv_filter_mac_mufYi_U5(
    .din0(grp_fu_527_p0),
    .din1(grp_fu_527_p1),
    .din2(tmp_33_reg_644),
    .dout(grp_fu_527_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_259_p2 == 1'd1))) begin
        x_reg_186 <= x_2_reg_549;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_reg_186 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        y_reg_197 <= y_2_reg_562;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_208_p2 == 1'd0))) begin
        y_reg_197 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        B_reg_616 <= in_channels_ch3_q0;
        tmp4_reg_624 <= tmp4_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        G_reg_598 <= in_channels_ch2_q0;
        R_reg_590 <= in_channels_ch1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp8_reg_649[13 : 1] <= tmp8_fu_445_p2[13 : 1];
        tmp_27_reg_629 <= {{tmp_26_fu_370_p2[15:8]}};
        tmp_29_reg_634 <= grp_fu_291_p2;
        tmp_30_reg_639[15 : 4] <= tmp_30_fu_412_p2[15 : 4];
        tmp_33_reg_644 <= grp_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_208_p2 == 1'd0))) begin
        tmp_22_reg_554[22 : 8] <= tmp_22_fu_243_p2[22 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_fu_259_p2))) begin
        tmp_24_cast_reg_567[22 : 0] <= tmp_24_cast_fu_279_p1[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_32_reg_664 <= {{tmp_31_fu_465_p2[15:8]}};
        tmp_37_reg_669 <= {{tmp_36_fu_483_p2[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_35_cast1_reg_610[7 : 0] <= tmp_35_cast1_fu_288_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_2_reg_549 <= x_2_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_2_reg_562 <= y_2_fu_264_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_208_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_208_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_208_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_259_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return_0 = in_width_read;

assign ap_return_1 = in_height_read;

assign exitcond1_fu_208_p2 = ((x_reg_186 == in_width_read) ? 1'b1 : 1'b0);

assign exitcond_fu_259_p2 = ((y_reg_197 == in_height_read) ? 1'b1 : 1'b0);

assign grp_fu_291_p0 = grp_fu_291_p00;

assign grp_fu_291_p00 = G_reg_598;

assign grp_fu_291_p1 = 16'd65462;

assign grp_fu_297_p0 = grp_fu_297_p00;

assign grp_fu_297_p00 = R_reg_590;

assign grp_fu_297_p1 = 16'd122;

assign grp_fu_510_p0 = grp_fu_510_p00;

assign grp_fu_510_p00 = B_reg_616;

assign grp_fu_510_p1 = 13'd25;

assign grp_fu_510_p2 = grp_fu_510_p20;

assign grp_fu_510_p20 = tmp4_reg_624;

assign grp_fu_519_p0 = grp_fu_519_p00;

assign grp_fu_519_p00 = R_reg_590;

assign grp_fu_519_p1 = 15'd32730;

assign grp_fu_527_p0 = tmp_35_cast1_reg_610;

assign grp_fu_527_p1 = 16'd65442;

assign in_channels_ch1_address0 = tmp_24_cast_fu_279_p1;

assign in_channels_ch2_address0 = tmp_24_cast_fu_279_p1;

assign in_channels_ch3_address0 = tmp_24_cast_reg_567;

assign out_channels_ch1_address0 = tmp_24_cast_reg_567;

assign out_channels_ch1_d0 = (tmp_27_reg_629 + 8'd16);

assign out_channels_ch2_address0 = tmp_24_cast_reg_567;

assign out_channels_ch2_d0 = (tmp_32_reg_664 ^ 8'd128);

assign out_channels_ch3_address0 = tmp_24_cast_reg_567;

assign out_channels_ch3_d0 = (tmp_37_reg_669 ^ 8'd128);

assign p_neg_cast_fu_424_p1 = $signed(p_neg_fu_418_p2);

assign p_neg_fu_418_p2 = (13'd0 - p_shl3_cast9_fu_404_p1);

assign p_shl1_cast_fu_435_p1 = p_shl1_fu_428_p3;

assign p_shl1_fu_428_p3 = {{B_reg_616}, {1'd0}};

assign p_shl2_cast_fu_393_p1 = p_shl2_fu_386_p3;

assign p_shl2_fu_386_p3 = {{B_reg_616}, {7'd0}};

assign p_shl3_cast9_fu_404_p1 = p_shl3_fu_397_p3;

assign p_shl3_cast_fu_408_p1 = p_shl3_fu_397_p3;

assign p_shl3_fu_397_p3 = {{B_reg_616}, {4'd0}};

assign p_shl4_cast_fu_341_p1 = p_shl4_fu_334_p3;

assign p_shl4_fu_334_p3 = {{G_reg_598}, {7'd0}};

assign p_shl5_cast_fu_319_p1 = p_shl5_fu_312_p3;

assign p_shl5_fu_312_p3 = {{R_reg_590}, {6'd0}};

assign p_shl6_cast_fu_330_p1 = p_shl6_fu_323_p3;

assign p_shl6_fu_323_p3 = {{R_reg_590}, {1'd0}};

assign p_shl7_cast_fu_235_p3 = {{tmp_21_fu_231_p1}, {8'd0}};

assign p_shl_cast_fu_223_p3 = {{tmp_fu_219_p1}, {10'd0}};

assign tmp1_fu_358_p2 = (tmp2_cast_fu_354_p1 + p_shl4_cast_fu_341_p1);

assign tmp2_cast_fu_354_p1 = tmp2_fu_348_p2;

assign tmp2_fu_348_p2 = (p_shl6_cast_fu_330_p1 + p_shl5_cast_fu_319_p1);

assign tmp3_cast_fu_367_p1 = grp_fu_510_p3;

assign tmp4_fu_306_p2 = (tmp_35_cast2_fu_303_p1 + 9'd128);

assign tmp6_fu_460_p2 = (tmp_30_reg_639 + 16'd128);

assign tmp8_cast_fu_480_p1 = $signed(tmp8_reg_649);

assign tmp8_fu_445_p2 = (tmp_35_fu_439_p2 + 14'd128);

assign tmp_21_fu_231_p1 = x_reg_186[14:0];

assign tmp_22_fu_243_p2 = (p_shl_cast_fu_223_p3 + p_shl7_cast_fu_235_p3);

assign tmp_24_cast_fu_279_p1 = tmp_24_fu_274_p2;

assign tmp_24_fu_274_p2 = (tmp_cast_fu_270_p1 + tmp_22_reg_554);

assign tmp_26_fu_370_p2 = (tmp3_cast_fu_367_p1 + tmp1_fu_358_p2);

assign tmp_30_fu_412_p2 = (p_shl2_cast_fu_393_p1 - p_shl3_cast_fu_408_p1);

assign tmp_31_fu_465_p2 = ($signed(tmp6_fu_460_p2) + $signed(grp_fu_519_p3));

assign tmp_35_cast1_fu_288_p1 = G_reg_598;

assign tmp_35_cast2_fu_303_p1 = G_reg_598;

assign tmp_35_fu_439_p2 = ($signed(p_neg_cast_fu_424_p1) - $signed(p_shl1_cast_fu_435_p1));

assign tmp_36_fu_483_p2 = ($signed(tmp8_cast_fu_480_p1) + $signed(grp_fu_527_p3));

assign tmp_cast_fu_270_p1 = y_reg_197;

assign tmp_fu_219_p1 = x_reg_186[12:0];

assign x_2_fu_213_p2 = (x_reg_186 + 16'd1);

assign y_2_fu_264_p2 = (y_reg_197 + 16'd1);

always @ (posedge ap_clk) begin
    tmp_22_reg_554[7:0] <= 8'b00000000;
    tmp_24_cast_reg_567[63:23] <= 41'b00000000000000000000000000000000000000000;
    tmp_35_cast1_reg_610[15:8] <= 8'b00000000;
    tmp_30_reg_639[3:0] <= 4'b0000;
    tmp8_reg_649[0] <= 1'b0;
end

endmodule //rgb2yuv
