// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="yuv_filter,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.400875,HLS_SYN_LAT=23538365,HLS_SYN_TPT=none,HLS_SYN_MEM=12288,HLS_SYN_DSP=6,HLS_SYN_FF=1220,HLS_SYN_LUT=1616}" *)

module yuv_filter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width,
        in_height,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        out_width,
        out_width_ap_vld,
        out_height,
        out_height_ap_vld,
        Y_scale,
        U_scale,
        V_scale
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width;
input  [15:0] in_height;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] out_width;
output   out_width_ap_vld;
output  [15:0] out_height;
output   out_height_ap_vld;
input  [7:0] Y_scale;
input  [7:0] U_scale;
input  [7:0] V_scale;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_width_ap_vld;
reg out_height_ap_vld;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] p_yuv_width_reg_441;
wire    ap_CS_fsm_state2;
wire    grp_rgb2yuv_fu_244_ap_done;
reg   [15:0] p_yuv_height_reg_447;
wire   [14:0] tmp_i_cast_fu_287_p1;
reg   [14:0] tmp_i_cast_reg_453;
wire   [14:0] tmp_1_i_cast_fu_291_p1;
reg   [14:0] tmp_1_i_cast_reg_458;
wire   [14:0] tmp_2_i_cast_fu_295_p1;
reg   [14:0] tmp_2_i_cast_reg_463;
wire   [15:0] x_fu_304_p2;
reg   [15:0] x_reg_471;
wire    ap_CS_fsm_state3;
wire   [22:0] tmp_2_fu_334_p2;
reg   [22:0] tmp_2_reg_476;
wire   [0:0] exitcond1_i_fu_299_p2;
wire   [15:0] y_fu_345_p2;
reg   [15:0] y_reg_484;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_3_cast_fu_360_p1;
reg   [63:0] tmp_3_cast_reg_489;
wire   [0:0] exitcond_i_fu_340_p2;
wire   [7:0] p_yuv_channels_ch1_q0;
reg   [7:0] Y_reg_511;
wire    ap_CS_fsm_state7;
wire   [7:0] p_yuv_channels_ch2_q0;
reg   [7:0] U_reg_516;
wire   [7:0] p_yuv_channels_ch3_q0;
reg   [7:0] V_reg_521;
wire    ap_CS_fsm_state8;
reg   [7:0] tmp_10_i_reg_541;
wire    ap_CS_fsm_state10;
reg   [7:0] tmp_11_i_reg_546;
reg   [7:0] tmp_12_i_reg_551;
wire    ap_CS_fsm_state11;
reg   [21:0] p_yuv_channels_ch1_address0;
reg    p_yuv_channels_ch1_ce0;
reg    p_yuv_channels_ch1_we0;
reg   [21:0] p_yuv_channels_ch2_address0;
reg    p_yuv_channels_ch2_ce0;
reg    p_yuv_channels_ch2_we0;
reg   [21:0] p_yuv_channels_ch3_address0;
reg    p_yuv_channels_ch3_ce0;
reg    p_yuv_channels_ch3_we0;
reg   [21:0] p_scale_channels_ch1_address0;
reg    p_scale_channels_ch1_ce0;
reg    p_scale_channels_ch1_we0;
wire   [7:0] p_scale_channels_ch1_q0;
reg   [21:0] p_scale_channels_ch2_address0;
reg    p_scale_channels_ch2_ce0;
reg    p_scale_channels_ch2_we0;
wire   [7:0] p_scale_channels_ch2_q0;
reg   [21:0] p_scale_channels_ch3_address0;
reg    p_scale_channels_ch3_ce0;
reg    p_scale_channels_ch3_we0;
wire   [7:0] p_scale_channels_ch3_q0;
wire    grp_rgb2yuv_fu_244_ap_start;
wire    grp_rgb2yuv_fu_244_ap_idle;
wire    grp_rgb2yuv_fu_244_ap_ready;
wire   [21:0] grp_rgb2yuv_fu_244_in_channels_ch1_address0;
wire    grp_rgb2yuv_fu_244_in_channels_ch1_ce0;
wire   [21:0] grp_rgb2yuv_fu_244_in_channels_ch2_address0;
wire    grp_rgb2yuv_fu_244_in_channels_ch2_ce0;
wire   [21:0] grp_rgb2yuv_fu_244_in_channels_ch3_address0;
wire    grp_rgb2yuv_fu_244_in_channels_ch3_ce0;
wire   [21:0] grp_rgb2yuv_fu_244_out_channels_ch1_address0;
wire    grp_rgb2yuv_fu_244_out_channels_ch1_ce0;
wire    grp_rgb2yuv_fu_244_out_channels_ch1_we0;
wire   [7:0] grp_rgb2yuv_fu_244_out_channels_ch1_d0;
wire   [21:0] grp_rgb2yuv_fu_244_out_channels_ch2_address0;
wire    grp_rgb2yuv_fu_244_out_channels_ch2_ce0;
wire    grp_rgb2yuv_fu_244_out_channels_ch2_we0;
wire   [7:0] grp_rgb2yuv_fu_244_out_channels_ch2_d0;
wire   [21:0] grp_rgb2yuv_fu_244_out_channels_ch3_address0;
wire    grp_rgb2yuv_fu_244_out_channels_ch3_ce0;
wire    grp_rgb2yuv_fu_244_out_channels_ch3_we0;
wire   [7:0] grp_rgb2yuv_fu_244_out_channels_ch3_d0;
wire   [15:0] grp_rgb2yuv_fu_244_ap_return_0;
wire   [15:0] grp_rgb2yuv_fu_244_ap_return_1;
wire    grp_yuv2rgb_fu_264_ap_start;
wire    grp_yuv2rgb_fu_264_ap_done;
wire    grp_yuv2rgb_fu_264_ap_idle;
wire    grp_yuv2rgb_fu_264_ap_ready;
wire   [21:0] grp_yuv2rgb_fu_264_in_channels_ch1_address0;
wire    grp_yuv2rgb_fu_264_in_channels_ch1_ce0;
wire   [21:0] grp_yuv2rgb_fu_264_in_channels_ch2_address0;
wire    grp_yuv2rgb_fu_264_in_channels_ch2_ce0;
wire   [21:0] grp_yuv2rgb_fu_264_in_channels_ch3_address0;
wire    grp_yuv2rgb_fu_264_in_channels_ch3_ce0;
wire   [21:0] grp_yuv2rgb_fu_264_out_channels_ch1_address0;
wire    grp_yuv2rgb_fu_264_out_channels_ch1_ce0;
wire    grp_yuv2rgb_fu_264_out_channels_ch1_we0;
wire   [7:0] grp_yuv2rgb_fu_264_out_channels_ch1_d0;
wire   [21:0] grp_yuv2rgb_fu_264_out_channels_ch2_address0;
wire    grp_yuv2rgb_fu_264_out_channels_ch2_ce0;
wire    grp_yuv2rgb_fu_264_out_channels_ch2_we0;
wire   [7:0] grp_yuv2rgb_fu_264_out_channels_ch2_d0;
wire   [21:0] grp_yuv2rgb_fu_264_out_channels_ch3_address0;
wire    grp_yuv2rgb_fu_264_out_channels_ch3_ce0;
wire    grp_yuv2rgb_fu_264_out_channels_ch3_we0;
wire   [7:0] grp_yuv2rgb_fu_264_out_channels_ch3_d0;
wire   [15:0] grp_yuv2rgb_fu_264_ap_return_0;
wire   [15:0] grp_yuv2rgb_fu_264_ap_return_1;
reg   [15:0] x_i_reg_222;
reg   [15:0] y_i_reg_233;
wire    ap_CS_fsm_state12;
reg    ap_reg_grp_rgb2yuv_fu_244_ap_start;
reg    ap_reg_grp_yuv2rgb_fu_264_ap_start;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [12:0] tmp_fu_310_p1;
wire   [14:0] tmp_1_fu_322_p1;
wire   [22:0] p_shl_cast_fu_314_p3;
wire   [22:0] p_shl3_cast_fu_326_p3;
wire   [22:0] tmp_5_i_cast_fu_351_p1;
wire   [22:0] tmp_3_fu_355_p2;
wire   [7:0] grp_fu_370_p0;
wire   [7:0] grp_fu_370_p1;
wire   [7:0] grp_fu_378_p0;
wire   [7:0] grp_fu_378_p1;
wire   [7:0] grp_fu_386_p0;
wire   [7:0] grp_fu_386_p1;
wire   [14:0] grp_fu_370_p2;
wire   [14:0] grp_fu_378_p2;
wire   [14:0] grp_fu_386_p2;
reg   [12:0] ap_NS_fsm;
wire   [14:0] grp_fu_370_p10;
wire   [14:0] grp_fu_378_p10;
wire   [14:0] grp_fu_386_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_reg_grp_rgb2yuv_fu_244_ap_start = 1'b0;
#0 ap_reg_grp_yuv2rgb_fu_264_ap_start = 1'b0;
end

yuv_filter_p_yuv_kbM #(
    .DataWidth( 8 ),
    .AddressRange( 2457600 ),
    .AddressWidth( 22 ))
p_yuv_channels_ch1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_yuv_channels_ch1_address0),
    .ce0(p_yuv_channels_ch1_ce0),
    .we0(p_yuv_channels_ch1_we0),
    .d0(grp_rgb2yuv_fu_244_out_channels_ch1_d0),
    .q0(p_yuv_channels_ch1_q0)
);

yuv_filter_p_yuv_kbM #(
    .DataWidth( 8 ),
    .AddressRange( 2457600 ),
    .AddressWidth( 22 ))
p_yuv_channels_ch2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_yuv_channels_ch2_address0),
    .ce0(p_yuv_channels_ch2_ce0),
    .we0(p_yuv_channels_ch2_we0),
    .d0(grp_rgb2yuv_fu_244_out_channels_ch2_d0),
    .q0(p_yuv_channels_ch2_q0)
);

yuv_filter_p_yuv_kbM #(
    .DataWidth( 8 ),
    .AddressRange( 2457600 ),
    .AddressWidth( 22 ))
p_yuv_channels_ch3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_yuv_channels_ch3_address0),
    .ce0(p_yuv_channels_ch3_ce0),
    .we0(p_yuv_channels_ch3_we0),
    .d0(grp_rgb2yuv_fu_244_out_channels_ch3_d0),
    .q0(p_yuv_channels_ch3_q0)
);

yuv_filter_p_yuv_kbM #(
    .DataWidth( 8 ),
    .AddressRange( 2457600 ),
    .AddressWidth( 22 ))
p_scale_channels_ch1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_scale_channels_ch1_address0),
    .ce0(p_scale_channels_ch1_ce0),
    .we0(p_scale_channels_ch1_we0),
    .d0(tmp_10_i_reg_541),
    .q0(p_scale_channels_ch1_q0)
);

yuv_filter_p_yuv_kbM #(
    .DataWidth( 8 ),
    .AddressRange( 2457600 ),
    .AddressWidth( 22 ))
p_scale_channels_ch2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_scale_channels_ch2_address0),
    .ce0(p_scale_channels_ch2_ce0),
    .we0(p_scale_channels_ch2_we0),
    .d0(tmp_11_i_reg_546),
    .q0(p_scale_channels_ch2_q0)
);

yuv_filter_p_yuv_kbM #(
    .DataWidth( 8 ),
    .AddressRange( 2457600 ),
    .AddressWidth( 22 ))
p_scale_channels_ch3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_scale_channels_ch3_address0),
    .ce0(p_scale_channels_ch3_ce0),
    .we0(p_scale_channels_ch3_we0),
    .d0(tmp_12_i_reg_551),
    .q0(p_scale_channels_ch3_q0)
);

rgb2yuv grp_rgb2yuv_fu_244(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rgb2yuv_fu_244_ap_start),
    .ap_done(grp_rgb2yuv_fu_244_ap_done),
    .ap_idle(grp_rgb2yuv_fu_244_ap_idle),
    .ap_ready(grp_rgb2yuv_fu_244_ap_ready),
    .in_channels_ch1_address0(grp_rgb2yuv_fu_244_in_channels_ch1_address0),
    .in_channels_ch1_ce0(grp_rgb2yuv_fu_244_in_channels_ch1_ce0),
    .in_channels_ch1_q0(in_channels_ch1_q0),
    .in_channels_ch2_address0(grp_rgb2yuv_fu_244_in_channels_ch2_address0),
    .in_channels_ch2_ce0(grp_rgb2yuv_fu_244_in_channels_ch2_ce0),
    .in_channels_ch2_q0(in_channels_ch2_q0),
    .in_channels_ch3_address0(grp_rgb2yuv_fu_244_in_channels_ch3_address0),
    .in_channels_ch3_ce0(grp_rgb2yuv_fu_244_in_channels_ch3_ce0),
    .in_channels_ch3_q0(in_channels_ch3_q0),
    .in_width_read(in_width),
    .in_height_read(in_height),
    .out_channels_ch1_address0(grp_rgb2yuv_fu_244_out_channels_ch1_address0),
    .out_channels_ch1_ce0(grp_rgb2yuv_fu_244_out_channels_ch1_ce0),
    .out_channels_ch1_we0(grp_rgb2yuv_fu_244_out_channels_ch1_we0),
    .out_channels_ch1_d0(grp_rgb2yuv_fu_244_out_channels_ch1_d0),
    .out_channels_ch2_address0(grp_rgb2yuv_fu_244_out_channels_ch2_address0),
    .out_channels_ch2_ce0(grp_rgb2yuv_fu_244_out_channels_ch2_ce0),
    .out_channels_ch2_we0(grp_rgb2yuv_fu_244_out_channels_ch2_we0),
    .out_channels_ch2_d0(grp_rgb2yuv_fu_244_out_channels_ch2_d0),
    .out_channels_ch3_address0(grp_rgb2yuv_fu_244_out_channels_ch3_address0),
    .out_channels_ch3_ce0(grp_rgb2yuv_fu_244_out_channels_ch3_ce0),
    .out_channels_ch3_we0(grp_rgb2yuv_fu_244_out_channels_ch3_we0),
    .out_channels_ch3_d0(grp_rgb2yuv_fu_244_out_channels_ch3_d0),
    .ap_return_0(grp_rgb2yuv_fu_244_ap_return_0),
    .ap_return_1(grp_rgb2yuv_fu_244_ap_return_1)
);

yuv2rgb grp_yuv2rgb_fu_264(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_yuv2rgb_fu_264_ap_start),
    .ap_done(grp_yuv2rgb_fu_264_ap_done),
    .ap_idle(grp_yuv2rgb_fu_264_ap_idle),
    .ap_ready(grp_yuv2rgb_fu_264_ap_ready),
    .in_channels_ch1_address0(grp_yuv2rgb_fu_264_in_channels_ch1_address0),
    .in_channels_ch1_ce0(grp_yuv2rgb_fu_264_in_channels_ch1_ce0),
    .in_channels_ch1_q0(p_scale_channels_ch1_q0),
    .in_channels_ch2_address0(grp_yuv2rgb_fu_264_in_channels_ch2_address0),
    .in_channels_ch2_ce0(grp_yuv2rgb_fu_264_in_channels_ch2_ce0),
    .in_channels_ch2_q0(p_scale_channels_ch2_q0),
    .in_channels_ch3_address0(grp_yuv2rgb_fu_264_in_channels_ch3_address0),
    .in_channels_ch3_ce0(grp_yuv2rgb_fu_264_in_channels_ch3_ce0),
    .in_channels_ch3_q0(p_scale_channels_ch3_q0),
    .in_width_read(p_yuv_width_reg_441),
    .in_height_read(p_yuv_height_reg_447),
    .out_channels_ch1_address0(grp_yuv2rgb_fu_264_out_channels_ch1_address0),
    .out_channels_ch1_ce0(grp_yuv2rgb_fu_264_out_channels_ch1_ce0),
    .out_channels_ch1_we0(grp_yuv2rgb_fu_264_out_channels_ch1_we0),
    .out_channels_ch1_d0(grp_yuv2rgb_fu_264_out_channels_ch1_d0),
    .out_channels_ch2_address0(grp_yuv2rgb_fu_264_out_channels_ch2_address0),
    .out_channels_ch2_ce0(grp_yuv2rgb_fu_264_out_channels_ch2_ce0),
    .out_channels_ch2_we0(grp_yuv2rgb_fu_264_out_channels_ch2_we0),
    .out_channels_ch2_d0(grp_yuv2rgb_fu_264_out_channels_ch2_d0),
    .out_channels_ch3_address0(grp_yuv2rgb_fu_264_out_channels_ch3_address0),
    .out_channels_ch3_ce0(grp_yuv2rgb_fu_264_out_channels_ch3_ce0),
    .out_channels_ch3_we0(grp_yuv2rgb_fu_264_out_channels_ch3_we0),
    .out_channels_ch3_d0(grp_yuv2rgb_fu_264_out_channels_ch3_d0),
    .ap_return_0(grp_yuv2rgb_fu_264_ap_return_0),
    .ap_return_1(grp_yuv2rgb_fu_264_ap_return_1)
);

yuv_filter_mul_8nqcK #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
yuv_filter_mul_8nqcK_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_370_p0),
    .din1(grp_fu_370_p1),
    .ce(1'b1),
    .dout(grp_fu_370_p2)
);

yuv_filter_mul_8nqcK #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
yuv_filter_mul_8nqcK_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_378_p0),
    .din1(grp_fu_378_p1),
    .ce(1'b1),
    .dout(grp_fu_378_p2)
);

yuv_filter_mul_8nqcK #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
yuv_filter_mul_8nqcK_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_386_p0),
    .din1(grp_fu_386_p1),
    .ce(1'b1),
    .dout(grp_fu_386_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_rgb2yuv_fu_244_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_reg_grp_rgb2yuv_fu_244_ap_start <= 1'b1;
        end else if ((1'b1 == grp_rgb2yuv_fu_244_ap_ready)) begin
            ap_reg_grp_rgb2yuv_fu_244_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_yuv2rgb_fu_264_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_299_p2 == 1'd1))) begin
            ap_reg_grp_yuv2rgb_fu_264_ap_start <= 1'b1;
        end else if ((1'b1 == grp_yuv2rgb_fu_264_ap_ready)) begin
            ap_reg_grp_yuv2rgb_fu_264_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_i_fu_340_p2 == 1'd1))) begin
        x_i_reg_222 <= x_reg_471;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_rgb2yuv_fu_244_ap_done == 1'b1))) begin
        x_i_reg_222 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        y_i_reg_233 <= y_reg_484;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_299_p2 == 1'd0))) begin
        y_i_reg_233 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        U_reg_516 <= p_yuv_channels_ch2_q0;
        V_reg_521 <= p_yuv_channels_ch3_q0;
        Y_reg_511 <= p_yuv_channels_ch1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_rgb2yuv_fu_244_ap_done == 1'b1))) begin
        p_yuv_height_reg_447 <= grp_rgb2yuv_fu_244_ap_return_1;
        p_yuv_width_reg_441 <= grp_rgb2yuv_fu_244_ap_return_0;
        tmp_1_i_cast_reg_458[7 : 0] <= tmp_1_i_cast_fu_291_p1[7 : 0];
        tmp_2_i_cast_reg_463[7 : 0] <= tmp_2_i_cast_fu_295_p1[7 : 0];
        tmp_i_cast_reg_453[7 : 0] <= tmp_i_cast_fu_287_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_10_i_reg_541 <= {{grp_fu_370_p2[14:7]}};
        tmp_11_i_reg_546 <= {{grp_fu_378_p2[14:7]}};
        tmp_12_i_reg_551 <= {{grp_fu_386_p2[14:7]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_299_p2 == 1'd0))) begin
        tmp_2_reg_476[22 : 8] <= tmp_2_fu_334_p2[22 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_i_fu_340_p2))) begin
        tmp_3_cast_reg_489[22 : 0] <= tmp_3_cast_fu_360_p1[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_471 <= x_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_reg_484 <= y_fu_345_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (grp_yuv2rgb_fu_264_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (grp_yuv2rgb_fu_264_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (grp_yuv2rgb_fu_264_ap_done == 1'b1))) begin
        out_height_ap_vld = 1'b1;
    end else begin
        out_height_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (grp_yuv2rgb_fu_264_ap_done == 1'b1))) begin
        out_width_ap_vld = 1'b1;
    end else begin
        out_width_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_scale_channels_ch1_address0 = tmp_3_cast_reg_489;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_scale_channels_ch1_address0 = grp_yuv2rgb_fu_264_in_channels_ch1_address0;
    end else begin
        p_scale_channels_ch1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        p_scale_channels_ch1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_scale_channels_ch1_ce0 = grp_yuv2rgb_fu_264_in_channels_ch1_ce0;
    end else begin
        p_scale_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_scale_channels_ch1_we0 = 1'b1;
    end else begin
        p_scale_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_scale_channels_ch2_address0 = tmp_3_cast_reg_489;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_scale_channels_ch2_address0 = grp_yuv2rgb_fu_264_in_channels_ch2_address0;
    end else begin
        p_scale_channels_ch2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        p_scale_channels_ch2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_scale_channels_ch2_ce0 = grp_yuv2rgb_fu_264_in_channels_ch2_ce0;
    end else begin
        p_scale_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_scale_channels_ch2_we0 = 1'b1;
    end else begin
        p_scale_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_scale_channels_ch3_address0 = tmp_3_cast_reg_489;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_scale_channels_ch3_address0 = grp_yuv2rgb_fu_264_in_channels_ch3_address0;
    end else begin
        p_scale_channels_ch3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        p_scale_channels_ch3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_scale_channels_ch3_ce0 = grp_yuv2rgb_fu_264_in_channels_ch3_ce0;
    end else begin
        p_scale_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_scale_channels_ch3_we0 = 1'b1;
    end else begin
        p_scale_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_yuv_channels_ch1_address0 = tmp_3_cast_fu_360_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_yuv_channels_ch1_address0 = grp_rgb2yuv_fu_244_out_channels_ch1_address0;
    end else begin
        p_yuv_channels_ch1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        p_yuv_channels_ch1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_yuv_channels_ch1_ce0 = grp_rgb2yuv_fu_244_out_channels_ch1_ce0;
    end else begin
        p_yuv_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_yuv_channels_ch1_we0 = grp_rgb2yuv_fu_244_out_channels_ch1_we0;
    end else begin
        p_yuv_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_yuv_channels_ch2_address0 = tmp_3_cast_fu_360_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_yuv_channels_ch2_address0 = grp_rgb2yuv_fu_244_out_channels_ch2_address0;
    end else begin
        p_yuv_channels_ch2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        p_yuv_channels_ch2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_yuv_channels_ch2_ce0 = grp_rgb2yuv_fu_244_out_channels_ch2_ce0;
    end else begin
        p_yuv_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_yuv_channels_ch2_we0 = grp_rgb2yuv_fu_244_out_channels_ch2_we0;
    end else begin
        p_yuv_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_yuv_channels_ch3_address0 = tmp_3_cast_fu_360_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_yuv_channels_ch3_address0 = grp_rgb2yuv_fu_244_out_channels_ch3_address0;
    end else begin
        p_yuv_channels_ch3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        p_yuv_channels_ch3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_yuv_channels_ch3_ce0 = grp_rgb2yuv_fu_244_out_channels_ch3_ce0;
    end else begin
        p_yuv_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_yuv_channels_ch3_we0 = grp_rgb2yuv_fu_244_out_channels_ch3_we0;
    end else begin
        p_yuv_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_rgb2yuv_fu_244_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_299_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_i_fu_340_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (grp_yuv2rgb_fu_264_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign exitcond1_i_fu_299_p2 = ((x_i_reg_222 == p_yuv_width_reg_441) ? 1'b1 : 1'b0);

assign exitcond_i_fu_340_p2 = ((y_i_reg_233 == p_yuv_height_reg_447) ? 1'b1 : 1'b0);

assign grp_fu_370_p0 = tmp_i_cast_reg_453;

assign grp_fu_370_p1 = grp_fu_370_p10;

assign grp_fu_370_p10 = Y_reg_511;

assign grp_fu_378_p0 = tmp_1_i_cast_reg_458;

assign grp_fu_378_p1 = grp_fu_378_p10;

assign grp_fu_378_p10 = U_reg_516;

assign grp_fu_386_p0 = tmp_2_i_cast_reg_463;

assign grp_fu_386_p1 = grp_fu_386_p10;

assign grp_fu_386_p10 = V_reg_521;

assign grp_rgb2yuv_fu_244_ap_start = ap_reg_grp_rgb2yuv_fu_244_ap_start;

assign grp_yuv2rgb_fu_264_ap_start = ap_reg_grp_yuv2rgb_fu_264_ap_start;

assign in_channels_ch1_address0 = grp_rgb2yuv_fu_244_in_channels_ch1_address0;

assign in_channels_ch1_ce0 = grp_rgb2yuv_fu_244_in_channels_ch1_ce0;

assign in_channels_ch2_address0 = grp_rgb2yuv_fu_244_in_channels_ch2_address0;

assign in_channels_ch2_ce0 = grp_rgb2yuv_fu_244_in_channels_ch2_ce0;

assign in_channels_ch3_address0 = grp_rgb2yuv_fu_244_in_channels_ch3_address0;

assign in_channels_ch3_ce0 = grp_rgb2yuv_fu_244_in_channels_ch3_ce0;

assign out_channels_ch1_address0 = grp_yuv2rgb_fu_264_out_channels_ch1_address0;

assign out_channels_ch1_ce0 = grp_yuv2rgb_fu_264_out_channels_ch1_ce0;

assign out_channels_ch1_d0 = grp_yuv2rgb_fu_264_out_channels_ch1_d0;

assign out_channels_ch1_we0 = grp_yuv2rgb_fu_264_out_channels_ch1_we0;

assign out_channels_ch2_address0 = grp_yuv2rgb_fu_264_out_channels_ch2_address0;

assign out_channels_ch2_ce0 = grp_yuv2rgb_fu_264_out_channels_ch2_ce0;

assign out_channels_ch2_d0 = grp_yuv2rgb_fu_264_out_channels_ch2_d0;

assign out_channels_ch2_we0 = grp_yuv2rgb_fu_264_out_channels_ch2_we0;

assign out_channels_ch3_address0 = grp_yuv2rgb_fu_264_out_channels_ch3_address0;

assign out_channels_ch3_ce0 = grp_yuv2rgb_fu_264_out_channels_ch3_ce0;

assign out_channels_ch3_d0 = grp_yuv2rgb_fu_264_out_channels_ch3_d0;

assign out_channels_ch3_we0 = grp_yuv2rgb_fu_264_out_channels_ch3_we0;

assign out_height = grp_yuv2rgb_fu_264_ap_return_1;

assign out_width = grp_yuv2rgb_fu_264_ap_return_0;

assign p_shl3_cast_fu_326_p3 = {{tmp_1_fu_322_p1}, {8'd0}};

assign p_shl_cast_fu_314_p3 = {{tmp_fu_310_p1}, {10'd0}};

assign tmp_1_fu_322_p1 = x_i_reg_222[14:0];

assign tmp_1_i_cast_fu_291_p1 = U_scale;

assign tmp_2_fu_334_p2 = (p_shl_cast_fu_314_p3 + p_shl3_cast_fu_326_p3);

assign tmp_2_i_cast_fu_295_p1 = V_scale;

assign tmp_3_cast_fu_360_p1 = tmp_3_fu_355_p2;

assign tmp_3_fu_355_p2 = (tmp_2_reg_476 + tmp_5_i_cast_fu_351_p1);

assign tmp_5_i_cast_fu_351_p1 = y_i_reg_233;

assign tmp_fu_310_p1 = x_i_reg_222[12:0];

assign tmp_i_cast_fu_287_p1 = Y_scale;

assign x_fu_304_p2 = (x_i_reg_222 + 16'd1);

assign y_fu_345_p2 = (y_i_reg_233 + 16'd1);

always @ (posedge ap_clk) begin
    tmp_i_cast_reg_453[14:8] <= 7'b0000000;
    tmp_1_i_cast_reg_458[14:8] <= 7'b0000000;
    tmp_2_i_cast_reg_463[14:8] <= 7'b0000000;
    tmp_2_reg_476[7:0] <= 8'b00000000;
    tmp_3_cast_reg_489[63:23] <= 41'b00000000000000000000000000000000000000000;
end

endmodule //yuv_filter
