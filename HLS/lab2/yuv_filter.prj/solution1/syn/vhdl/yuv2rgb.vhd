-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv2rgb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width_read : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv2rgb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv17_1FF30 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100110000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv18_12A : STD_LOGIC_VECTOR (17 downto 0) := "000000000100101010";
    constant ap_const_lv18_80 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_const_lv18_199 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110011001";
    constant ap_const_lv16_FF9C : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_1_fu_219_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_1_reg_564 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_249_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_s_reg_569 : STD_LOGIC_VECTOR (22 downto 0);
    signal exitcond1_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_270_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_1_reg_577 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_21_cast_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_reg_582 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal E_fu_290_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal E_reg_606 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal Y_reg_617 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal D_fu_308_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_622 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_523_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_reg_629 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_299_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_reg_636 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_533_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_reg_641 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_647 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_338_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_14_fu_338_p2 : signal is "no";
    signal tmp_14_reg_653 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_15_reg_659 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_fu_384_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_18_reg_664 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_19_reg_670 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal G_fu_472_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_685 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_fu_515_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_690 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal x_reg_192 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_203 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_fu_225_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_237_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_cast_fu_229_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl3_cast_fu_241_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_cast_fu_276_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_6_fu_280_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_299_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_317_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_541_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp1_cast_fu_335_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_fu_353_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl1_fu_364_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_371_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp2_fu_375_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 of tmp2_fu_375_p2 : signal is "no";
    signal tmp2_cast_fu_380_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl_cast_fu_360_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_10_fu_400_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp_fu_416_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_fu_407_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp9_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_442_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp2_fu_458_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp2_fu_449_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp1_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_485_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp3_fu_501_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp3_fu_492_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_523_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_523_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_523_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_523_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_533_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_541_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_523_p10 : STD_LOGIC_VECTOR (8 downto 0);

    component yuv_filter_mul_9sg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component yuv_filter_ama_adhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_muibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_mujbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    yuv_filter_mul_9sg8j_U14 : component yuv_filter_mul_9sg8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_299_p0,
        din1 => E_reg_606,
        ce => ap_const_logic_1,
        dout => grp_fu_299_p2);

    yuv_filter_ama_adhbi_U15 : component yuv_filter_ama_adhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        din2_WIDTH => 10,
        din3_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_523_p0,
        din1 => grp_fu_523_p1,
        din2 => grp_fu_523_p2,
        din3 => grp_fu_523_p3,
        dout => grp_fu_523_p4);

    yuv_filter_mac_muibs_U16 : component yuv_filter_mac_muibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_533_p0,
        din1 => E_reg_606,
        din2 => tmp_3_reg_629,
        dout => grp_fu_533_p3);

    yuv_filter_mac_mujbC_U17 : component yuv_filter_mac_mujbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_541_p0,
        din1 => D_reg_622,
        din2 => tmp_13_reg_636,
        dout => grp_fu_541_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    x_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_265_p2 = ap_const_lv1_1))) then 
                x_reg_192 <= x_1_reg_564;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_reg_192 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    y_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                y_reg_203 <= y_1_reg_577;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_214_p2 = ap_const_lv1_0))) then 
                y_reg_203 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                B_reg_690 <= B_fu_515_p3;
                G_reg_685 <= G_fu_472_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                D_reg_622 <= D_fu_308_p2;
                tmp_13_reg_636 <= grp_fu_299_p2;
                tmp_3_reg_629 <= grp_fu_523_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                E_reg_606 <= E_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                Y_reg_617 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_reg_647 <= icmp_fu_326_p2;
                tmp_14_reg_653 <= tmp_14_fu_338_p2;
                tmp_15_reg_659 <= tmp_14_fu_338_p2(17 downto 16);
                tmp_18_reg_664 <= tmp_18_fu_384_p2;
                tmp_19_reg_670 <= tmp_18_fu_384_p2(18 downto 16);
                tmp_4_reg_641 <= grp_fu_533_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_265_p2))) then
                    tmp_21_cast_reg_582(22 downto 0) <= tmp_21_cast_fu_285_p1(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_214_p2 = ap_const_lv1_0))) then
                    tmp_s_reg_569(22 downto 8) <= tmp_s_fu_249_p2(22 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                x_1_reg_564 <= x_1_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                y_1_reg_577 <= y_1_fu_270_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_569(7 downto 0) <= "00000000";
    tmp_21_cast_reg_582(63 downto 23) <= "00000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_214_p2, ap_CS_fsm_state3, exitcond_fu_265_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_214_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_265_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    B_fu_515_p3 <= 
        p_phitmp3_fu_501_p3 when (tmp_21_fu_509_p2(0) = '1') else 
        phitmp3_fu_492_p4;
    D_fu_308_p2 <= (in_channels_ch2_q0 xor ap_const_lv8_80);
    E_fu_290_p2 <= (in_channels_ch3_q0 xor ap_const_lv8_80);
    G_fu_472_p3 <= 
        p_phitmp2_fu_458_p3 when (tmp_17_fu_466_p2(0) = '1') else 
        phitmp2_fu_449_p4;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_214_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_214_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_214_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_214_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= in_width_read;
    ap_return_1 <= in_height_read;
    exitcond1_fu_214_p2 <= "1" when (x_reg_192 = in_width_read) else "0";
    exitcond_fu_265_p2 <= "1" when (y_reg_203 = in_height_read) else "0";
    grp_fu_299_p0 <= ap_const_lv17_1FF30(9 - 1 downto 0);
    grp_fu_523_p0 <= ap_const_lv9_1F0(5 - 1 downto 0);
    grp_fu_523_p1 <= grp_fu_523_p10(8 - 1 downto 0);
    grp_fu_523_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_reg_617),9));
    grp_fu_523_p2 <= ap_const_lv18_12A(10 - 1 downto 0);
    grp_fu_523_p3 <= ap_const_lv18_80(9 - 1 downto 0);
    grp_fu_533_p0 <= ap_const_lv18_199(10 - 1 downto 0);
    grp_fu_541_p0 <= ap_const_lv16_FF9C(8 - 1 downto 0);
    icmp1_fu_480_p2 <= "1" when (signed(tmp_19_reg_670) > signed(ap_const_lv3_0)) else "0";
    icmp9_fu_437_p2 <= "1" when (tmp_15_reg_659 = ap_const_lv2_1) else "0";
    icmp_fu_326_p2 <= "1" when (tmp_8_fu_317_p4 = ap_const_lv2_1) else "0";
    in_channels_ch1_address0 <= tmp_21_cast_reg_582(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= tmp_21_cast_reg_582(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= tmp_21_cast_fu_285_p1(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_address0 <= tmp_21_cast_reg_582(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= 
        p_phitmp_fu_416_p3 when (tmp_11_fu_423_p2(0) = '1') else 
        phitmp_fu_407_p4;

    out_channels_ch1_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= tmp_21_cast_reg_582(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= G_reg_685;

    out_channels_ch2_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= tmp_21_cast_reg_582(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= B_reg_690;

    out_channels_ch3_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_phitmp2_fu_458_p3 <= 
        ap_const_lv8_FF when (icmp9_fu_437_p2(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp3_fu_501_p3 <= 
        ap_const_lv8_FF when (icmp1_fu_480_p2(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp_fu_416_p3 <= 
        ap_const_lv8_FF when (icmp_reg_647(0) = '1') else 
        ap_const_lv8_0;
        p_shl1_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl1_fu_364_p3),18));

    p_shl1_fu_364_p3 <= (D_reg_622 & ap_const_lv2_0);
    p_shl2_cast_fu_229_p3 <= (tmp_fu_225_p1 & ap_const_lv10_0);
    p_shl3_cast_fu_241_p3 <= (tmp_5_fu_237_p1 & ap_const_lv8_0);
        p_shl_cast_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_fu_353_p3),19));

    p_shl_fu_353_p3 <= (D_reg_622 & ap_const_lv9_0);
    phitmp2_fu_449_p4 <= tmp_14_reg_653(15 downto 8);
    phitmp3_fu_492_p4 <= tmp_18_reg_664(15 downto 8);
    phitmp_fu_407_p4 <= tmp_4_reg_641(15 downto 8);
        tmp1_cast_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_541_p3),18));

        tmp2_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_375_p2),19));

    tmp2_fu_375_p2 <= std_logic_vector(signed(p_shl1_cast_fu_371_p1) + signed(tmp_3_reg_629));
    tmp_10_fu_400_p3 <= tmp_4_reg_641(17 downto 17);
    tmp_11_fu_423_p2 <= (icmp_reg_647 or tmp_10_fu_400_p3);
    tmp_14_fu_338_p2 <= std_logic_vector(signed(tmp1_cast_fu_335_p1) + signed(tmp_3_reg_629));
    tmp_16_fu_442_p3 <= tmp_14_reg_653(17 downto 17);
    tmp_17_fu_466_p2 <= (icmp9_fu_437_p2 or tmp_16_fu_442_p3);
    tmp_18_fu_384_p2 <= std_logic_vector(signed(tmp2_cast_fu_380_p1) + signed(p_shl_cast_fu_360_p1));
    tmp_20_fu_485_p3 <= tmp_18_reg_664(18 downto 18);
    tmp_21_cast_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_280_p2),64));
    tmp_21_fu_509_p2 <= (icmp1_fu_480_p2 or tmp_20_fu_485_p3);
    tmp_5_fu_237_p1 <= x_reg_192(15 - 1 downto 0);
    tmp_6_fu_280_p2 <= std_logic_vector(unsigned(tmp_cast_fu_276_p1) + unsigned(tmp_s_reg_569));
    tmp_8_fu_317_p4 <= grp_fu_533_p3(17 downto 16);
    tmp_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_203),23));
    tmp_fu_225_p1 <= x_reg_192(13 - 1 downto 0);
    tmp_s_fu_249_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_229_p3) + unsigned(p_shl3_cast_fu_241_p3));
    x_1_fu_219_p2 <= std_logic_vector(unsigned(x_reg_192) + unsigned(ap_const_lv16_1));
    y_1_fu_270_p2 <= std_logic_vector(unsigned(y_reg_203) + unsigned(ap_const_lv16_1));
end behav;
