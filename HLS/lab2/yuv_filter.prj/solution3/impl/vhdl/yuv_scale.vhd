-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_scale is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_channels_ch1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch1_empty_n : IN STD_LOGIC;
    in_channels_ch1_read : OUT STD_LOGIC;
    in_channels_ch2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_empty_n : IN STD_LOGIC;
    in_channels_ch2_read : OUT STD_LOGIC;
    in_channels_ch3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_empty_n : IN STD_LOGIC;
    in_channels_ch3_read : OUT STD_LOGIC;
    in_width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_width_empty_n : IN STD_LOGIC;
    in_width_read : OUT STD_LOGIC;
    in_height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_empty_n : IN STD_LOGIC;
    in_height_read : OUT STD_LOGIC;
    out_channels_ch1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_full_n : IN STD_LOGIC;
    out_channels_ch1_write : OUT STD_LOGIC;
    out_channels_ch2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_full_n : IN STD_LOGIC;
    out_channels_ch2_write : OUT STD_LOGIC;
    out_channels_ch3_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_full_n : IN STD_LOGIC;
    out_channels_ch3_write : OUT STD_LOGIC;
    out_width_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_width_full_n : IN STD_LOGIC;
    out_width_write : OUT STD_LOGIC;
    out_height_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_height_full_n : IN STD_LOGIC;
    out_height_write : OUT STD_LOGIC;
    Y_scale_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    Y_scale_empty_n : IN STD_LOGIC;
    Y_scale_read : OUT STD_LOGIC;
    U_scale_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    U_scale_empty_n : IN STD_LOGIC;
    U_scale_read : OUT STD_LOGIC;
    V_scale_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    V_scale_empty_n : IN STD_LOGIC;
    V_scale_read : OUT STD_LOGIC );
end;


architecture behav of yuv_scale is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal real_start_status_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal start_once_reg : STD_LOGIC := '0';
    signal start_control_reg : STD_LOGIC := '0';
    signal in_channels_ch1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond_flatten_reg_305 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_channels_ch2_blk_n : STD_LOGIC;
    signal in_channels_ch3_blk_n : STD_LOGIC;
    signal in_width_blk_n : STD_LOGIC;
    signal in_height_blk_n : STD_LOGIC;
    signal out_channels_ch1_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_305 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_channels_ch2_blk_n : STD_LOGIC;
    signal out_channels_ch3_blk_n : STD_LOGIC;
    signal out_width_blk_n : STD_LOGIC;
    signal out_height_blk_n : STD_LOGIC;
    signal Y_scale_blk_n : STD_LOGIC;
    signal U_scale_blk_n : STD_LOGIC;
    signal V_scale_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_scale_read_reg_260 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal U_scale_read_reg_265 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_scale_read_reg_270 : STD_LOGIC_VECTOR (7 downto 0);
    signal width_reg_275 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_reg_280 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_i_fu_174_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_cast_i_reg_285 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_cast_i_fu_177_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_cast_i_reg_290 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_cast_i_fu_180_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_cast_i_reg_295 : STD_LOGIC_VECTOR (14 downto 0);
    signal bound_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_305 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_305 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_305 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal Y_reg_314 : STD_LOGIC_VECTOR (7 downto 0);
    signal U_reg_319 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_reg_324 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_i_reg_344 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_i_reg_349 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_i_reg_354 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal grp_fu_203_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_203_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_211_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_211_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_219_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_203_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal bound_fu_254_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_254_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_203_ce : STD_LOGIC;
    signal grp_fu_211_ce : STD_LOGIC;
    signal grp_fu_219_ce : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_254_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_254_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_203_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_211_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_219_p00 : STD_LOGIC_VECTOR (14 downto 0);

    component yuv_filter_mul_8ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component yuv_filter_mul_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    yuv_filter_mul_8ng8j_U23 : component yuv_filter_mul_8ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_203_p0,
        din1 => grp_fu_203_p1,
        ce => grp_fu_203_ce,
        dout => grp_fu_203_p2);

    yuv_filter_mul_8ng8j_U24 : component yuv_filter_mul_8ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_211_p0,
        din1 => grp_fu_211_p1,
        ce => grp_fu_211_ce,
        dout => grp_fu_211_p2);

    yuv_filter_mul_8ng8j_U25 : component yuv_filter_mul_8ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_219_p0,
        din1 => grp_fu_219_p1,
        ce => grp_fu_219_ce,
        dout => grp_fu_219_p2);

    yuv_filter_mul_mubkb_x_U26 : component yuv_filter_mul_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bound_fu_254_p0,
        din1 => bound_fu_254_p1,
        dout => bound_fu_254_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    real_start_status_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                real_start_status_reg <= ap_const_logic_0;
            else
                if ((start_full_n = ap_const_logic_1)) then 
                    real_start_status_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_0 = start_full_n) and (ap_const_logic_1 = internal_ap_ready))) then 
                    real_start_status_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_control_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_control_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = real_start) and ((ap_const_logic_1 = internal_ap_ready) or (ap_const_logic_0 = start_once_reg)))) then 
                    start_control_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = start_control_reg)) then 
                    start_control_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = real_start)) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_0 = ap_start)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_189_p2))) then 
                indvar_flatten_reg_163 <= indvar_flatten_next_fu_194_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_163 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                U_reg_319 <= in_channels_ch2_dout;
                V_reg_324 <= in_channels_ch3_dout;
                Y_reg_314 <= in_channels_ch1_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_empty_n) or (ap_const_logic_0 = U_scale_empty_n) or (ap_const_logic_0 = V_scale_empty_n) or (ap_const_logic_0 = in_width_empty_n) or (ap_const_logic_0 = in_height_empty_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then
                U_scale_read_reg_265 <= U_scale_dout;
                V_scale_read_reg_270 <= V_scale_dout;
                Y_scale_read_reg_260 <= Y_scale_dout;
                height_reg_280 <= in_height_dout;
                width_reg_275 <= in_width_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_305 <= exitcond_flatten_reg_305;
                exitcond_flatten_reg_305 <= exitcond_flatten_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter2_exitcond_flatten_reg_305 <= ap_reg_pp0_iter1_exitcond_flatten_reg_305;
                ap_reg_pp0_iter3_exitcond_flatten_reg_305 <= ap_reg_pp0_iter2_exitcond_flatten_reg_305;
                ap_reg_pp0_iter4_exitcond_flatten_reg_305 <= ap_reg_pp0_iter3_exitcond_flatten_reg_305;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound_reg_300 <= bound_fu_254_p2;
                    tmp_1_cast_i_reg_290(7 downto 0) <= tmp_1_cast_i_fu_177_p1(7 downto 0);
                    tmp_2_cast_i_reg_295(7 downto 0) <= tmp_2_cast_i_fu_180_p1(7 downto 0);
                    tmp_cast_i_reg_285(7 downto 0) <= tmp_cast_i_fu_174_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_305))) then
                tmp_10_i_reg_344 <= grp_fu_203_p2(14 downto 7);
                tmp_11_i_reg_349 <= grp_fu_211_p2(14 downto 7);
                tmp_12_i_reg_354 <= grp_fu_219_p2(14 downto 7);
            end if;
        end if;
    end process;
    tmp_cast_i_reg_285(14 downto 8) <= "0000000";
    tmp_1_cast_i_reg_290(14 downto 8) <= "0000000";
    tmp_2_cast_i_reg_295(14 downto 8) <= "0000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_width_empty_n, in_height_empty_n, out_width_full_n, out_height_full_n, Y_scale_empty_n, U_scale_empty_n, V_scale_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, exitcond_flatten_fu_189_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_empty_n) or (ap_const_logic_0 = U_scale_empty_n) or (ap_const_logic_0 = V_scale_empty_n) or (ap_const_logic_0 = in_width_empty_n) or (ap_const_logic_0 = in_height_empty_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_189_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_189_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    U_scale_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, U_scale_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            U_scale_blk_n <= U_scale_empty_n;
        else 
            U_scale_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    U_scale_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_width_empty_n, in_height_empty_n, out_width_full_n, out_height_full_n, Y_scale_empty_n, U_scale_empty_n, V_scale_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_empty_n) or (ap_const_logic_0 = U_scale_empty_n) or (ap_const_logic_0 = V_scale_empty_n) or (ap_const_logic_0 = in_width_empty_n) or (ap_const_logic_0 = in_height_empty_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
            U_scale_read <= ap_const_logic_1;
        else 
            U_scale_read <= ap_const_logic_0;
        end if; 
    end process;


    V_scale_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, V_scale_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            V_scale_blk_n <= V_scale_empty_n;
        else 
            V_scale_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    V_scale_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_width_empty_n, in_height_empty_n, out_width_full_n, out_height_full_n, Y_scale_empty_n, U_scale_empty_n, V_scale_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_empty_n) or (ap_const_logic_0 = U_scale_empty_n) or (ap_const_logic_0 = V_scale_empty_n) or (ap_const_logic_0 = in_width_empty_n) or (ap_const_logic_0 = in_height_empty_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
            V_scale_read <= ap_const_logic_1;
        else 
            V_scale_read <= ap_const_logic_0;
        end if; 
    end process;


    Y_scale_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, Y_scale_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            Y_scale_blk_n <= Y_scale_empty_n;
        else 
            Y_scale_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Y_scale_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_width_empty_n, in_height_empty_n, out_width_full_n, out_height_full_n, Y_scale_empty_n, U_scale_empty_n, V_scale_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_empty_n) or (ap_const_logic_0 = U_scale_empty_n) or (ap_const_logic_0 = V_scale_empty_n) or (ap_const_logic_0 = in_width_empty_n) or (ap_const_logic_0 = in_height_empty_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
            Y_scale_read <= ap_const_logic_1;
        else 
            Y_scale_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(3);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n, out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_305, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_flatten_reg_305)
    begin
                ap_block_pp0_stage0_flag00001001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch1_empty_n)) or ((exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch2_empty_n)) or ((exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch3_empty_n)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (((ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305) and (ap_const_logic_0 = out_channels_ch1_full_n)) or ((ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305) and (ap_const_logic_0 = out_channels_ch2_full_n)) or ((ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305) and (ap_const_logic_0 = out_channels_ch3_full_n)))));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n, out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_305, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_flatten_reg_305)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch1_empty_n)) or ((exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch2_empty_n)) or ((exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch3_empty_n)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (((ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305) and (ap_const_logic_0 = out_channels_ch1_full_n)) or ((ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305) and (ap_const_logic_0 = out_channels_ch2_full_n)) or ((ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305) and (ap_const_logic_0 = out_channels_ch3_full_n)))));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n, out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_305, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_flatten_reg_305)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch1_empty_n)) or ((exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch2_empty_n)) or ((exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch3_empty_n)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (((ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305) and (ap_const_logic_0 = out_channels_ch1_full_n)) or ((ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305) and (ap_const_logic_0 = out_channels_ch2_full_n)) or ((ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305) and (ap_const_logic_0 = out_channels_ch3_full_n)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, in_width_empty_n, in_height_empty_n, out_width_full_n, out_height_full_n, Y_scale_empty_n, U_scale_empty_n, V_scale_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_empty_n) or (ap_const_logic_0 = U_scale_empty_n) or (ap_const_logic_0 = V_scale_empty_n) or (ap_const_logic_0 = in_width_empty_n) or (ap_const_logic_0 = in_height_empty_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n, exitcond_flatten_reg_305)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch1_empty_n)) or ((exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch2_empty_n)) or ((exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch3_empty_n)));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter5_assign_proc : process(out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, ap_reg_pp0_iter4_exitcond_flatten_reg_305)
    begin
                ap_block_state8_pp0_stage0_iter5 <= (((ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305) and (ap_const_logic_0 = out_channels_ch1_full_n)) or ((ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305) and (ap_const_logic_0 = out_channels_ch2_full_n)) or ((ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305) and (ap_const_logic_0 = out_channels_ch3_full_n)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_flatten_fu_189_p2)
    begin
        if ((exitcond_flatten_fu_189_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = real_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound_fu_254_p0 <= bound_fu_254_p00(16 - 1 downto 0);
    bound_fu_254_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_reg_280),32));
    bound_fu_254_p1 <= bound_fu_254_p10(16 - 1 downto 0);
    bound_fu_254_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_reg_275),32));
    exitcond_flatten_fu_189_p2 <= "1" when (indvar_flatten_reg_163 = bound_reg_300) else "0";

    grp_fu_203_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_203_ce <= ap_const_logic_1;
        else 
            grp_fu_203_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_203_p0 <= grp_fu_203_p00(8 - 1 downto 0);
    grp_fu_203_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_reg_314),15));
    grp_fu_203_p1 <= tmp_cast_i_reg_285(8 - 1 downto 0);

    grp_fu_211_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_211_ce <= ap_const_logic_1;
        else 
            grp_fu_211_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_211_p0 <= grp_fu_211_p00(8 - 1 downto 0);
    grp_fu_211_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(U_reg_319),15));
    grp_fu_211_p1 <= tmp_1_cast_i_reg_290(8 - 1 downto 0);

    grp_fu_219_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_219_ce <= ap_const_logic_1;
        else 
            grp_fu_219_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_219_p0 <= grp_fu_219_p00(8 - 1 downto 0);
    grp_fu_219_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(V_reg_324),15));
    grp_fu_219_p1 <= tmp_2_cast_i_reg_295(8 - 1 downto 0);

    in_channels_ch1_blk_n_assign_proc : process(in_channels_ch1_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_305)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_305 = ap_const_lv1_0))) then 
            in_channels_ch1_blk_n <= in_channels_ch1_empty_n;
        else 
            in_channels_ch1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_channels_ch1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_305, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            in_channels_ch1_read <= ap_const_logic_1;
        else 
            in_channels_ch1_read <= ap_const_logic_0;
        end if; 
    end process;


    in_channels_ch2_blk_n_assign_proc : process(in_channels_ch2_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_305)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_305 = ap_const_lv1_0))) then 
            in_channels_ch2_blk_n <= in_channels_ch2_empty_n;
        else 
            in_channels_ch2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_channels_ch2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_305, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            in_channels_ch2_read <= ap_const_logic_1;
        else 
            in_channels_ch2_read <= ap_const_logic_0;
        end if; 
    end process;


    in_channels_ch3_blk_n_assign_proc : process(in_channels_ch3_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_305)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_305 = ap_const_lv1_0))) then 
            in_channels_ch3_blk_n <= in_channels_ch3_empty_n;
        else 
            in_channels_ch3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_channels_ch3_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_305, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_305 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            in_channels_ch3_read <= ap_const_logic_1;
        else 
            in_channels_ch3_read <= ap_const_logic_0;
        end if; 
    end process;


    in_height_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_height_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            in_height_blk_n <= in_height_empty_n;
        else 
            in_height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_height_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_width_empty_n, in_height_empty_n, out_width_full_n, out_height_full_n, Y_scale_empty_n, U_scale_empty_n, V_scale_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_empty_n) or (ap_const_logic_0 = U_scale_empty_n) or (ap_const_logic_0 = V_scale_empty_n) or (ap_const_logic_0 = in_width_empty_n) or (ap_const_logic_0 = in_height_empty_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
            in_height_read <= ap_const_logic_1;
        else 
            in_height_read <= ap_const_logic_0;
        end if; 
    end process;


    in_width_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_width_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            in_width_blk_n <= in_width_empty_n;
        else 
            in_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_width_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_width_empty_n, in_height_empty_n, out_width_full_n, out_height_full_n, Y_scale_empty_n, U_scale_empty_n, V_scale_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_empty_n) or (ap_const_logic_0 = U_scale_empty_n) or (ap_const_logic_0 = V_scale_empty_n) or (ap_const_logic_0 = in_width_empty_n) or (ap_const_logic_0 = in_height_empty_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
            in_width_read <= ap_const_logic_1;
        else 
            in_width_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_194_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_163) + unsigned(ap_const_lv32_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    out_channels_ch1_blk_n_assign_proc : process(out_channels_ch1_full_n, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_flatten_reg_305)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305))) then 
            out_channels_ch1_blk_n <= out_channels_ch1_full_n;
        else 
            out_channels_ch1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch1_din <= tmp_10_i_reg_344;

    out_channels_ch1_write_assign_proc : process(ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_flatten_reg_305, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            out_channels_ch1_write <= ap_const_logic_1;
        else 
            out_channels_ch1_write <= ap_const_logic_0;
        end if; 
    end process;


    out_channels_ch2_blk_n_assign_proc : process(out_channels_ch2_full_n, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_flatten_reg_305)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305))) then 
            out_channels_ch2_blk_n <= out_channels_ch2_full_n;
        else 
            out_channels_ch2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch2_din <= tmp_11_i_reg_349;

    out_channels_ch2_write_assign_proc : process(ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_flatten_reg_305, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            out_channels_ch2_write <= ap_const_logic_1;
        else 
            out_channels_ch2_write <= ap_const_logic_0;
        end if; 
    end process;


    out_channels_ch3_blk_n_assign_proc : process(out_channels_ch3_full_n, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_flatten_reg_305)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305))) then 
            out_channels_ch3_blk_n <= out_channels_ch3_full_n;
        else 
            out_channels_ch3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch3_din <= tmp_12_i_reg_354;

    out_channels_ch3_write_assign_proc : process(ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond_flatten_reg_305, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_305) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            out_channels_ch3_write <= ap_const_logic_1;
        else 
            out_channels_ch3_write <= ap_const_logic_0;
        end if; 
    end process;


    out_height_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_height_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            out_height_blk_n <= out_height_full_n;
        else 
            out_height_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_height_din <= in_height_dout;

    out_height_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_width_empty_n, in_height_empty_n, out_width_full_n, out_height_full_n, Y_scale_empty_n, U_scale_empty_n, V_scale_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_empty_n) or (ap_const_logic_0 = U_scale_empty_n) or (ap_const_logic_0 = V_scale_empty_n) or (ap_const_logic_0 = in_width_empty_n) or (ap_const_logic_0 = in_height_empty_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
            out_height_write <= ap_const_logic_1;
        else 
            out_height_write <= ap_const_logic_0;
        end if; 
    end process;


    out_width_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_width_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            out_width_blk_n <= out_width_full_n;
        else 
            out_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_width_din <= in_width_dout;

    out_width_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_width_empty_n, in_height_empty_n, out_width_full_n, out_height_full_n, Y_scale_empty_n, U_scale_empty_n, V_scale_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_empty_n) or (ap_const_logic_0 = U_scale_empty_n) or (ap_const_logic_0 = V_scale_empty_n) or (ap_const_logic_0 = in_width_empty_n) or (ap_const_logic_0 = in_height_empty_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
            out_width_write <= ap_const_logic_1;
        else 
            out_width_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, real_start_status_reg)
    begin
        if ((ap_const_logic_1 = real_start_status_reg)) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;
    start_write <= (ap_start and start_control_reg);
    tmp_1_cast_i_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(U_scale_read_reg_265),15));
    tmp_2_cast_i_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(V_scale_read_reg_270),15));
    tmp_cast_i_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_scale_read_reg_260),15));
end behav;
