// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_scale (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        in_channels_ch1_dout,
        in_channels_ch1_empty_n,
        in_channels_ch1_read,
        in_channels_ch2_dout,
        in_channels_ch2_empty_n,
        in_channels_ch2_read,
        in_channels_ch3_dout,
        in_channels_ch3_empty_n,
        in_channels_ch3_read,
        in_width_dout,
        in_width_empty_n,
        in_width_read,
        in_height_dout,
        in_height_empty_n,
        in_height_read,
        out_channels_ch1_din,
        out_channels_ch1_full_n,
        out_channels_ch1_write,
        out_channels_ch2_din,
        out_channels_ch2_full_n,
        out_channels_ch2_write,
        out_channels_ch3_din,
        out_channels_ch3_full_n,
        out_channels_ch3_write,
        out_width_din,
        out_width_full_n,
        out_width_write,
        out_height_din,
        out_height_full_n,
        out_height_write,
        Y_scale_dout,
        Y_scale_empty_n,
        Y_scale_read,
        U_scale_dout,
        U_scale_empty_n,
        U_scale_read,
        V_scale_dout,
        V_scale_empty_n,
        V_scale_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state9 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [7:0] in_channels_ch1_dout;
input   in_channels_ch1_empty_n;
output   in_channels_ch1_read;
input  [7:0] in_channels_ch2_dout;
input   in_channels_ch2_empty_n;
output   in_channels_ch2_read;
input  [7:0] in_channels_ch3_dout;
input   in_channels_ch3_empty_n;
output   in_channels_ch3_read;
input  [15:0] in_width_dout;
input   in_width_empty_n;
output   in_width_read;
input  [15:0] in_height_dout;
input   in_height_empty_n;
output   in_height_read;
output  [7:0] out_channels_ch1_din;
input   out_channels_ch1_full_n;
output   out_channels_ch1_write;
output  [7:0] out_channels_ch2_din;
input   out_channels_ch2_full_n;
output   out_channels_ch2_write;
output  [7:0] out_channels_ch3_din;
input   out_channels_ch3_full_n;
output   out_channels_ch3_write;
output  [15:0] out_width_din;
input   out_width_full_n;
output   out_width_write;
output  [15:0] out_height_din;
input   out_height_full_n;
output   out_height_write;
input  [7:0] Y_scale_dout;
input   Y_scale_empty_n;
output   Y_scale_read;
input  [7:0] U_scale_dout;
input   U_scale_empty_n;
output   U_scale_read;
input  [7:0] V_scale_dout;
input   V_scale_empty_n;
output   V_scale_read;

reg ap_done;
reg ap_idle;
reg in_channels_ch1_read;
reg in_channels_ch2_read;
reg in_channels_ch3_read;
reg in_width_read;
reg in_height_read;
reg out_channels_ch1_write;
reg out_channels_ch2_write;
reg out_channels_ch3_write;
reg out_width_write;
reg out_height_write;
reg Y_scale_read;
reg U_scale_read;
reg V_scale_read;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    in_channels_ch1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_305;
reg    in_channels_ch2_blk_n;
reg    in_channels_ch3_blk_n;
reg    in_width_blk_n;
reg    in_height_blk_n;
reg    out_channels_ch1_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_305;
reg    out_channels_ch2_blk_n;
reg    out_channels_ch3_blk_n;
reg    out_width_blk_n;
reg    out_height_blk_n;
reg    Y_scale_blk_n;
reg    U_scale_blk_n;
reg    V_scale_blk_n;
reg   [31:0] indvar_flatten_reg_163;
reg   [7:0] Y_scale_read_reg_260;
reg    ap_block_state1;
reg   [7:0] U_scale_read_reg_265;
reg   [7:0] V_scale_read_reg_270;
reg   [15:0] width_reg_275;
reg   [15:0] height_reg_280;
wire   [14:0] tmp_cast_i_fu_174_p1;
reg   [14:0] tmp_cast_i_reg_285;
wire    ap_CS_fsm_state2;
wire   [14:0] tmp_1_cast_i_fu_177_p1;
reg   [14:0] tmp_1_cast_i_reg_290;
wire   [14:0] tmp_2_cast_i_fu_180_p1;
reg   [14:0] tmp_2_cast_i_reg_295;
wire   [31:0] bound_fu_254_p2;
reg   [31:0] bound_reg_300;
wire   [0:0] exitcond_flatten_fu_189_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_state8_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_305;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_305;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_305;
wire   [31:0] indvar_flatten_next_fu_194_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] Y_reg_314;
reg   [7:0] U_reg_319;
reg   [7:0] V_reg_324;
reg   [7:0] tmp_10_i_reg_344;
reg   [7:0] tmp_11_i_reg_349;
reg   [7:0] tmp_12_i_reg_354;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_block_pp0_stage0_flag00001001;
wire   [7:0] grp_fu_203_p0;
wire   [7:0] grp_fu_203_p1;
wire   [7:0] grp_fu_211_p0;
wire   [7:0] grp_fu_211_p1;
wire   [7:0] grp_fu_219_p0;
wire   [7:0] grp_fu_219_p1;
wire   [14:0] grp_fu_203_p2;
wire   [14:0] grp_fu_211_p2;
wire   [14:0] grp_fu_219_p2;
wire   [15:0] bound_fu_254_p0;
wire   [15:0] bound_fu_254_p1;
reg    grp_fu_203_ce;
reg    grp_fu_211_ce;
reg    grp_fu_219_ce;
wire    ap_CS_fsm_state9;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] bound_fu_254_p00;
wire   [31:0] bound_fu_254_p10;
wire   [14:0] grp_fu_203_p00;
wire   [14:0] grp_fu_211_p00;
wire   [14:0] grp_fu_219_p00;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

yuv_filter_mul_8ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
yuv_filter_mul_8ng8j_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_203_p0),
    .din1(grp_fu_203_p1),
    .ce(grp_fu_203_ce),
    .dout(grp_fu_203_p2)
);

yuv_filter_mul_8ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
yuv_filter_mul_8ng8j_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_211_p0),
    .din1(grp_fu_211_p1),
    .ce(grp_fu_211_ce),
    .dout(grp_fu_211_p2)
);

yuv_filter_mul_8ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
yuv_filter_mul_8ng8j_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_219_p0),
    .din1(grp_fu_219_p1),
    .ce(grp_fu_219_ce),
    .dout(grp_fu_219_p2)
);

yuv_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
yuv_filter_mul_mubkb_x_U26(
    .din0(bound_fu_254_p0),
    .din1(bound_fu_254_p1),
    .dout(bound_fu_254_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_189_p2))) begin
        indvar_flatten_reg_163 <= indvar_flatten_next_fu_194_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_163 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_305 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        U_reg_319 <= in_channels_ch2_dout;
        V_reg_324 <= in_channels_ch3_dout;
        Y_reg_314 <= in_channels_ch1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_empty_n) | (1'b0 == U_scale_empty_n) | (1'b0 == V_scale_empty_n) | (1'b0 == in_width_empty_n) | (1'b0 == in_height_empty_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        U_scale_read_reg_265 <= U_scale_dout;
        V_scale_read_reg_270 <= V_scale_dout;
        Y_scale_read_reg_260 <= Y_scale_dout;
        height_reg_280 <= in_height_dout;
        width_reg_275 <= in_width_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_305 <= exitcond_flatten_reg_305;
        exitcond_flatten_reg_305 <= exitcond_flatten_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_305 <= ap_reg_pp0_iter1_exitcond_flatten_reg_305;
        ap_reg_pp0_iter3_exitcond_flatten_reg_305 <= ap_reg_pp0_iter2_exitcond_flatten_reg_305;
        ap_reg_pp0_iter4_exitcond_flatten_reg_305 <= ap_reg_pp0_iter3_exitcond_flatten_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_300 <= bound_fu_254_p2;
        tmp_1_cast_i_reg_290[7 : 0] <= tmp_1_cast_i_fu_177_p1[7 : 0];
        tmp_2_cast_i_reg_295[7 : 0] <= tmp_2_cast_i_fu_180_p1[7 : 0];
        tmp_cast_i_reg_285[7 : 0] <= tmp_cast_i_fu_174_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_305))) begin
        tmp_10_i_reg_344 <= {{grp_fu_203_p2[14:7]}};
        tmp_11_i_reg_349 <= {{grp_fu_211_p2[14:7]}};
        tmp_12_i_reg_354 <= {{grp_fu_219_p2[14:7]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        U_scale_blk_n = U_scale_empty_n;
    end else begin
        U_scale_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_empty_n) | (1'b0 == U_scale_empty_n) | (1'b0 == V_scale_empty_n) | (1'b0 == in_width_empty_n) | (1'b0 == in_height_empty_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        U_scale_read = 1'b1;
    end else begin
        U_scale_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        V_scale_blk_n = V_scale_empty_n;
    end else begin
        V_scale_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_empty_n) | (1'b0 == U_scale_empty_n) | (1'b0 == V_scale_empty_n) | (1'b0 == in_width_empty_n) | (1'b0 == in_height_empty_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        V_scale_read = 1'b1;
    end else begin
        V_scale_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        Y_scale_blk_n = Y_scale_empty_n;
    end else begin
        Y_scale_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_empty_n) | (1'b0 == U_scale_empty_n) | (1'b0 == V_scale_empty_n) | (1'b0 == in_width_empty_n) | (1'b0 == in_height_empty_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        Y_scale_read = 1'b1;
    end else begin
        Y_scale_read = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_189_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        grp_fu_203_ce = 1'b1;
    end else begin
        grp_fu_203_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        grp_fu_211_ce = 1'b1;
    end else begin
        grp_fu_211_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        grp_fu_219_ce = 1'b1;
    end else begin
        grp_fu_219_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_305 == 1'd0))) begin
        in_channels_ch1_blk_n = in_channels_ch1_empty_n;
    end else begin
        in_channels_ch1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_305 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_channels_ch1_read = 1'b1;
    end else begin
        in_channels_ch1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_305 == 1'd0))) begin
        in_channels_ch2_blk_n = in_channels_ch2_empty_n;
    end else begin
        in_channels_ch2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_305 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_channels_ch2_read = 1'b1;
    end else begin
        in_channels_ch2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_305 == 1'd0))) begin
        in_channels_ch3_blk_n = in_channels_ch3_empty_n;
    end else begin
        in_channels_ch3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_305 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_channels_ch3_read = 1'b1;
    end else begin
        in_channels_ch3_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        in_height_blk_n = in_height_empty_n;
    end else begin
        in_height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_empty_n) | (1'b0 == U_scale_empty_n) | (1'b0 == V_scale_empty_n) | (1'b0 == in_width_empty_n) | (1'b0 == in_height_empty_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        in_height_read = 1'b1;
    end else begin
        in_height_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        in_width_blk_n = in_width_empty_n;
    end else begin
        in_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_empty_n) | (1'b0 == U_scale_empty_n) | (1'b0 == V_scale_empty_n) | (1'b0 == in_width_empty_n) | (1'b0 == in_height_empty_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        in_width_read = 1'b1;
    end else begin
        in_width_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305))) begin
        out_channels_ch1_blk_n = out_channels_ch1_full_n;
    end else begin
        out_channels_ch1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        out_channels_ch1_write = 1'b1;
    end else begin
        out_channels_ch1_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305))) begin
        out_channels_ch2_blk_n = out_channels_ch2_full_n;
    end else begin
        out_channels_ch2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        out_channels_ch2_write = 1'b1;
    end else begin
        out_channels_ch2_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305))) begin
        out_channels_ch3_blk_n = out_channels_ch3_full_n;
    end else begin
        out_channels_ch3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        out_channels_ch3_write = 1'b1;
    end else begin
        out_channels_ch3_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        out_height_blk_n = out_height_full_n;
    end else begin
        out_height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_empty_n) | (1'b0 == U_scale_empty_n) | (1'b0 == V_scale_empty_n) | (1'b0 == in_width_empty_n) | (1'b0 == in_height_empty_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        out_height_write = 1'b1;
    end else begin
        out_height_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        out_width_blk_n = out_width_full_n;
    end else begin
        out_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_empty_n) | (1'b0 == U_scale_empty_n) | (1'b0 == V_scale_empty_n) | (1'b0 == in_width_empty_n) | (1'b0 == in_height_empty_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        out_width_write = 1'b1;
    end else begin
        out_width_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_empty_n) | (1'b0 == U_scale_empty_n) | (1'b0 == V_scale_empty_n) | (1'b0 == in_width_empty_n) | (1'b0 == in_height_empty_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter5) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_189_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter5) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_189_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_305 == 1'd0) & (1'b0 == in_channels_ch1_empty_n)) | ((exitcond_flatten_reg_305 == 1'd0) & (1'b0 == in_channels_ch2_empty_n)) | ((exitcond_flatten_reg_305 == 1'd0) & (1'b0 == in_channels_ch3_empty_n)))) | ((1'b1 == ap_enable_reg_pp0_iter5) & (((1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305) & (1'b0 == out_channels_ch1_full_n)) | ((1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305) & (1'b0 == out_channels_ch2_full_n)) | ((1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305) & (1'b0 == out_channels_ch3_full_n)))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_305 == 1'd0) & (1'b0 == in_channels_ch1_empty_n)) | ((exitcond_flatten_reg_305 == 1'd0) & (1'b0 == in_channels_ch2_empty_n)) | ((exitcond_flatten_reg_305 == 1'd0) & (1'b0 == in_channels_ch3_empty_n)))) | ((1'b1 == ap_enable_reg_pp0_iter5) & (((1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305) & (1'b0 == out_channels_ch1_full_n)) | ((1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305) & (1'b0 == out_channels_ch2_full_n)) | ((1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305) & (1'b0 == out_channels_ch3_full_n)))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_305 == 1'd0) & (1'b0 == in_channels_ch1_empty_n)) | ((exitcond_flatten_reg_305 == 1'd0) & (1'b0 == in_channels_ch2_empty_n)) | ((exitcond_flatten_reg_305 == 1'd0) & (1'b0 == in_channels_ch3_empty_n)))) | ((1'b1 == ap_enable_reg_pp0_iter5) & (((1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305) & (1'b0 == out_channels_ch1_full_n)) | ((1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305) & (1'b0 == out_channels_ch2_full_n)) | ((1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305) & (1'b0 == out_channels_ch3_full_n)))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_empty_n) | (1'b0 == U_scale_empty_n) | (1'b0 == V_scale_empty_n) | (1'b0 == in_width_empty_n) | (1'b0 == in_height_empty_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((exitcond_flatten_reg_305 == 1'd0) & (1'b0 == in_channels_ch1_empty_n)) | ((exitcond_flatten_reg_305 == 1'd0) & (1'b0 == in_channels_ch2_empty_n)) | ((exitcond_flatten_reg_305 == 1'd0) & (1'b0 == in_channels_ch3_empty_n)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter5 = (((1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305) & (1'b0 == out_channels_ch1_full_n)) | ((1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305) & (1'b0 == out_channels_ch2_full_n)) | ((1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_305) & (1'b0 == out_channels_ch3_full_n)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound_fu_254_p0 = bound_fu_254_p00;

assign bound_fu_254_p00 = height_reg_280;

assign bound_fu_254_p1 = bound_fu_254_p10;

assign bound_fu_254_p10 = width_reg_275;

assign exitcond_flatten_fu_189_p2 = ((indvar_flatten_reg_163 == bound_reg_300) ? 1'b1 : 1'b0);

assign grp_fu_203_p0 = grp_fu_203_p00;

assign grp_fu_203_p00 = Y_reg_314;

assign grp_fu_203_p1 = tmp_cast_i_reg_285;

assign grp_fu_211_p0 = grp_fu_211_p00;

assign grp_fu_211_p00 = U_reg_319;

assign grp_fu_211_p1 = tmp_1_cast_i_reg_290;

assign grp_fu_219_p0 = grp_fu_219_p00;

assign grp_fu_219_p00 = V_reg_324;

assign grp_fu_219_p1 = tmp_2_cast_i_reg_295;

assign indvar_flatten_next_fu_194_p2 = (indvar_flatten_reg_163 + 32'd1);

assign out_channels_ch1_din = tmp_10_i_reg_344;

assign out_channels_ch2_din = tmp_11_i_reg_349;

assign out_channels_ch3_din = tmp_12_i_reg_354;

assign out_height_din = in_height_dout;

assign out_width_din = in_width_dout;

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

assign tmp_1_cast_i_fu_177_p1 = U_scale_read_reg_265;

assign tmp_2_cast_i_fu_180_p1 = V_scale_read_reg_270;

assign tmp_cast_i_fu_174_p1 = Y_scale_read_reg_260;

always @ (posedge ap_clk) begin
    tmp_cast_i_reg_285[14:8] <= 7'b0000000;
    tmp_1_cast_i_reg_290[14:8] <= 7'b0000000;
    tmp_2_cast_i_reg_295[14:8] <= 7'b0000000;
end

endmodule //yuv_scale
