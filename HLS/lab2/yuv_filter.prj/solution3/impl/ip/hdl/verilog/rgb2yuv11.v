// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rgb2yuv11 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width,
        in_height,
        out_channels_ch1_din,
        out_channels_ch1_full_n,
        out_channels_ch1_write,
        out_channels_ch2_din,
        out_channels_ch2_full_n,
        out_channels_ch2_write,
        out_channels_ch3_din,
        out_channels_ch3_full_n,
        out_channels_ch3_write,
        out_width_din,
        out_width_full_n,
        out_width_write,
        out_height_din,
        out_height_full_n,
        out_height_write,
        Y_scale,
        U_scale,
        V_scale,
        Y_scale_out_din,
        Y_scale_out_full_n,
        Y_scale_out_write,
        U_scale_out_din,
        U_scale_out_full_n,
        U_scale_out_write,
        V_scale_out_din,
        V_scale_out_full_n,
        V_scale_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state11 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width;
input  [15:0] in_height;
output  [7:0] out_channels_ch1_din;
input   out_channels_ch1_full_n;
output   out_channels_ch1_write;
output  [7:0] out_channels_ch2_din;
input   out_channels_ch2_full_n;
output   out_channels_ch2_write;
output  [7:0] out_channels_ch3_din;
input   out_channels_ch3_full_n;
output   out_channels_ch3_write;
output  [15:0] out_width_din;
input   out_width_full_n;
output   out_width_write;
output  [15:0] out_height_din;
input   out_height_full_n;
output   out_height_write;
input  [7:0] Y_scale;
input  [7:0] U_scale;
input  [7:0] V_scale;
output  [7:0] Y_scale_out_din;
input   Y_scale_out_full_n;
output   Y_scale_out_write;
output  [7:0] U_scale_out_din;
input   U_scale_out_full_n;
output   U_scale_out_write;
output  [7:0] V_scale_out_din;
input   V_scale_out_full_n;
output   V_scale_out_write;

reg ap_done;
reg ap_idle;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_write;
reg out_channels_ch2_write;
reg out_channels_ch3_write;
reg out_width_write;
reg out_height_write;
reg Y_scale_out_write;
reg U_scale_out_write;
reg V_scale_out_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    out_channels_ch1_blk_n;
reg    ap_enable_reg_pp0_iter8;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_653;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_653;
reg    out_channels_ch2_blk_n;
reg    out_channels_ch3_blk_n;
reg    out_width_blk_n;
reg    out_height_blk_n;
reg    Y_scale_out_blk_n;
reg    U_scale_out_blk_n;
reg    V_scale_out_blk_n;
reg   [31:0] indvar_flatten_reg_261;
reg   [15:0] x_i_i_reg_272;
reg   [15:0] y_i_i_reg_283;
reg    ap_block_state1;
wire   [31:0] bound_fu_594_p2;
reg   [31:0] bound_reg_648;
wire   [0:0] exitcond_flatten_fu_302_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_state10_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_653;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_653;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_653;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_653;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_653;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_653;
wire   [31:0] indvar_flatten_next_fu_307_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [15:0] y_i_i_mid2_fu_324_p3;
reg   [15:0] y_i_i_mid2_reg_662;
wire   [15:0] tmp_i_i_mid2_v_fu_332_p3;
reg   [15:0] tmp_i_i_mid2_v_reg_668;
wire   [12:0] tmp_22_fu_340_p1;
reg   [12:0] tmp_22_reg_673;
wire   [14:0] tmp_23_fu_344_p1;
reg   [14:0] tmp_23_reg_678;
wire   [22:0] tmp_24_fu_371_p2;
reg   [22:0] tmp_24_reg_683;
wire   [15:0] y_fu_377_p2;
reg    ap_enable_reg_pp0_iter1;
reg   [7:0] R_reg_708;
reg   [7:0] G_reg_714;
reg   [7:0] ap_reg_pp0_iter6_G_reg_714;
reg   [7:0] B_reg_721;
wire   [9:0] tmp_fu_400_p2;
reg   [9:0] tmp_reg_729;
reg   [7:0] tmp_50_i_i_reg_734;
reg   [7:0] ap_reg_pp0_iter7_tmp_50_i_i_reg_734;
(* use_dsp48 = "no" *) wire   [15:0] tmp3_fu_510_p2;
reg   [15:0] tmp3_reg_739;
wire   [13:0] tmp_61_i_i_fu_537_p2;
reg   [13:0] tmp_61_i_i_reg_744;
wire   [14:0] grp_fu_618_p3;
reg   [14:0] tmp_62_i_i_reg_749;
reg    ap_enable_reg_pp0_iter6;
reg   [7:0] tmp_58_i_i_reg_754;
reg   [7:0] tmp_66_i_i_reg_759;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter7;
reg   [15:0] x_i_i_phi_fu_276_p4;
reg   [15:0] y_i_i_phi_fu_287_p4;
wire   [63:0] tmp_26_cast_fu_382_p1;
reg    ap_block_pp0_stage0_flag00001001;
wire   [0:0] exitcond_i_i_fu_319_p2;
wire   [15:0] x_fu_313_p2;
wire   [22:0] p_shl_cast_fu_348_p3;
wire   [22:0] p_shl1_cast_fu_355_p3;
wire   [22:0] tmp_i_i_cast_fu_368_p1;
wire   [22:0] tmp_s_fu_362_p2;
wire   [8:0] p_shl6_i_i_fu_388_p3;
wire   [9:0] p_shl6_cast_i_i_cast_fu_396_p1;
wire   [13:0] p_shl5_i_i_fu_409_p3;
wire   [14:0] p_shl4_i_i_fu_423_p3;
wire   [14:0] tmp_cast_fu_437_p1;
wire   [14:0] p_shl5_cast_i_i_fu_416_p1;
wire   [14:0] tmp_46_i_i_fu_440_p2;
wire   [15:0] p_shl4_cast_i_i_fu_430_p1;
wire   [15:0] tmp_46_cast_i_i_fu_446_p1;
wire   [12:0] grp_fu_600_p3;
wire   [15:0] tmp2_cast_fu_456_p1;
wire   [15:0] tmp1_fu_450_p2;
wire   [15:0] tmp_48_i_i_fu_459_p2;
wire   [14:0] p_shl2_i_i_fu_475_p3;
wire   [11:0] p_shl3_i_i_fu_486_p3;
wire   [15:0] p_shl2_cast_i_i_fu_482_p1;
wire   [15:0] p_shl3_cast_i_i_fu_497_p1;
wire  signed [14:0] grp_fu_609_p3;
wire   [15:0] tmp_53_i_i_fu_501_p2;
wire  signed [15:0] tmp_54_cast_i_i_fu_507_p1;
wire   [12:0] p_shl3_cast7_i_i_fu_493_p1;
wire   [12:0] p_neg_i_i_fu_516_p2;
wire   [8:0] p_shl1_i_i_fu_526_p3;
wire  signed [13:0] p_neg_cast_i_i_fu_522_p1;
wire   [13:0] p_shl1_cast_i_i_fu_533_p1;
wire  signed [15:0] grp_fu_626_p3;
wire   [15:0] tmp_62_cast_i_i_fu_558_p1;
wire  signed [15:0] tmp_61_cast_i_i_fu_555_p1;
wire  signed [15:0] grp_fu_634_p3;
wire   [15:0] bound_fu_594_p0;
wire   [15:0] bound_fu_594_p1;
wire   [5:0] grp_fu_600_p0;
wire   [7:0] grp_fu_600_p1;
wire   [7:0] grp_fu_600_p2;
wire  signed [6:0] grp_fu_609_p0;
wire   [7:0] grp_fu_609_p1;
wire   [14:0] tmp_40_cast14_i_i_fu_406_p1;
wire   [8:0] grp_fu_609_p2;
wire   [7:0] grp_fu_618_p0;
wire   [7:0] grp_fu_618_p1;
wire   [8:0] grp_fu_618_p2;
wire  signed [7:0] grp_fu_626_p0;
wire   [7:0] grp_fu_626_p1;
wire   [15:0] tmp_42_cast11_i_i_fu_543_p1;
wire  signed [7:0] grp_fu_634_p0;
wire   [7:0] grp_fu_634_p1;
wire   [15:0] grp_fu_634_p2;
wire    ap_CS_fsm_state11;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] bound_fu_594_p00;
wire   [31:0] bound_fu_594_p10;
wire   [12:0] grp_fu_600_p10;
wire   [12:0] grp_fu_600_p20;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

yuv_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
yuv_filter_mul_mubkb_U1(
    .din0(bound_fu_594_p0),
    .din1(bound_fu_594_p1),
    .dout(bound_fu_594_p2)
);

yuv_filter_mac_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
yuv_filter_mac_mucud_U2(
    .din0(grp_fu_600_p0),
    .din1(grp_fu_600_p1),
    .din2(grp_fu_600_p2),
    .dout(grp_fu_600_p3)
);

yuv_filter_mac_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 15 ))
yuv_filter_mac_mudEe_U3(
    .din0(grp_fu_609_p0),
    .din1(grp_fu_609_p1),
    .din2(grp_fu_609_p2),
    .dout(grp_fu_609_p3)
);

yuv_filter_mac_mueOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 15 ))
yuv_filter_mac_mueOg_U4(
    .din0(grp_fu_618_p0),
    .din1(grp_fu_618_p1),
    .din2(grp_fu_618_p2),
    .dout(grp_fu_618_p3)
);

yuv_filter_mac_mufYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
yuv_filter_mac_mufYi_U5(
    .din0(grp_fu_626_p0),
    .din1(grp_fu_626_p1),
    .din2(tmp3_reg_739),
    .dout(grp_fu_626_p3)
);

yuv_filter_mac_mufYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
yuv_filter_mac_mufYi_U6(
    .din0(grp_fu_634_p0),
    .din1(grp_fu_634_p1),
    .din2(grp_fu_634_p2),
    .dout(grp_fu_634_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_out_full_n) | (1'b0 == U_scale_out_full_n) | (1'b0 == V_scale_out_full_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_out_full_n) | (1'b0 == U_scale_out_full_n) | (1'b0 == V_scale_out_full_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_302_p2))) begin
        indvar_flatten_reg_261 <= indvar_flatten_next_fu_307_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_out_full_n) | (1'b0 == U_scale_out_full_n) | (1'b0 == V_scale_out_full_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        indvar_flatten_reg_261 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_653 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        x_i_i_reg_272 <= tmp_i_i_mid2_v_reg_668;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_out_full_n) | (1'b0 == U_scale_out_full_n) | (1'b0 == V_scale_out_full_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        x_i_i_reg_272 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_653 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        y_i_i_reg_283 <= y_fu_377_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_out_full_n) | (1'b0 == U_scale_out_full_n) | (1'b0 == V_scale_out_full_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        y_i_i_reg_283 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_653))) begin
        B_reg_721 <= in_channels_ch3_q0;
        G_reg_714 <= in_channels_ch2_q0;
        R_reg_708 <= in_channels_ch1_q0;
        tmp_reg_729[9 : 1] <= tmp_fu_400_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_653 <= exitcond_flatten_reg_653;
        exitcond_flatten_reg_653 <= exitcond_flatten_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_653 <= ap_reg_pp0_iter1_exitcond_flatten_reg_653;
        ap_reg_pp0_iter3_exitcond_flatten_reg_653 <= ap_reg_pp0_iter2_exitcond_flatten_reg_653;
        ap_reg_pp0_iter4_exitcond_flatten_reg_653 <= ap_reg_pp0_iter3_exitcond_flatten_reg_653;
        ap_reg_pp0_iter5_exitcond_flatten_reg_653 <= ap_reg_pp0_iter4_exitcond_flatten_reg_653;
        ap_reg_pp0_iter6_G_reg_714 <= G_reg_714;
        ap_reg_pp0_iter6_exitcond_flatten_reg_653 <= ap_reg_pp0_iter5_exitcond_flatten_reg_653;
        ap_reg_pp0_iter7_exitcond_flatten_reg_653 <= ap_reg_pp0_iter6_exitcond_flatten_reg_653;
        ap_reg_pp0_iter7_tmp_50_i_i_reg_734 <= tmp_50_i_i_reg_734;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_out_full_n) | (1'b0 == U_scale_out_full_n) | (1'b0 == V_scale_out_full_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        bound_reg_648 <= bound_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter5_exitcond_flatten_reg_653))) begin
        tmp3_reg_739 <= tmp3_fu_510_p2;
        tmp_50_i_i_reg_734 <= {{tmp_48_i_i_fu_459_p2[15:8]}};
        tmp_61_i_i_reg_744[13 : 1] <= tmp_61_i_i_fu_537_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_302_p2))) begin
        tmp_22_reg_673 <= tmp_22_fu_340_p1;
        tmp_23_reg_678 <= tmp_23_fu_344_p1;
        y_i_i_mid2_reg_662 <= y_i_i_mid2_fu_324_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_653 == 1'd0))) begin
        tmp_24_reg_683 <= tmp_24_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter6_exitcond_flatten_reg_653))) begin
        tmp_58_i_i_reg_754 <= {{grp_fu_626_p3[15:8]}};
        tmp_66_i_i_reg_759 <= {{grp_fu_634_p3[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter5_exitcond_flatten_reg_653) & (1'b1 == ap_enable_reg_pp0_iter6))) begin
        tmp_62_i_i_reg_749 <= grp_fu_618_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_302_p2))) begin
        tmp_i_i_mid2_v_reg_668 <= tmp_i_i_mid2_v_fu_332_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        U_scale_out_blk_n = U_scale_out_full_n;
    end else begin
        U_scale_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_out_full_n) | (1'b0 == U_scale_out_full_n) | (1'b0 == V_scale_out_full_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        U_scale_out_write = 1'b1;
    end else begin
        U_scale_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        V_scale_out_blk_n = V_scale_out_full_n;
    end else begin
        V_scale_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_out_full_n) | (1'b0 == U_scale_out_full_n) | (1'b0 == V_scale_out_full_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        V_scale_out_write = 1'b1;
    end else begin
        V_scale_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        Y_scale_out_blk_n = Y_scale_out_full_n;
    end else begin
        Y_scale_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_out_full_n) | (1'b0 == U_scale_out_full_n) | (1'b0 == V_scale_out_full_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        Y_scale_out_write = 1'b1;
    end else begin
        Y_scale_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_302_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5)))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5)))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5)))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter8) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0))) begin
        out_channels_ch1_blk_n = out_channels_ch1_full_n;
    end else begin
        out_channels_ch1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter8) & (ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        out_channels_ch1_write = 1'b1;
    end else begin
        out_channels_ch1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter8) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0))) begin
        out_channels_ch2_blk_n = out_channels_ch2_full_n;
    end else begin
        out_channels_ch2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter8) & (ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        out_channels_ch2_write = 1'b1;
    end else begin
        out_channels_ch2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter8) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0))) begin
        out_channels_ch3_blk_n = out_channels_ch3_full_n;
    end else begin
        out_channels_ch3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter8) & (ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        out_channels_ch3_write = 1'b1;
    end else begin
        out_channels_ch3_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        out_height_blk_n = out_height_full_n;
    end else begin
        out_height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_out_full_n) | (1'b0 == U_scale_out_full_n) | (1'b0 == V_scale_out_full_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        out_height_write = 1'b1;
    end else begin
        out_height_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        out_width_blk_n = out_width_full_n;
    end else begin
        out_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_out_full_n) | (1'b0 == U_scale_out_full_n) | (1'b0 == V_scale_out_full_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
        out_width_write = 1'b1;
    end else begin
        out_width_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_653 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        x_i_i_phi_fu_276_p4 = tmp_i_i_mid2_v_reg_668;
    end else begin
        x_i_i_phi_fu_276_p4 = x_i_i_reg_272;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_653 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        y_i_i_phi_fu_287_p4 = y_fu_377_p2;
    end else begin
        y_i_i_phi_fu_287_p4 = y_i_i_reg_283;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_out_full_n) | (1'b0 == U_scale_out_full_n) | (1'b0 == V_scale_out_full_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter8) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_302_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter8) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_302_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign U_scale_out_din = U_scale;

assign V_scale_out_din = V_scale;

assign Y_scale_out_din = Y_scale;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter8) & (((ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0) & (1'b0 == out_channels_ch1_full_n)) | ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0) & (1'b0 == out_channels_ch2_full_n)) | ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0) & (1'b0 == out_channels_ch3_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter8) & (((ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0) & (1'b0 == out_channels_ch1_full_n)) | ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0) & (1'b0 == out_channels_ch2_full_n)) | ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0) & (1'b0 == out_channels_ch3_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter8) & (((ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0) & (1'b0 == out_channels_ch1_full_n)) | ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0) & (1'b0 == out_channels_ch2_full_n)) | ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0) & (1'b0 == out_channels_ch3_full_n))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == Y_scale_out_full_n) | (1'b0 == U_scale_out_full_n) | (1'b0 == V_scale_out_full_n) | (1'b0 == out_width_full_n) | (1'b0 == out_height_full_n));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter8 = (((ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0) & (1'b0 == out_channels_ch1_full_n)) | ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0) & (1'b0 == out_channels_ch2_full_n)) | ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 == 1'd0) & (1'b0 == out_channels_ch3_full_n)));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound_fu_594_p0 = bound_fu_594_p00;

assign bound_fu_594_p00 = in_height;

assign bound_fu_594_p1 = bound_fu_594_p10;

assign bound_fu_594_p10 = in_width;

assign exitcond_flatten_fu_302_p2 = ((indvar_flatten_reg_261 == bound_reg_648) ? 1'b1 : 1'b0);

assign exitcond_i_i_fu_319_p2 = ((y_i_i_phi_fu_287_p4 == in_height) ? 1'b1 : 1'b0);

assign grp_fu_600_p0 = 13'd25;

assign grp_fu_600_p1 = grp_fu_600_p10;

assign grp_fu_600_p10 = B_reg_721;

assign grp_fu_600_p2 = grp_fu_600_p20;

assign grp_fu_600_p20 = G_reg_714;

assign grp_fu_609_p0 = 15'd32730;

assign grp_fu_609_p1 = tmp_40_cast14_i_i_fu_406_p1;

assign grp_fu_609_p2 = 15'd128;

assign grp_fu_618_p0 = 15'd122;

assign grp_fu_618_p1 = tmp_40_cast14_i_i_fu_406_p1;

assign grp_fu_618_p2 = 15'd128;

assign grp_fu_626_p0 = 16'd65462;

assign grp_fu_626_p1 = tmp_42_cast11_i_i_fu_543_p1;

assign grp_fu_634_p0 = 16'd65442;

assign grp_fu_634_p1 = tmp_42_cast11_i_i_fu_543_p1;

assign grp_fu_634_p2 = ($signed(tmp_62_cast_i_i_fu_558_p1) + $signed(tmp_61_cast_i_i_fu_555_p1));

assign in_channels_ch1_address0 = tmp_26_cast_fu_382_p1;

assign in_channels_ch2_address0 = tmp_26_cast_fu_382_p1;

assign in_channels_ch3_address0 = tmp_26_cast_fu_382_p1;

assign indvar_flatten_next_fu_307_p2 = (indvar_flatten_reg_261 + 32'd1);

assign out_channels_ch1_din = (8'd16 + ap_reg_pp0_iter7_tmp_50_i_i_reg_734);

assign out_channels_ch2_din = (tmp_58_i_i_reg_754 ^ 8'd128);

assign out_channels_ch3_din = (tmp_66_i_i_reg_759 ^ 8'd128);

assign out_height_din = in_height;

assign out_width_din = in_width;

assign p_neg_cast_i_i_fu_522_p1 = $signed(p_neg_i_i_fu_516_p2);

assign p_neg_i_i_fu_516_p2 = (13'd0 - p_shl3_cast7_i_i_fu_493_p1);

assign p_shl1_cast_fu_355_p3 = {{tmp_23_reg_678}, {8'd0}};

assign p_shl1_cast_i_i_fu_533_p1 = p_shl1_i_i_fu_526_p3;

assign p_shl1_i_i_fu_526_p3 = {{B_reg_721}, {1'd0}};

assign p_shl2_cast_i_i_fu_482_p1 = p_shl2_i_i_fu_475_p3;

assign p_shl2_i_i_fu_475_p3 = {{B_reg_721}, {7'd0}};

assign p_shl3_cast7_i_i_fu_493_p1 = p_shl3_i_i_fu_486_p3;

assign p_shl3_cast_i_i_fu_497_p1 = p_shl3_i_i_fu_486_p3;

assign p_shl3_i_i_fu_486_p3 = {{B_reg_721}, {4'd0}};

assign p_shl4_cast_i_i_fu_430_p1 = p_shl4_i_i_fu_423_p3;

assign p_shl4_i_i_fu_423_p3 = {{G_reg_714}, {7'd0}};

assign p_shl5_cast_i_i_fu_416_p1 = p_shl5_i_i_fu_409_p3;

assign p_shl5_i_i_fu_409_p3 = {{R_reg_708}, {6'd0}};

assign p_shl6_cast_i_i_cast_fu_396_p1 = p_shl6_i_i_fu_388_p3;

assign p_shl6_i_i_fu_388_p3 = {{in_channels_ch1_q0}, {1'd0}};

assign p_shl_cast_fu_348_p3 = {{tmp_22_reg_673}, {10'd0}};

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

assign tmp1_fu_450_p2 = (p_shl4_cast_i_i_fu_430_p1 + tmp_46_cast_i_i_fu_446_p1);

assign tmp2_cast_fu_456_p1 = grp_fu_600_p3;

assign tmp3_fu_510_p2 = ($signed(tmp_53_i_i_fu_501_p2) + $signed(tmp_54_cast_i_i_fu_507_p1));

assign tmp_22_fu_340_p1 = tmp_i_i_mid2_v_fu_332_p3[12:0];

assign tmp_23_fu_344_p1 = tmp_i_i_mid2_v_fu_332_p3[14:0];

assign tmp_24_fu_371_p2 = (tmp_i_i_cast_fu_368_p1 + tmp_s_fu_362_p2);

assign tmp_26_cast_fu_382_p1 = tmp_24_reg_683;

assign tmp_40_cast14_i_i_fu_406_p1 = R_reg_708;

assign tmp_42_cast11_i_i_fu_543_p1 = ap_reg_pp0_iter6_G_reg_714;

assign tmp_46_cast_i_i_fu_446_p1 = tmp_46_i_i_fu_440_p2;

assign tmp_46_i_i_fu_440_p2 = (tmp_cast_fu_437_p1 + p_shl5_cast_i_i_fu_416_p1);

assign tmp_48_i_i_fu_459_p2 = (tmp2_cast_fu_456_p1 + tmp1_fu_450_p2);

assign tmp_53_i_i_fu_501_p2 = (p_shl2_cast_i_i_fu_482_p1 - p_shl3_cast_i_i_fu_497_p1);

assign tmp_54_cast_i_i_fu_507_p1 = grp_fu_609_p3;

assign tmp_61_cast_i_i_fu_555_p1 = $signed(tmp_61_i_i_reg_744);

assign tmp_61_i_i_fu_537_p2 = ($signed(p_neg_cast_i_i_fu_522_p1) - $signed(p_shl1_cast_i_i_fu_533_p1));

assign tmp_62_cast_i_i_fu_558_p1 = tmp_62_i_i_reg_749;

assign tmp_cast_fu_437_p1 = tmp_reg_729;

assign tmp_fu_400_p2 = (10'd128 + p_shl6_cast_i_i_cast_fu_396_p1);

assign tmp_i_i_cast_fu_368_p1 = y_i_i_mid2_reg_662;

assign tmp_i_i_mid2_v_fu_332_p3 = ((exitcond_i_i_fu_319_p2[0:0] === 1'b1) ? x_fu_313_p2 : x_i_i_phi_fu_276_p4);

assign tmp_s_fu_362_p2 = (p_shl_cast_fu_348_p3 + p_shl1_cast_fu_355_p3);

assign x_fu_313_p2 = (16'd1 + x_i_i_phi_fu_276_p4);

assign y_fu_377_p2 = (16'd1 + y_i_i_mid2_reg_662);

assign y_i_i_mid2_fu_324_p3 = ((exitcond_i_i_fu_319_p2[0:0] === 1'b1) ? 16'd0 : y_i_i_phi_fu_287_p4);

always @ (posedge ap_clk) begin
    tmp_reg_729[0] <= 1'b0;
    tmp_61_i_i_reg_744[0] <= 1'b0;
end

endmodule //rgb2yuv11
