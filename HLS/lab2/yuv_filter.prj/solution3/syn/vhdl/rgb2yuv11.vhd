-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rgb2yuv11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_full_n : IN STD_LOGIC;
    out_channels_ch1_write : OUT STD_LOGIC;
    out_channels_ch2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_full_n : IN STD_LOGIC;
    out_channels_ch2_write : OUT STD_LOGIC;
    out_channels_ch3_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_full_n : IN STD_LOGIC;
    out_channels_ch3_write : OUT STD_LOGIC;
    out_width_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_width_full_n : IN STD_LOGIC;
    out_width_write : OUT STD_LOGIC;
    out_height_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_height_full_n : IN STD_LOGIC;
    out_height_write : OUT STD_LOGIC;
    Y_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    U_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    V_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    Y_scale_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    Y_scale_out_full_n : IN STD_LOGIC;
    Y_scale_out_write : OUT STD_LOGIC;
    U_scale_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    U_scale_out_full_n : IN STD_LOGIC;
    U_scale_out_write : OUT STD_LOGIC;
    V_scale_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    V_scale_out_full_n : IN STD_LOGIC;
    V_scale_out_write : OUT STD_LOGIC );
end;


architecture behav of rgb2yuv11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_80 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";
    constant ap_const_lv15_7FDA : STD_LOGIC_VECTOR (14 downto 0) := "111111111011010";
    constant ap_const_lv15_80 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_const_lv15_7A : STD_LOGIC_VECTOR (14 downto 0) := "000000001111010";
    constant ap_const_lv16_FFB6 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110110110";
    constant ap_const_lv16_FFA2 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110100010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal real_start_status_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal start_once_reg : STD_LOGIC := '0';
    signal start_control_reg : STD_LOGIC := '0';
    signal out_channels_ch1_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond_flatten_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_channels_ch2_blk_n : STD_LOGIC;
    signal out_channels_ch3_blk_n : STD_LOGIC;
    signal out_width_blk_n : STD_LOGIC;
    signal out_height_blk_n : STD_LOGIC;
    signal Y_scale_out_blk_n : STD_LOGIC;
    signal U_scale_out_blk_n : STD_LOGIC;
    signal V_scale_out_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_i_i_reg_272 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_i_i_reg_283 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal bound_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal y_i_i_mid2_fu_324_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_i_i_mid2_reg_662 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_i_mid2_v_fu_332_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_i_mid2_v_reg_668 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_340_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_22_reg_673 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_23_fu_344_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_23_reg_678 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_24_fu_371_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_24_reg_683 : STD_LOGIC_VECTOR (22 downto 0);
    signal y_fu_377_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal R_reg_708 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_714 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter6_G_reg_714 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_721 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_400_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_reg_729 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_50_i_i_reg_734 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter7_tmp_50_i_i_reg_734 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_510_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp3_fu_510_p2 : signal is "no";
    signal tmp3_reg_739 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_61_i_i_fu_537_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_61_i_i_reg_744 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_618_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_62_i_i_reg_749 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal tmp_58_i_i_reg_754 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_i_i_reg_759 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal x_i_i_phi_fu_276_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_i_i_phi_fu_287_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_cast_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal exitcond_i_i_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_313_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_cast_fu_348_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl1_cast_fu_355_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_i_i_cast_fu_368_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_s_fu_362_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl6_i_i_fu_388_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_cast_i_i_cast_fu_396_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_i_i_fu_409_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl4_i_i_fu_423_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_cast_fu_437_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_i_i_fu_416_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_46_i_i_fu_440_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl4_cast_i_i_fu_430_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_46_cast_i_i_fu_446_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_600_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp2_cast_fu_456_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_450_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_48_i_i_fu_459_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl2_i_i_fu_475_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_i_i_fu_486_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_cast_i_i_fu_482_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast_i_i_fu_497_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_609_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_53_i_i_fu_501_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_54_cast_i_i_fu_507_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast7_i_i_fu_493_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_neg_i_i_fu_516_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_i_i_fu_526_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg_cast_i_i_fu_522_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_cast_i_i_fu_533_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_626_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_62_cast_i_i_fu_558_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_61_cast_i_i_fu_555_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_634_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_594_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_594_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_600_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_600_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_600_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_609_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_609_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_cast14_i_i_fu_406_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_609_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_618_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_618_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_618_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_626_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_626_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_cast11_i_i_fu_543_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_634_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_634_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_634_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_594_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_594_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_600_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_600_p20 : STD_LOGIC_VECTOR (12 downto 0);

    component yuv_filter_mul_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component yuv_filter_mac_mucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component yuv_filter_mac_mudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component yuv_filter_mac_mueOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component yuv_filter_mac_mufYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    yuv_filter_mul_mubkb_U1 : component yuv_filter_mul_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bound_fu_594_p0,
        din1 => bound_fu_594_p1,
        dout => bound_fu_594_p2);

    yuv_filter_mac_mucud_U2 : component yuv_filter_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_600_p0,
        din1 => grp_fu_600_p1,
        din2 => grp_fu_600_p2,
        dout => grp_fu_600_p3);

    yuv_filter_mac_mudEe_U3 : component yuv_filter_mac_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_609_p0,
        din1 => grp_fu_609_p1,
        din2 => grp_fu_609_p2,
        dout => grp_fu_609_p3);

    yuv_filter_mac_mueOg_U4 : component yuv_filter_mac_mueOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_618_p0,
        din1 => grp_fu_618_p1,
        din2 => grp_fu_618_p2,
        dout => grp_fu_618_p3);

    yuv_filter_mac_mufYi_U5 : component yuv_filter_mac_mufYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_626_p0,
        din1 => grp_fu_626_p1,
        din2 => tmp3_reg_739,
        dout => grp_fu_626_p3);

    yuv_filter_mac_mufYi_U6 : component yuv_filter_mac_mufYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_634_p0,
        din1 => grp_fu_634_p1,
        din2 => grp_fu_634_p2,
        dout => grp_fu_634_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_out_full_n) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = V_scale_out_full_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_out_full_n) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = V_scale_out_full_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    real_start_status_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                real_start_status_reg <= ap_const_logic_0;
            else
                if ((start_full_n = ap_const_logic_1)) then 
                    real_start_status_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_0 = start_full_n) and (ap_const_logic_1 = internal_ap_ready))) then 
                    real_start_status_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_control_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_control_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = real_start) and ((ap_const_logic_1 = internal_ap_ready) or (ap_const_logic_0 = start_once_reg)))) then 
                    start_control_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = start_control_reg)) then 
                    start_control_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = real_start)) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_0 = ap_start)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_302_p2))) then 
                indvar_flatten_reg_261 <= indvar_flatten_next_fu_307_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_out_full_n) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = V_scale_out_full_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
                indvar_flatten_reg_261 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_i_i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                x_i_i_reg_272 <= tmp_i_i_mid2_v_reg_668;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_out_full_n) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = V_scale_out_full_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
                x_i_i_reg_272 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    y_i_i_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                y_i_i_reg_283 <= y_fu_377_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_out_full_n) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = V_scale_out_full_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
                y_i_i_reg_283 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_653))) then
                B_reg_721 <= in_channels_ch3_q0;
                G_reg_714 <= in_channels_ch2_q0;
                R_reg_708 <= in_channels_ch1_q0;
                    tmp_reg_729(9 downto 1) <= tmp_fu_400_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_653 <= exitcond_flatten_reg_653;
                exitcond_flatten_reg_653 <= exitcond_flatten_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter2_exitcond_flatten_reg_653 <= ap_reg_pp0_iter1_exitcond_flatten_reg_653;
                ap_reg_pp0_iter3_exitcond_flatten_reg_653 <= ap_reg_pp0_iter2_exitcond_flatten_reg_653;
                ap_reg_pp0_iter4_exitcond_flatten_reg_653 <= ap_reg_pp0_iter3_exitcond_flatten_reg_653;
                ap_reg_pp0_iter5_exitcond_flatten_reg_653 <= ap_reg_pp0_iter4_exitcond_flatten_reg_653;
                ap_reg_pp0_iter6_G_reg_714 <= G_reg_714;
                ap_reg_pp0_iter6_exitcond_flatten_reg_653 <= ap_reg_pp0_iter5_exitcond_flatten_reg_653;
                ap_reg_pp0_iter7_exitcond_flatten_reg_653 <= ap_reg_pp0_iter6_exitcond_flatten_reg_653;
                ap_reg_pp0_iter7_tmp_50_i_i_reg_734 <= tmp_50_i_i_reg_734;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_out_full_n) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = V_scale_out_full_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then
                bound_reg_648 <= bound_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter5_exitcond_flatten_reg_653))) then
                tmp3_reg_739 <= tmp3_fu_510_p2;
                tmp_50_i_i_reg_734 <= tmp_48_i_i_fu_459_p2(15 downto 8);
                    tmp_61_i_i_reg_744(13 downto 1) <= tmp_61_i_i_fu_537_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_302_p2))) then
                tmp_22_reg_673 <= tmp_22_fu_340_p1;
                tmp_23_reg_678 <= tmp_23_fu_344_p1;
                y_i_i_mid2_reg_662 <= y_i_i_mid2_fu_324_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_653 = ap_const_lv1_0))) then
                tmp_24_reg_683 <= tmp_24_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter6_exitcond_flatten_reg_653))) then
                tmp_58_i_i_reg_754 <= grp_fu_626_p3(15 downto 8);
                tmp_66_i_i_reg_759 <= grp_fu_634_p3(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter5_exitcond_flatten_reg_653) and (ap_const_logic_1 = ap_enable_reg_pp0_iter6))) then
                tmp_62_i_i_reg_749 <= grp_fu_618_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_302_p2))) then
                tmp_i_i_mid2_v_reg_668 <= tmp_i_i_mid2_v_fu_332_p3;
            end if;
        end if;
    end process;
    tmp_reg_729(0) <= '0';
    tmp_61_i_i_reg_744(0) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_width_full_n, out_height_full_n, Y_scale_out_full_n, U_scale_out_full_n, V_scale_out_full_n, ap_enable_reg_pp0_iter8, exitcond_flatten_fu_302_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_out_full_n) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = V_scale_out_full_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_302_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_302_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    U_scale_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, U_scale_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            U_scale_out_blk_n <= U_scale_out_full_n;
        else 
            U_scale_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    U_scale_out_din <= U_scale;

    U_scale_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_width_full_n, out_height_full_n, Y_scale_out_full_n, U_scale_out_full_n, V_scale_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_out_full_n) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = V_scale_out_full_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
            U_scale_out_write <= ap_const_logic_1;
        else 
            U_scale_out_write <= ap_const_logic_0;
        end if; 
    end process;


    V_scale_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, V_scale_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            V_scale_out_blk_n <= V_scale_out_full_n;
        else 
            V_scale_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    V_scale_out_din <= V_scale;

    V_scale_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_width_full_n, out_height_full_n, Y_scale_out_full_n, U_scale_out_full_n, V_scale_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_out_full_n) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = V_scale_out_full_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
            V_scale_out_write <= ap_const_logic_1;
        else 
            V_scale_out_write <= ap_const_logic_0;
        end if; 
    end process;


    Y_scale_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, Y_scale_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            Y_scale_out_blk_n <= Y_scale_out_full_n;
        else 
            Y_scale_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Y_scale_out_din <= Y_scale;

    Y_scale_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_width_full_n, out_height_full_n, Y_scale_out_full_n, U_scale_out_full_n, V_scale_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_out_full_n) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = V_scale_out_full_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
            Y_scale_out_write <= ap_const_logic_1;
        else 
            Y_scale_out_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, ap_enable_reg_pp0_iter8, ap_reg_pp0_iter7_exitcond_flatten_reg_653)
    begin
                ap_block_pp0_stage0_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (((ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_0 = out_channels_ch1_full_n)) or ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_0 = out_channels_ch2_full_n)) or ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_0 = out_channels_ch3_full_n))));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, ap_enable_reg_pp0_iter8, ap_reg_pp0_iter7_exitcond_flatten_reg_653)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (((ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_0 = out_channels_ch1_full_n)) or ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_0 = out_channels_ch2_full_n)) or ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_0 = out_channels_ch3_full_n))));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, ap_enable_reg_pp0_iter8, ap_reg_pp0_iter7_exitcond_flatten_reg_653)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (((ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_0 = out_channels_ch1_full_n)) or ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_0 = out_channels_ch2_full_n)) or ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_0 = out_channels_ch3_full_n))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, out_width_full_n, out_height_full_n, Y_scale_out_full_n, U_scale_out_full_n, V_scale_out_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_out_full_n) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = V_scale_out_full_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n));
    end process;


    ap_block_state10_pp0_stage0_iter8_assign_proc : process(out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, ap_reg_pp0_iter7_exitcond_flatten_reg_653)
    begin
                ap_block_state10_pp0_stage0_iter8 <= (((ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_0 = out_channels_ch1_full_n)) or ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_0 = out_channels_ch2_full_n)) or ((ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_0 = out_channels_ch3_full_n)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_302_p2)
    begin
        if ((exitcond_flatten_fu_302_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = real_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound_fu_594_p0 <= bound_fu_594_p00(16 - 1 downto 0);
    bound_fu_594_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_height),32));
    bound_fu_594_p1 <= bound_fu_594_p10(16 - 1 downto 0);
    bound_fu_594_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_width),32));
    exitcond_flatten_fu_302_p2 <= "1" when (indvar_flatten_reg_261 = bound_reg_648) else "0";
    exitcond_i_i_fu_319_p2 <= "1" when (y_i_i_phi_fu_287_p4 = in_height) else "0";
    grp_fu_600_p0 <= ap_const_lv13_19(6 - 1 downto 0);
    grp_fu_600_p1 <= grp_fu_600_p10(8 - 1 downto 0);
    grp_fu_600_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_reg_721),13));
    grp_fu_600_p2 <= grp_fu_600_p20(8 - 1 downto 0);
    grp_fu_600_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_reg_714),13));
    grp_fu_609_p0 <= ap_const_lv15_7FDA(7 - 1 downto 0);
    grp_fu_609_p1 <= tmp_40_cast14_i_i_fu_406_p1(8 - 1 downto 0);
    grp_fu_609_p2 <= ap_const_lv15_80(9 - 1 downto 0);
    grp_fu_618_p0 <= ap_const_lv15_7A(8 - 1 downto 0);
    grp_fu_618_p1 <= tmp_40_cast14_i_i_fu_406_p1(8 - 1 downto 0);
    grp_fu_618_p2 <= ap_const_lv15_80(9 - 1 downto 0);
    grp_fu_626_p0 <= ap_const_lv16_FFB6(8 - 1 downto 0);
    grp_fu_626_p1 <= tmp_42_cast11_i_i_fu_543_p1(8 - 1 downto 0);
    grp_fu_634_p0 <= ap_const_lv16_FFA2(8 - 1 downto 0);
    grp_fu_634_p1 <= tmp_42_cast11_i_i_fu_543_p1(8 - 1 downto 0);
    grp_fu_634_p2 <= std_logic_vector(unsigned(tmp_62_cast_i_i_fu_558_p1) + unsigned(tmp_61_cast_i_i_fu_555_p1));
    in_channels_ch1_address0 <= tmp_26_cast_fu_382_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5)))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= tmp_26_cast_fu_382_p1(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5)))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= tmp_26_cast_fu_382_p1(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5)))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_307_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_261) + unsigned(ap_const_lv32_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    out_channels_ch1_blk_n_assign_proc : process(out_channels_ch1_full_n, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_flag00000000, ap_reg_pp0_iter7_exitcond_flatten_reg_653)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0))) then 
            out_channels_ch1_blk_n <= out_channels_ch1_full_n;
        else 
            out_channels_ch1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch1_din <= std_logic_vector(unsigned(ap_const_lv8_10) + unsigned(ap_reg_pp0_iter7_tmp_50_i_i_reg_734));

    out_channels_ch1_write_assign_proc : process(ap_enable_reg_pp0_iter8, ap_reg_pp0_iter7_exitcond_flatten_reg_653, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            out_channels_ch1_write <= ap_const_logic_1;
        else 
            out_channels_ch1_write <= ap_const_logic_0;
        end if; 
    end process;


    out_channels_ch2_blk_n_assign_proc : process(out_channels_ch2_full_n, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_flag00000000, ap_reg_pp0_iter7_exitcond_flatten_reg_653)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0))) then 
            out_channels_ch2_blk_n <= out_channels_ch2_full_n;
        else 
            out_channels_ch2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch2_din <= (tmp_58_i_i_reg_754 xor ap_const_lv8_80);

    out_channels_ch2_write_assign_proc : process(ap_enable_reg_pp0_iter8, ap_reg_pp0_iter7_exitcond_flatten_reg_653, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            out_channels_ch2_write <= ap_const_logic_1;
        else 
            out_channels_ch2_write <= ap_const_logic_0;
        end if; 
    end process;


    out_channels_ch3_blk_n_assign_proc : process(out_channels_ch3_full_n, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_flag00000000, ap_reg_pp0_iter7_exitcond_flatten_reg_653)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0))) then 
            out_channels_ch3_blk_n <= out_channels_ch3_full_n;
        else 
            out_channels_ch3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch3_din <= (tmp_66_i_i_reg_759 xor ap_const_lv8_80);

    out_channels_ch3_write_assign_proc : process(ap_enable_reg_pp0_iter8, ap_reg_pp0_iter7_exitcond_flatten_reg_653, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_reg_pp0_iter7_exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            out_channels_ch3_write <= ap_const_logic_1;
        else 
            out_channels_ch3_write <= ap_const_logic_0;
        end if; 
    end process;


    out_height_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_height_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            out_height_blk_n <= out_height_full_n;
        else 
            out_height_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_height_din <= in_height;

    out_height_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_width_full_n, out_height_full_n, Y_scale_out_full_n, U_scale_out_full_n, V_scale_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_out_full_n) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = V_scale_out_full_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
            out_height_write <= ap_const_logic_1;
        else 
            out_height_write <= ap_const_logic_0;
        end if; 
    end process;


    out_width_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_width_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            out_width_blk_n <= out_width_full_n;
        else 
            out_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_width_din <= in_width;

    out_width_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_width_full_n, out_height_full_n, Y_scale_out_full_n, U_scale_out_full_n, V_scale_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Y_scale_out_full_n) or (ap_const_logic_0 = U_scale_out_full_n) or (ap_const_logic_0 = V_scale_out_full_n) or (ap_const_logic_0 = out_width_full_n) or (ap_const_logic_0 = out_height_full_n))))) then 
            out_width_write <= ap_const_logic_1;
        else 
            out_width_write <= ap_const_logic_0;
        end if; 
    end process;

        p_neg_cast_i_i_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_neg_i_i_fu_516_p2),14));

    p_neg_i_i_fu_516_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(p_shl3_cast7_i_i_fu_493_p1));
    p_shl1_cast_fu_355_p3 <= (tmp_23_reg_678 & ap_const_lv8_0);
    p_shl1_cast_i_i_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_i_i_fu_526_p3),14));
    p_shl1_i_i_fu_526_p3 <= (B_reg_721 & ap_const_lv1_0);
    p_shl2_cast_i_i_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_i_i_fu_475_p3),16));
    p_shl2_i_i_fu_475_p3 <= (B_reg_721 & ap_const_lv7_0);
    p_shl3_cast7_i_i_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_i_i_fu_486_p3),13));
    p_shl3_cast_i_i_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_i_i_fu_486_p3),16));
    p_shl3_i_i_fu_486_p3 <= (B_reg_721 & ap_const_lv4_0);
    p_shl4_cast_i_i_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_i_i_fu_423_p3),16));
    p_shl4_i_i_fu_423_p3 <= (G_reg_714 & ap_const_lv7_0);
    p_shl5_cast_i_i_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_i_i_fu_409_p3),15));
    p_shl5_i_i_fu_409_p3 <= (R_reg_708 & ap_const_lv6_0);
    p_shl6_cast_i_i_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_i_i_fu_388_p3),10));
    p_shl6_i_i_fu_388_p3 <= (in_channels_ch1_q0 & ap_const_lv1_0);
    p_shl_cast_fu_348_p3 <= (tmp_22_reg_673 & ap_const_lv10_0);

    real_start_assign_proc : process(ap_start, real_start_status_reg)
    begin
        if ((ap_const_logic_1 = real_start_status_reg)) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;
    start_write <= (ap_start and start_control_reg);
    tmp1_fu_450_p2 <= std_logic_vector(unsigned(p_shl4_cast_i_i_fu_430_p1) + unsigned(tmp_46_cast_i_i_fu_446_p1));
    tmp2_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_600_p3),16));
    tmp3_fu_510_p2 <= std_logic_vector(unsigned(tmp_53_i_i_fu_501_p2) + unsigned(tmp_54_cast_i_i_fu_507_p1));
    tmp_22_fu_340_p1 <= tmp_i_i_mid2_v_fu_332_p3(13 - 1 downto 0);
    tmp_23_fu_344_p1 <= tmp_i_i_mid2_v_fu_332_p3(15 - 1 downto 0);
    tmp_24_fu_371_p2 <= std_logic_vector(unsigned(tmp_i_i_cast_fu_368_p1) + unsigned(tmp_s_fu_362_p2));
    tmp_26_cast_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_reg_683),64));
    tmp_40_cast14_i_i_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(R_reg_708),15));
    tmp_42_cast11_i_i_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter6_G_reg_714),16));
    tmp_46_cast_i_i_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_i_i_fu_440_p2),16));
    tmp_46_i_i_fu_440_p2 <= std_logic_vector(unsigned(tmp_cast_fu_437_p1) + unsigned(p_shl5_cast_i_i_fu_416_p1));
    tmp_48_i_i_fu_459_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_456_p1) + unsigned(tmp1_fu_450_p2));
    tmp_53_i_i_fu_501_p2 <= std_logic_vector(unsigned(p_shl2_cast_i_i_fu_482_p1) - unsigned(p_shl3_cast_i_i_fu_497_p1));
        tmp_54_cast_i_i_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_609_p3),16));

        tmp_61_cast_i_i_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_61_i_i_reg_744),16));

    tmp_61_i_i_fu_537_p2 <= std_logic_vector(signed(p_neg_cast_i_i_fu_522_p1) - signed(p_shl1_cast_i_i_fu_533_p1));
    tmp_62_cast_i_i_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_i_i_reg_749),16));
    tmp_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_729),15));
    tmp_fu_400_p2 <= std_logic_vector(unsigned(ap_const_lv10_80) + unsigned(p_shl6_cast_i_i_cast_fu_396_p1));
    tmp_i_i_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_i_i_mid2_reg_662),23));
    tmp_i_i_mid2_v_fu_332_p3 <= 
        x_fu_313_p2 when (exitcond_i_i_fu_319_p2(0) = '1') else 
        x_i_i_phi_fu_276_p4;
    tmp_s_fu_362_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_348_p3) + unsigned(p_shl1_cast_fu_355_p3));
    x_fu_313_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(x_i_i_phi_fu_276_p4));

    x_i_i_phi_fu_276_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_653, x_i_i_reg_272, ap_CS_fsm_pp0_stage0, tmp_i_i_mid2_v_reg_668, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            x_i_i_phi_fu_276_p4 <= tmp_i_i_mid2_v_reg_668;
        else 
            x_i_i_phi_fu_276_p4 <= x_i_i_reg_272;
        end if; 
    end process;

    y_fu_377_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(y_i_i_mid2_reg_662));
    y_i_i_mid2_fu_324_p3 <= 
        ap_const_lv16_0 when (exitcond_i_i_fu_319_p2(0) = '1') else 
        y_i_i_phi_fu_287_p4;

    y_i_i_phi_fu_287_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_653, y_i_i_reg_283, ap_CS_fsm_pp0_stage0, y_fu_377_p2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            y_i_i_phi_fu_287_p4 <= y_fu_377_p2;
        else 
            y_i_i_phi_fu_287_p4 <= y_i_i_reg_283;
        end if; 
    end process;

end behav;
