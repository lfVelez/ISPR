-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv2rgb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch1_empty_n : IN STD_LOGIC;
    in_channels_ch1_read : OUT STD_LOGIC;
    in_channels_ch2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_empty_n : IN STD_LOGIC;
    in_channels_ch2_read : OUT STD_LOGIC;
    in_channels_ch3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_empty_n : IN STD_LOGIC;
    in_channels_ch3_read : OUT STD_LOGIC;
    in_width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_width_empty_n : IN STD_LOGIC;
    in_width_read : OUT STD_LOGIC;
    in_height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_empty_n : IN STD_LOGIC;
    in_height_read : OUT STD_LOGIC;
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_width : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_width_ap_vld : OUT STD_LOGIC;
    out_height : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_height_ap_vld : OUT STD_LOGIC );
end;


architecture behav of yuv2rgb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv17_1FF30 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100110000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv18_12A : STD_LOGIC_VECTOR (17 downto 0) := "000000000100101010";
    constant ap_const_lv18_80 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_const_lv16_FF9C : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011100";
    constant ap_const_lv18_199 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110011001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_channels_ch1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond_flatten_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_channels_ch2_blk_n : STD_LOGIC;
    signal in_channels_ch3_blk_n : STD_LOGIC;
    signal in_width_blk_n : STD_LOGIC;
    signal in_height_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_213 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_224 : STD_LOGIC_VECTOR (15 downto 0);
    signal width_reg_602 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal height_reg_608 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_flatten_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal y_mid2_fu_263_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_mid2_reg_629 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_mid2_v_fu_271_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_mid2_v_reg_635 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_279_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_reg_640 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_fu_283_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_reg_645 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_310_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_s_reg_650 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_reg_pp0_iter2_tmp_s_reg_650 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_reg_pp0_iter3_tmp_s_reg_650 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_reg_pp0_iter4_tmp_s_reg_650 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_reg_pp0_iter5_tmp_s_reg_650 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_reg_pp0_iter6_tmp_s_reg_650 : STD_LOGIC_VECTOR (22 downto 0);
    signal Y_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_Y_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_Y_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter4_Y_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal U_reg_660 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_U_reg_660 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_U_reg_660 : STD_LOGIC_VECTOR (7 downto 0);
    signal E_fu_316_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal E_reg_665 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_E_reg_665 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_E_reg_665 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter4_E_reg_665 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter5_E_reg_665 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_1_fu_322_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal D_fu_336_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_681 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_reg_688 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_574_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_5_reg_693 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal tmp_13_fu_353_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_13_fu_353_p2 : signal is "no";
    signal tmp_13_reg_699 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_14_reg_705 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_17_fu_390_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_17_reg_710 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_19_fu_400_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_19_reg_715 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_20_reg_720 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_594_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_6_reg_725 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal icmp_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_731 : STD_LOGIC_VECTOR (0 downto 0);
    signal G_fu_469_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_737 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_fu_517_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_742 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal x_phi_fu_217_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_phi_fu_228_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_cast_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_252_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast_fu_294_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl2_cast_fu_287_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_7_fu_301_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_cast_fu_307_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_330_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_586_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp1_cast_fu_350_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_fu_368_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl1_fu_379_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_375_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl1_cast_fu_386_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_20_cast_fu_344_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_35_cast_fu_396_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_8_fu_419_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp1_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp2_fu_455_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp2_fu_446_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_477_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 of tmp_18_fu_477_p2 : signal is "no";
    signal icmp2_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_486_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp3_fu_503_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp3_fu_493_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_531_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp_fu_547_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_fu_538_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_568_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_568_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_574_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_574_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_574_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_574_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_586_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_594_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_330_ce : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_568_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_568_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_574_p10 : STD_LOGIC_VECTOR (8 downto 0);

    component yuv_filter_mul_9shbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component yuv_filter_mul_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component yuv_filter_ama_adibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_mujbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component yuv_filter_mac_mukbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    yuv_filter_mul_9shbi_U40 : component yuv_filter_mul_9shbi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_330_p0,
        din1 => E_reg_665,
        ce => grp_fu_330_ce,
        dout => grp_fu_330_p2);

    yuv_filter_mul_mubkb_x_U41 : component yuv_filter_mul_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bound_fu_568_p0,
        din1 => bound_fu_568_p1,
        dout => bound_fu_568_p2);

    yuv_filter_ama_adibs_U42 : component yuv_filter_ama_adibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        din2_WIDTH => 10,
        din3_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_574_p0,
        din1 => grp_fu_574_p1,
        din2 => grp_fu_574_p2,
        din3 => grp_fu_574_p3,
        dout => grp_fu_574_p4);

    yuv_filter_mac_mujbC_U43 : component yuv_filter_mac_mujbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_586_p0,
        din1 => D_reg_681,
        din2 => tmp_12_reg_688,
        dout => grp_fu_586_p3);

    yuv_filter_mac_mukbM_U44 : component yuv_filter_mac_mukbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_594_p0,
        din1 => ap_reg_pp0_iter5_E_reg_665,
        din2 => tmp_5_reg_693,
        dout => grp_fu_594_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_241_p2))) then 
                indvar_flatten_reg_202 <= indvar_flatten_next_fu_246_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_202 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_620 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                x_reg_213 <= tmp_mid2_v_reg_635;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                x_reg_213 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    y_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_620 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                y_reg_224 <= y_1_fu_322_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                y_reg_224 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter5_exitcond_flatten_reg_620))) then
                B_reg_742 <= B_fu_517_p3;
                G_reg_737 <= G_fu_469_p3;
                icmp_reg_731 <= icmp_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_620))) then
                D_reg_681 <= D_fu_336_p2;
                tmp_12_reg_688 <= grp_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_620 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                E_reg_665 <= E_fu_316_p2;
                U_reg_660 <= in_channels_ch2_dout;
                Y_reg_655 <= in_channels_ch1_dout;
                tmp_s_reg_650 <= tmp_s_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_620 <= exitcond_flatten_reg_620;
                exitcond_flatten_reg_620 <= exitcond_flatten_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter2_E_reg_665 <= E_reg_665;
                ap_reg_pp0_iter2_U_reg_660 <= U_reg_660;
                ap_reg_pp0_iter2_Y_reg_655 <= Y_reg_655;
                ap_reg_pp0_iter2_exitcond_flatten_reg_620 <= ap_reg_pp0_iter1_exitcond_flatten_reg_620;
                ap_reg_pp0_iter2_tmp_s_reg_650 <= tmp_s_reg_650;
                ap_reg_pp0_iter3_E_reg_665 <= ap_reg_pp0_iter2_E_reg_665;
                ap_reg_pp0_iter3_U_reg_660 <= ap_reg_pp0_iter2_U_reg_660;
                ap_reg_pp0_iter3_Y_reg_655 <= ap_reg_pp0_iter2_Y_reg_655;
                ap_reg_pp0_iter3_exitcond_flatten_reg_620 <= ap_reg_pp0_iter2_exitcond_flatten_reg_620;
                ap_reg_pp0_iter3_tmp_s_reg_650 <= ap_reg_pp0_iter2_tmp_s_reg_650;
                ap_reg_pp0_iter4_E_reg_665 <= ap_reg_pp0_iter3_E_reg_665;
                ap_reg_pp0_iter4_Y_reg_655 <= ap_reg_pp0_iter3_Y_reg_655;
                ap_reg_pp0_iter4_exitcond_flatten_reg_620 <= ap_reg_pp0_iter3_exitcond_flatten_reg_620;
                ap_reg_pp0_iter4_tmp_s_reg_650 <= ap_reg_pp0_iter3_tmp_s_reg_650;
                ap_reg_pp0_iter5_E_reg_665 <= ap_reg_pp0_iter4_E_reg_665;
                ap_reg_pp0_iter5_exitcond_flatten_reg_620 <= ap_reg_pp0_iter4_exitcond_flatten_reg_620;
                ap_reg_pp0_iter5_tmp_s_reg_650 <= ap_reg_pp0_iter4_tmp_s_reg_650;
                ap_reg_pp0_iter6_exitcond_flatten_reg_620 <= ap_reg_pp0_iter5_exitcond_flatten_reg_620;
                ap_reg_pp0_iter6_tmp_s_reg_650 <= ap_reg_pp0_iter5_tmp_s_reg_650;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound_reg_615 <= bound_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = in_width_empty_n) or (ap_const_logic_0 = in_height_empty_n))))) then
                height_reg_608 <= in_height_dout;
                width_reg_602 <= in_width_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_620))) then
                tmp_13_reg_699 <= tmp_13_fu_353_p2;
                tmp_14_reg_705 <= tmp_13_fu_353_p2(17 downto 16);
                    tmp_17_reg_710(17 downto 2) <= tmp_17_fu_390_p2(17 downto 2);
                tmp_19_reg_715 <= tmp_19_fu_400_p2;
                tmp_20_reg_720 <= tmp_19_fu_400_p2(18 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_241_p2))) then
                tmp_1_reg_645 <= tmp_1_fu_283_p1;
                tmp_reg_640 <= tmp_fu_279_p1;
                y_mid2_reg_629 <= y_mid2_fu_263_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_620))) then
                tmp_5_reg_693 <= grp_fu_574_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter6) and (ap_const_lv1_0 = ap_reg_pp0_iter5_exitcond_flatten_reg_620))) then
                tmp_6_reg_725 <= grp_fu_594_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_241_p2))) then
                tmp_mid2_v_reg_635 <= tmp_mid2_v_fu_271_p3;
            end if;
        end if;
    end process;
    tmp_17_reg_710(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_width_empty_n, in_height_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_fu_241_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = in_width_empty_n) or (ap_const_logic_0 = in_height_empty_n))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_241_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_241_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    B_fu_517_p3 <= 
        p_phitmp3_fu_503_p3 when (tmp_22_fu_511_p2(0) = '1') else 
        phitmp3_fu_493_p4;
    D_fu_336_p2 <= (ap_reg_pp0_iter3_U_reg_660 xor ap_const_lv8_80);
    E_fu_316_p2 <= (in_channels_ch3_dout xor ap_const_lv8_80);
    G_fu_469_p3 <= 
        p_phitmp2_fu_455_p3 when (tmp_16_fu_463_p2(0) = '1') else 
        phitmp2_fu_446_p4;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00011001_assign_proc : process(in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_620)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((exitcond_flatten_reg_620 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch1_empty_n)) or ((exitcond_flatten_reg_620 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch2_empty_n)) or ((exitcond_flatten_reg_620 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch3_empty_n))));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_620)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((exitcond_flatten_reg_620 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch1_empty_n)) or ((exitcond_flatten_reg_620 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch2_empty_n)) or ((exitcond_flatten_reg_620 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch3_empty_n))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, in_width_empty_n, in_height_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = in_width_empty_n) or (ap_const_logic_0 = in_height_empty_n));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n, exitcond_flatten_reg_620)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((exitcond_flatten_reg_620 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch1_empty_n)) or ((exitcond_flatten_reg_620 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch2_empty_n)) or ((exitcond_flatten_reg_620 = ap_const_lv1_0) and (ap_const_logic_0 = in_channels_ch3_empty_n)));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_flatten_fu_241_p2)
    begin
        if ((exitcond_flatten_fu_241_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_568_p0 <= bound_fu_568_p00(16 - 1 downto 0);
    bound_fu_568_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_reg_608),32));
    bound_fu_568_p1 <= bound_fu_568_p10(16 - 1 downto 0);
    bound_fu_568_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_reg_602),32));
    exitcond_flatten_fu_241_p2 <= "1" when (indvar_flatten_reg_202 = bound_reg_615) else "0";
    exitcond_fu_258_p2 <= "1" when (y_phi_fu_228_p4 = height_reg_608) else "0";

    grp_fu_330_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_330_ce <= ap_const_logic_1;
        else 
            grp_fu_330_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_330_p0 <= ap_const_lv17_1FF30(9 - 1 downto 0);
    grp_fu_574_p0 <= ap_const_lv9_1F0(5 - 1 downto 0);
    grp_fu_574_p1 <= grp_fu_574_p10(8 - 1 downto 0);
    grp_fu_574_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter4_Y_reg_655),9));
    grp_fu_574_p2 <= ap_const_lv18_12A(10 - 1 downto 0);
    grp_fu_574_p3 <= ap_const_lv18_80(9 - 1 downto 0);
    grp_fu_586_p0 <= ap_const_lv16_FF9C(8 - 1 downto 0);
    grp_fu_594_p0 <= ap_const_lv18_199(10 - 1 downto 0);
    icmp1_fu_434_p2 <= "1" when (tmp_14_reg_705 = ap_const_lv2_1) else "0";
    icmp2_fu_481_p2 <= "1" when (signed(tmp_20_reg_720) > signed(ap_const_lv3_0)) else "0";
    icmp_fu_428_p2 <= "1" when (tmp_8_fu_419_p4 = ap_const_lv2_1) else "0";

    in_channels_ch1_blk_n_assign_proc : process(in_channels_ch1_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_620)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_620 = ap_const_lv1_0))) then 
            in_channels_ch1_blk_n <= in_channels_ch1_empty_n;
        else 
            in_channels_ch1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_channels_ch1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_620, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_620 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            in_channels_ch1_read <= ap_const_logic_1;
        else 
            in_channels_ch1_read <= ap_const_logic_0;
        end if; 
    end process;


    in_channels_ch2_blk_n_assign_proc : process(in_channels_ch2_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_620)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_620 = ap_const_lv1_0))) then 
            in_channels_ch2_blk_n <= in_channels_ch2_empty_n;
        else 
            in_channels_ch2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_channels_ch2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_620, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_620 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            in_channels_ch2_read <= ap_const_logic_1;
        else 
            in_channels_ch2_read <= ap_const_logic_0;
        end if; 
    end process;


    in_channels_ch3_blk_n_assign_proc : process(in_channels_ch3_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_620)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_620 = ap_const_lv1_0))) then 
            in_channels_ch3_blk_n <= in_channels_ch3_empty_n;
        else 
            in_channels_ch3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_channels_ch3_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_620, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_620 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            in_channels_ch3_read <= ap_const_logic_1;
        else 
            in_channels_ch3_read <= ap_const_logic_0;
        end if; 
    end process;


    in_height_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_height_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            in_height_blk_n <= in_height_empty_n;
        else 
            in_height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_height_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_width_empty_n, in_height_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = in_width_empty_n) or (ap_const_logic_0 = in_height_empty_n))))) then 
            in_height_read <= ap_const_logic_1;
        else 
            in_height_read <= ap_const_logic_0;
        end if; 
    end process;


    in_width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_width_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            in_width_blk_n <= in_width_empty_n;
        else 
            in_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_width_empty_n, in_height_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = in_width_empty_n) or (ap_const_logic_0 = in_height_empty_n))))) then 
            in_width_read <= ap_const_logic_1;
        else 
            in_width_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_246_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_202) + unsigned(ap_const_lv32_1));
    out_channels_ch1_address0 <= tmp_15_cast_fu_525_p1(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8)))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= 
        p_phitmp_fu_547_p3 when (tmp_10_fu_554_p2(0) = '1') else 
        phitmp_fu_538_p4;

    out_channels_ch1_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter6_exitcond_flatten_reg_620, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter6_exitcond_flatten_reg_620) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= tmp_15_cast_fu_525_p1(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8)))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= G_reg_737;

    out_channels_ch2_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter6_exitcond_flatten_reg_620, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter6_exitcond_flatten_reg_620) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= tmp_15_cast_fu_525_p1(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8)))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= B_reg_742;

    out_channels_ch3_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter6_exitcond_flatten_reg_620, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter6_exitcond_flatten_reg_620) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_height <= height_reg_608;

    out_height_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_height_ap_vld <= ap_const_logic_1;
        else 
            out_height_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_width <= width_reg_602;

    out_width_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_width_ap_vld <= ap_const_logic_1;
        else 
            out_width_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_phitmp2_fu_455_p3 <= 
        ap_const_lv8_FF when (icmp1_fu_434_p2(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp3_fu_503_p3 <= 
        ap_const_lv8_FF when (icmp2_fu_481_p2(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp_fu_547_p3 <= 
        ap_const_lv8_FF when (icmp_reg_731(0) = '1') else 
        ap_const_lv8_0;
        p_shl1_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl1_fu_379_p3),18));

    p_shl1_fu_379_p3 <= (D_reg_681 & ap_const_lv2_0);
    p_shl2_cast_fu_287_p3 <= (tmp_reg_640 & ap_const_lv10_0);
    p_shl3_cast_fu_294_p3 <= (tmp_1_reg_645 & ap_const_lv8_0);
        p_shl_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_fu_368_p3),18));

    p_shl_fu_368_p3 <= (D_reg_681 & ap_const_lv9_0);
    phitmp2_fu_446_p4 <= tmp_13_reg_699(15 downto 8);
    phitmp3_fu_493_p4 <= tmp_18_fu_477_p2(15 downto 8);
    phitmp_fu_538_p4 <= tmp_6_reg_725(15 downto 8);
        tmp1_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_586_p3),18));

    tmp_10_fu_554_p2 <= (icmp_reg_731 or tmp_9_fu_531_p3);
    tmp_13_fu_353_p2 <= std_logic_vector(signed(tmp1_cast_fu_350_p1) + signed(grp_fu_574_p4));
    tmp_15_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter6_tmp_s_reg_650),64));
    tmp_15_fu_439_p3 <= tmp_13_reg_699(17 downto 17);
    tmp_16_fu_463_p2 <= (icmp1_fu_434_p2 or tmp_15_fu_439_p3);
    tmp_17_fu_390_p2 <= std_logic_vector(signed(p_shl_cast_fu_375_p1) + signed(p_shl1_cast_fu_386_p1));
    tmp_18_fu_477_p2 <= std_logic_vector(unsigned(tmp_17_reg_710) + unsigned(tmp_5_reg_693));
    tmp_19_fu_400_p2 <= std_logic_vector(signed(tmp_20_cast_fu_344_p1) + signed(tmp_35_cast_fu_396_p1));
    tmp_1_fu_283_p1 <= tmp_mid2_v_fu_271_p3(15 - 1 downto 0);
        tmp_20_cast_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_574_p4),19));

    tmp_21_fu_486_p3 <= tmp_19_reg_715(18 downto 18);
    tmp_22_fu_511_p2 <= (icmp2_fu_481_p2 or tmp_21_fu_486_p3);
        tmp_35_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_390_p2),19));

    tmp_7_fu_301_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_294_p3) + unsigned(p_shl2_cast_fu_287_p3));
    tmp_8_fu_419_p4 <= grp_fu_594_p3(17 downto 16);
    tmp_9_fu_531_p3 <= tmp_6_reg_725(17 downto 17);
    tmp_cast_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_mid2_reg_629),23));
    tmp_fu_279_p1 <= tmp_mid2_v_fu_271_p3(13 - 1 downto 0);
    tmp_mid2_v_fu_271_p3 <= 
        x_1_fu_252_p2 when (exitcond_fu_258_p2(0) = '1') else 
        x_phi_fu_217_p4;
    tmp_s_fu_310_p2 <= std_logic_vector(unsigned(tmp_7_fu_301_p2) + unsigned(tmp_cast_fu_307_p1));
    x_1_fu_252_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(x_phi_fu_217_p4));

    x_phi_fu_217_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_620, x_reg_213, tmp_mid2_v_reg_635)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_620 = ap_const_lv1_0))) then 
            x_phi_fu_217_p4 <= tmp_mid2_v_reg_635;
        else 
            x_phi_fu_217_p4 <= x_reg_213;
        end if; 
    end process;

    y_1_fu_322_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(y_mid2_reg_629));
    y_mid2_fu_263_p3 <= 
        ap_const_lv16_0 when (exitcond_fu_258_p2(0) = '1') else 
        y_phi_fu_228_p4;

    y_phi_fu_228_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_620, y_reg_224, y_1_fu_322_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_620 = ap_const_lv1_0))) then 
            y_phi_fu_228_p4 <= y_1_fu_322_p2;
        else 
            y_phi_fu_228_p4 <= y_reg_224;
        end if; 
    end process;

end behav;
