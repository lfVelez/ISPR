// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _yuv_scale_HH_
#define _yuv_scale_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "yuv_filter_mul_8ng8j.h"
#include "yuv_filter_mul_mubkb.h"

namespace ap_rtl {

struct yuv_scale : public sc_module {
    // Port declarations 49
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<8> > in_channels_ch1_dout;
    sc_in< sc_logic > in_channels_ch1_empty_n;
    sc_out< sc_logic > in_channels_ch1_read;
    sc_in< sc_lv<8> > in_channels_ch2_dout;
    sc_in< sc_logic > in_channels_ch2_empty_n;
    sc_out< sc_logic > in_channels_ch2_read;
    sc_in< sc_lv<8> > in_channels_ch3_dout;
    sc_in< sc_logic > in_channels_ch3_empty_n;
    sc_out< sc_logic > in_channels_ch3_read;
    sc_in< sc_lv<16> > in_width_dout;
    sc_in< sc_logic > in_width_empty_n;
    sc_out< sc_logic > in_width_read;
    sc_in< sc_lv<16> > in_height_dout;
    sc_in< sc_logic > in_height_empty_n;
    sc_out< sc_logic > in_height_read;
    sc_out< sc_lv<8> > out_channels_ch1_din;
    sc_in< sc_logic > out_channels_ch1_full_n;
    sc_out< sc_logic > out_channels_ch1_write;
    sc_out< sc_lv<8> > out_channels_ch2_din;
    sc_in< sc_logic > out_channels_ch2_full_n;
    sc_out< sc_logic > out_channels_ch2_write;
    sc_out< sc_lv<8> > out_channels_ch3_din;
    sc_in< sc_logic > out_channels_ch3_full_n;
    sc_out< sc_logic > out_channels_ch3_write;
    sc_out< sc_lv<16> > out_width_din;
    sc_in< sc_logic > out_width_full_n;
    sc_out< sc_logic > out_width_write;
    sc_out< sc_lv<16> > out_height_din;
    sc_in< sc_logic > out_height_full_n;
    sc_out< sc_logic > out_height_write;
    sc_in< sc_lv<8> > Y_scale_dout;
    sc_in< sc_logic > Y_scale_empty_n;
    sc_out< sc_logic > Y_scale_read;
    sc_in< sc_lv<8> > U_scale_dout;
    sc_in< sc_logic > U_scale_empty_n;
    sc_out< sc_logic > U_scale_read;
    sc_in< sc_lv<8> > V_scale_dout;
    sc_in< sc_logic > V_scale_empty_n;
    sc_out< sc_logic > V_scale_read;


    // Module declarations
    yuv_scale(sc_module_name name);
    SC_HAS_PROCESS(yuv_scale);

    ~yuv_scale();

    sc_trace_file* mVcdFile;

    yuv_filter_mul_8ng8j<1,3,8,8,15>* yuv_filter_mul_8ng8j_U23;
    yuv_filter_mul_8ng8j<1,3,8,8,15>* yuv_filter_mul_8ng8j_U24;
    yuv_filter_mul_8ng8j<1,3,8,8,15>* yuv_filter_mul_8ng8j_U25;
    yuv_filter_mul_mubkb<1,1,16,16,32>* yuv_filter_mul_mubkb_x_U26;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > real_start_status_reg;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > start_control_reg;
    sc_signal< sc_logic > in_channels_ch1_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_305;
    sc_signal< sc_logic > in_channels_ch2_blk_n;
    sc_signal< sc_logic > in_channels_ch3_blk_n;
    sc_signal< sc_logic > in_width_blk_n;
    sc_signal< sc_logic > in_height_blk_n;
    sc_signal< sc_logic > out_channels_ch1_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter4_exitcond_flatten_reg_305;
    sc_signal< sc_logic > out_channels_ch2_blk_n;
    sc_signal< sc_logic > out_channels_ch3_blk_n;
    sc_signal< sc_logic > out_width_blk_n;
    sc_signal< sc_logic > out_height_blk_n;
    sc_signal< sc_logic > Y_scale_blk_n;
    sc_signal< sc_logic > U_scale_blk_n;
    sc_signal< sc_logic > V_scale_blk_n;
    sc_signal< sc_lv<32> > indvar_flatten_reg_163;
    sc_signal< sc_lv<8> > Y_scale_read_reg_260;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<8> > U_scale_read_reg_265;
    sc_signal< sc_lv<8> > V_scale_read_reg_270;
    sc_signal< sc_lv<16> > width_reg_275;
    sc_signal< sc_lv<16> > height_reg_280;
    sc_signal< sc_lv<15> > tmp_cast_i_fu_174_p1;
    sc_signal< sc_lv<15> > tmp_cast_i_reg_285;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<15> > tmp_1_cast_i_fu_177_p1;
    sc_signal< sc_lv<15> > tmp_1_cast_i_reg_290;
    sc_signal< sc_lv<15> > tmp_2_cast_i_fu_180_p1;
    sc_signal< sc_lv<15> > tmp_2_cast_i_reg_295;
    sc_signal< sc_lv<32> > bound_fu_254_p2;
    sc_signal< sc_lv<32> > bound_reg_300;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_189_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter5;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_flatten_reg_305;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter2_exitcond_flatten_reg_305;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter3_exitcond_flatten_reg_305;
    sc_signal< sc_lv<32> > indvar_flatten_next_fu_194_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<8> > Y_reg_314;
    sc_signal< sc_lv<8> > U_reg_319;
    sc_signal< sc_lv<8> > V_reg_324;
    sc_signal< sc_lv<8> > tmp_10_i_reg_344;
    sc_signal< sc_lv<8> > tmp_11_i_reg_349;
    sc_signal< sc_lv<8> > tmp_12_i_reg_354;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_flag00001001;
    sc_signal< sc_lv<8> > grp_fu_203_p0;
    sc_signal< sc_lv<8> > grp_fu_203_p1;
    sc_signal< sc_lv<8> > grp_fu_211_p0;
    sc_signal< sc_lv<8> > grp_fu_211_p1;
    sc_signal< sc_lv<8> > grp_fu_219_p0;
    sc_signal< sc_lv<8> > grp_fu_219_p1;
    sc_signal< sc_lv<15> > grp_fu_203_p2;
    sc_signal< sc_lv<15> > grp_fu_211_p2;
    sc_signal< sc_lv<15> > grp_fu_219_p2;
    sc_signal< sc_lv<16> > bound_fu_254_p0;
    sc_signal< sc_lv<16> > bound_fu_254_p1;
    sc_signal< sc_logic > grp_fu_203_ce;
    sc_signal< sc_logic > grp_fu_211_ce;
    sc_signal< sc_logic > grp_fu_219_ce;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<32> > bound_fu_254_p00;
    sc_signal< sc_lv<32> > bound_fu_254_p10;
    sc_signal< sc_lv<15> > grp_fu_203_p00;
    sc_signal< sc_lv<15> > grp_fu_211_p00;
    sc_signal< sc_lv<15> > grp_fu_219_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state9;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_U_scale_blk_n();
    void thread_U_scale_read();
    void thread_V_scale_blk_n();
    void thread_V_scale_read();
    void thread_Y_scale_blk_n();
    void thread_Y_scale_read();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00001001();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_block_state6_pp0_stage0_iter3();
    void thread_ap_block_state7_pp0_stage0_iter4();
    void thread_ap_block_state8_pp0_stage0_iter5();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_bound_fu_254_p0();
    void thread_bound_fu_254_p00();
    void thread_bound_fu_254_p1();
    void thread_bound_fu_254_p10();
    void thread_exitcond_flatten_fu_189_p2();
    void thread_grp_fu_203_ce();
    void thread_grp_fu_203_p0();
    void thread_grp_fu_203_p00();
    void thread_grp_fu_203_p1();
    void thread_grp_fu_211_ce();
    void thread_grp_fu_211_p0();
    void thread_grp_fu_211_p00();
    void thread_grp_fu_211_p1();
    void thread_grp_fu_219_ce();
    void thread_grp_fu_219_p0();
    void thread_grp_fu_219_p00();
    void thread_grp_fu_219_p1();
    void thread_in_channels_ch1_blk_n();
    void thread_in_channels_ch1_read();
    void thread_in_channels_ch2_blk_n();
    void thread_in_channels_ch2_read();
    void thread_in_channels_ch3_blk_n();
    void thread_in_channels_ch3_read();
    void thread_in_height_blk_n();
    void thread_in_height_read();
    void thread_in_width_blk_n();
    void thread_in_width_read();
    void thread_indvar_flatten_next_fu_194_p2();
    void thread_internal_ap_ready();
    void thread_out_channels_ch1_blk_n();
    void thread_out_channels_ch1_din();
    void thread_out_channels_ch1_write();
    void thread_out_channels_ch2_blk_n();
    void thread_out_channels_ch2_din();
    void thread_out_channels_ch2_write();
    void thread_out_channels_ch3_blk_n();
    void thread_out_channels_ch3_din();
    void thread_out_channels_ch3_write();
    void thread_out_height_blk_n();
    void thread_out_height_din();
    void thread_out_height_write();
    void thread_out_width_blk_n();
    void thread_out_width_din();
    void thread_out_width_write();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_1_cast_i_fu_177_p1();
    void thread_tmp_2_cast_i_fu_180_p1();
    void thread_tmp_cast_i_fu_174_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
