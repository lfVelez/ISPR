

================================================================
== Vivado HLS Report for 'rgb2yuv'
================================================================
* Date:           Thu May 13 18:22:38 2021

* Version:        2017.1 (Build 1846317 on Fri Apr 14 19:19:38 MDT 2017)
* Project:        yuv_filter.prj
* Solution:       solution2
* Product family: zynq
* Target device:  xc7z010clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   8.00|      9.34|        1.00|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-------+---------+-------+---------+---------+
    |     Latency     |     Interval    | Pipeline|
    |  min  |   max   |  min  |   max   |   Type  |
    +-------+---------+-------+---------+---------+
    |  40012|  2457612|  40012|  2457612|   none  |
    +-------+---------+-------+---------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------------------------+-------+---------+----------+-----------+-----------+-----------------+----------+
        |                                 |     Latency     | Iteration|  Initiation Interval  |       Trip      |          |
        |            Loop Name            |  min  |   max   |  Latency |  achieved |   target  |      Count      | Pipelined|
        +---------------------------------+-------+---------+----------+-----------+-----------+-----------------+----------+
        |- RGB2YUV_LOOP_X_RGB2YUV_LOOP_Y  |  40010|  2457610|        12|          1|          1| 40000 ~ 2457600 |    yes   |
        +---------------------------------+-------+---------+----------+-----------+-----------+-----------------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 12


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 14
* Pipeline: 1
  Pipeline-0: II = 1, D = 12, States = { 2 3 4 5 6 7 8 9 10 11 12 13 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	14  / (exitcond_flatten)
	3  / (!exitcond_flatten)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	2  / true
14 --> 
* FSM state operations: 

 <State 1>: 6.38ns
ST_1: in_height_read11 (9)  [1/1] 0.00ns
:0  %in_height_read11 = call i16 @_ssdm_op_Read.ap_auto.i16(i16 %in_height_read)

ST_1: in_width_read_3 (10)  [1/1] 0.00ns
:1  %in_width_read_3 = call i16 @_ssdm_op_Read.ap_auto.i16(i16 %in_width_read)

ST_1: cast (11)  [1/1] 0.00ns
:2  %cast = zext i16 %in_width_read_3 to i32

ST_1: cast1 (12)  [1/1] 0.00ns
:3  %cast1 = zext i16 %in_height_read11 to i32

ST_1: bound (13)  [1/1] 6.38ns
:4  %bound = mul i32 %cast1, %cast

ST_1: StgValue_20 (14)  [1/1] 1.77ns  loc: yuv_filter.c:49
:5  br label %1


 <State 2>: 5.10ns
ST_2: indvar_flatten (16)  [1/1] 0.00ns
:0  %indvar_flatten = phi i32 [ 0, %0 ], [ %indvar_flatten_next, %.reset ]

ST_2: x (17)  [1/1] 0.00ns  loc: yuv_filter.c:54
:1  %x = phi i16 [ 0, %0 ], [ %tmp_mid2_v, %.reset ]

ST_2: y (18)  [1/1] 0.00ns
:2  %y = phi i16 [ 0, %0 ], [ %y_3, %.reset ]

ST_2: exitcond_flatten (19)  [1/1] 3.26ns
:3  %exitcond_flatten = icmp eq i32 %indvar_flatten, %bound

ST_2: indvar_flatten_next (20)  [1/1] 3.44ns
:4  %indvar_flatten_next = add i32 %indvar_flatten, 1

ST_2: StgValue_26 (21)  [1/1] 0.00ns
:5  br i1 %exitcond_flatten, label %2, label %.reset

ST_2: x_3 (23)  [1/1] 2.96ns  loc: yuv_filter.c:49
.reset:0  %x_3 = add i16 1, %x

ST_2: exitcond9 (26)  [1/1] 3.03ns  loc: yuv_filter.c:52
.reset:3  %exitcond9 = icmp eq i16 %y, %in_height_read11

ST_2: y_mid2 (27)  [1/1] 2.07ns  loc: yuv_filter.c:52
.reset:4  %y_mid2 = select i1 %exitcond9, i16 0, i16 %y

ST_2: tmp_mid2_v (28)  [1/1] 2.07ns  loc: yuv_filter.c:54
.reset:5  %tmp_mid2_v = select i1 %exitcond9, i16 %x_3, i16 %x

ST_2: tmp (29)  [1/1] 0.00ns  loc: yuv_filter.c:54
.reset:6  %tmp = trunc i16 %tmp_mid2_v to i13

ST_2: tmp_21 (31)  [1/1] 0.00ns  loc: yuv_filter.c:54
.reset:8  %tmp_21 = trunc i16 %tmp_mid2_v to i15


 <State 3>: 4.11ns
ST_3: p_shl_cast (30)  [1/1] 0.00ns  loc: yuv_filter.c:54
.reset:7  %p_shl_cast = call i23 @_ssdm_op_BitConcatenate.i23.i13.i10(i13 %tmp, i10 0)

ST_3: p_shl7_cast (32)  [1/1] 0.00ns  loc: yuv_filter.c:54
.reset:9  %p_shl7_cast = call i23 @_ssdm_op_BitConcatenate.i23.i15.i8(i15 %tmp_21, i8 0)

ST_3: tmp_s (33)  [1/1] 2.05ns  loc: yuv_filter.c:54
.reset:10  %tmp_s = add i23 %p_shl_cast, %p_shl7_cast

ST_3: tmp_cast (37)  [1/1] 0.00ns  loc: yuv_filter.c:54
.reset:14  %tmp_cast = zext i16 %y_mid2 to i23

ST_3: tmp_20 (38)  [1/1] 2.05ns  loc: yuv_filter.c:54
.reset:15  %tmp_20 = add i23 %tmp_cast, %tmp_s

ST_3: y_3 (102)  [1/1] 2.96ns  loc: yuv_filter.c:52
.reset:79  %y_3 = add i16 1, %y_mid2


 <State 4>: 3.25ns
ST_4: tmp_42_cast (39)  [1/1] 0.00ns  loc: yuv_filter.c:54
.reset:16  %tmp_42_cast = zext i23 %tmp_20 to i64

ST_4: in_channels_ch1_addr (40)  [1/1] 0.00ns  loc: yuv_filter.c:54
.reset:17  %in_channels_ch1_addr = getelementptr [2457600 x i8]* %in_channels_ch1, i64 0, i64 %tmp_42_cast

ST_4: in_channels_ch2_addr (41)  [1/1] 0.00ns  loc: yuv_filter.c:55
.reset:18  %in_channels_ch2_addr = getelementptr [2457600 x i8]* %in_channels_ch2, i64 0, i64 %tmp_42_cast

ST_4: R (46)  [4/4] 3.25ns  loc: yuv_filter.c:54
.reset:23  %R = load i8* %in_channels_ch1_addr, align 1

ST_4: G (47)  [4/4] 3.25ns  loc: yuv_filter.c:55
.reset:24  %G = load i8* %in_channels_ch2_addr, align 1


 <State 5>: 3.25ns
ST_5: R (46)  [3/4] 3.25ns  loc: yuv_filter.c:54
.reset:23  %R = load i8* %in_channels_ch1_addr, align 1

ST_5: G (47)  [3/4] 3.25ns  loc: yuv_filter.c:55
.reset:24  %G = load i8* %in_channels_ch2_addr, align 1


 <State 6>: 3.25ns
ST_6: in_channels_ch3_addr (42)  [1/1] 0.00ns  loc: yuv_filter.c:56
.reset:19  %in_channels_ch3_addr = getelementptr [2457600 x i8]* %in_channels_ch3, i64 0, i64 %tmp_42_cast

ST_6: R (46)  [2/4] 3.25ns  loc: yuv_filter.c:54
.reset:23  %R = load i8* %in_channels_ch1_addr, align 1

ST_6: G (47)  [2/4] 3.25ns  loc: yuv_filter.c:55
.reset:24  %G = load i8* %in_channels_ch2_addr, align 1

ST_6: B (48)  [4/4] 3.25ns  loc: yuv_filter.c:56
.reset:25  %B = load i8* %in_channels_ch3_addr, align 1


 <State 7>: 3.25ns
ST_7: R (46)  [1/4] 3.25ns  loc: yuv_filter.c:54
.reset:23  %R = load i8* %in_channels_ch1_addr, align 1

ST_7: G (47)  [1/4] 3.25ns  loc: yuv_filter.c:55
.reset:24  %G = load i8* %in_channels_ch2_addr, align 1

ST_7: B (48)  [3/4] 3.25ns  loc: yuv_filter.c:56
.reset:25  %B = load i8* %in_channels_ch3_addr, align 1


 <State 8>: 5.51ns
ST_8: B (48)  [2/4] 3.25ns  loc: yuv_filter.c:56
.reset:25  %B = load i8* %in_channels_ch3_addr, align 1

ST_8: tmp_40_cast1 (49)  [1/1] 0.00ns  loc: yuv_filter.c:57
.reset:26  %tmp_40_cast1 = zext i8 %R to i16

ST_8: tmp_42_cast1 (55)  [1/1] 0.00ns  loc: yuv_filter.c:57
.reset:32  %tmp_42_cast1 = zext i8 %G to i16

ST_8: tmp_26 (73)  [3/3] 5.51ns  loc: yuv_filter.c:58
.reset:50  %tmp_26 = mul i16 -74, %tmp_42_cast1

ST_8: tmp_30 (85)  [3/3] 5.51ns  loc: yuv_filter.c:59
.reset:62  %tmp_30 = mul i16 122, %tmp_40_cast1


 <State 9>: 5.51ns
ST_9: B (48)  [1/4] 3.25ns  loc: yuv_filter.c:56
.reset:25  %B = load i8* %in_channels_ch3_addr, align 1

ST_9: tmp_42_cast2 (56)  [1/1] 0.00ns  loc: yuv_filter.c:57
.reset:33  %tmp_42_cast2 = zext i8 %G to i9

ST_9: tmp4 (64)  [1/1] 2.82ns  loc: yuv_filter.c:57
.reset:41  %tmp4 = add i9 128, %tmp_42_cast2

ST_9: tmp_26 (73)  [2/3] 5.51ns  loc: yuv_filter.c:58
.reset:50  %tmp_26 = mul i16 -74, %tmp_42_cast1

ST_9: tmp_30 (85)  [2/3] 5.51ns  loc: yuv_filter.c:59
.reset:62  %tmp_30 = mul i16 122, %tmp_40_cast1


 <State 10>: 8.33ns
ST_10: p_shl5 (51)  [1/1] 0.00ns  loc: yuv_filter.c:57
.reset:28  %p_shl5 = call i14 @_ssdm_op_BitConcatenate.i14.i8.i6(i8 %R, i6 0)

ST_10: p_shl5_cast (52)  [1/1] 0.00ns  loc: yuv_filter.c:57
.reset:29  %p_shl5_cast = zext i14 %p_shl5 to i15

ST_10: p_shl6 (53)  [1/1] 0.00ns  loc: yuv_filter.c:57
.reset:30  %p_shl6 = call i9 @_ssdm_op_BitConcatenate.i9.i8.i1(i8 %R, i1 false)

ST_10: p_shl6_cast (54)  [1/1] 0.00ns  loc: yuv_filter.c:57
.reset:31  %p_shl6_cast = zext i9 %p_shl6 to i15

ST_10: p_shl4 (57)  [1/1] 0.00ns  loc: yuv_filter.c:57
.reset:34  %p_shl4 = call i15 @_ssdm_op_BitConcatenate.i15.i8.i7(i8 %G, i7 0)

ST_10: p_shl4_cast (58)  [1/1] 0.00ns  loc: yuv_filter.c:57
.reset:35  %p_shl4_cast = zext i15 %p_shl4 to i16

ST_10: tmp_44_cast1 (59)  [1/1] 0.00ns  loc: yuv_filter.c:57
.reset:36  %tmp_44_cast1 = zext i8 %B to i13

ST_10: tmp_22 (60)  [1/1] 3.36ns  loc: yuv_filter.c:57
.reset:37  %tmp_22 = mul i13 25, %tmp_44_cast1

ST_10: tmp2 (61)  [1/1] 2.92ns  loc: yuv_filter.c:57
.reset:38  %tmp2 = add i15 %p_shl6_cast, %p_shl5_cast

ST_10: tmp2_cast (62)  [1/1] 0.00ns  loc: yuv_filter.c:57
.reset:39  %tmp2_cast = zext i15 %tmp2 to i16

ST_10: tmp1 (63)  [1/1] 1.95ns  loc: yuv_filter.c:57
.reset:40  %tmp1 = add i16 %tmp2_cast, %p_shl4_cast

ST_10: tmp4_cast (65)  [1/1] 0.00ns  loc: yuv_filter.c:57
.reset:42  %tmp4_cast = zext i9 %tmp4 to i13

ST_10: tmp3 (66)  [1/1] 3.02ns  loc: yuv_filter.c:57
.reset:43  %tmp3 = add i13 %tmp4_cast, %tmp_22

ST_10: tmp3_cast (67)  [1/1] 0.00ns  loc: yuv_filter.c:57
.reset:44  %tmp3_cast = zext i13 %tmp3 to i16

ST_10: tmp_23 (68)  [1/1] 1.95ns  loc: yuv_filter.c:57
.reset:45  %tmp_23 = add i16 %tmp3_cast, %tmp1

ST_10: tmp_24 (69)  [1/1] 0.00ns  loc: yuv_filter.c:57
.reset:46  %tmp_24 = call i8 @_ssdm_op_PartSelect.i8.i16.i32.i32(i16 %tmp_23, i32 8, i32 15)

ST_10: tmp_26 (73)  [1/3] 5.51ns  loc: yuv_filter.c:58
.reset:50  %tmp_26 = mul i16 -74, %tmp_42_cast1

ST_10: p_shl2 (74)  [1/1] 0.00ns  loc: yuv_filter.c:58
.reset:51  %p_shl2 = call i15 @_ssdm_op_BitConcatenate.i15.i8.i7(i8 %B, i7 0)

ST_10: p_shl2_cast (75)  [1/1] 0.00ns  loc: yuv_filter.c:58
.reset:52  %p_shl2_cast = zext i15 %p_shl2 to i16

ST_10: p_shl3 (76)  [1/1] 0.00ns  loc: yuv_filter.c:58
.reset:53  %p_shl3 = call i12 @_ssdm_op_BitConcatenate.i12.i8.i4(i8 %B, i4 0)

ST_10: p_shl3_cast9 (77)  [1/1] 0.00ns  loc: yuv_filter.c:58
.reset:54  %p_shl3_cast9 = zext i12 %p_shl3 to i13

ST_10: p_shl3_cast (78)  [1/1] 0.00ns  loc: yuv_filter.c:58
.reset:55  %p_shl3_cast = zext i12 %p_shl3 to i16

ST_10: tmp_27 (79)  [1/1] 2.94ns  loc: yuv_filter.c:58
.reset:56  %tmp_27 = sub i16 %p_shl2_cast, %p_shl3_cast

ST_10: tmp_30 (85)  [1/3] 5.51ns  loc: yuv_filter.c:59
.reset:62  %tmp_30 = mul i16 122, %tmp_40_cast1

ST_10: p_neg (87)  [1/1] 2.88ns  loc: yuv_filter.c:58
.reset:64  %p_neg = sub i13 0, %p_shl3_cast9

ST_10: p_neg_cast (88)  [1/1] 0.00ns  loc: yuv_filter.c:58
.reset:65  %p_neg_cast = sext i13 %p_neg to i14

ST_10: p_shl1 (89)  [1/1] 0.00ns  loc: yuv_filter.c:59
.reset:66  %p_shl1 = call i9 @_ssdm_op_BitConcatenate.i9.i8.i1(i8 %B, i1 false)

ST_10: p_shl1_cast (90)  [1/1] 0.00ns  loc: yuv_filter.c:59
.reset:67  %p_shl1_cast = zext i9 %p_shl1 to i14

ST_10: tmp_32 (91)  [1/1] 1.92ns  loc: yuv_filter.c:59
.reset:68  %tmp_32 = sub i14 %p_neg_cast, %p_shl1_cast

ST_10: tmp8 (93)  [1/1] 1.92ns  loc: yuv_filter.c:59
.reset:70  %tmp8 = add i14 128, %tmp_32


 <State 11>: 9.34ns
ST_11: out_channels_ch1_add (43)  [1/1] 0.00ns  loc: yuv_filter.c:60
.reset:20  %out_channels_ch1_add = getelementptr [2457600 x i8]* %out_channels_ch1, i64 0, i64 %tmp_42_cast

ST_11: tmp_40_cast2 (50)  [1/1] 0.00ns  loc: yuv_filter.c:57
.reset:27  %tmp_40_cast2 = zext i8 %R to i15

ST_11: Y (70)  [1/1] 2.80ns  loc: yuv_filter.c:57
.reset:47  %Y = add i8 16, %tmp_24

ST_11: tmp_25 (71)  [1/1] 3.36ns  loc: yuv_filter.c:58
.reset:48  %tmp_25 = mul i15 -38, %tmp_40_cast2

ST_11: tmp_51_cast (72)  [1/1] 0.00ns  loc: yuv_filter.c:58
.reset:49  %tmp_51_cast = sext i15 %tmp_25 to i16

ST_11: tmp5 (80)  [1/1] 3.02ns  loc: yuv_filter.c:58
.reset:57  %tmp5 = add i16 %tmp_51_cast, %tmp_26

ST_11: tmp6 (81)  [1/1] 1.95ns  loc: yuv_filter.c:58
.reset:58  %tmp6 = add i16 128, %tmp_27

ST_11: tmp_28 (82)  [1/1] 1.95ns  loc: yuv_filter.c:58
.reset:59  %tmp_28 = add i16 %tmp6, %tmp5

ST_11: tmp_29 (83)  [1/1] 0.00ns  loc: yuv_filter.c:58
.reset:60  %tmp_29 = call i8 @_ssdm_op_PartSelect.i8.i16.i32.i32(i16 %tmp_28, i32 8, i32 15)

ST_11: tmp_31 (86)  [1/1] 3.36ns  loc: yuv_filter.c:59
.reset:63  %tmp_31 = mul i16 -94, %tmp_42_cast1

ST_11: tmp7 (92)  [1/1] 3.02ns  loc: yuv_filter.c:59
.reset:69  %tmp7 = add i16 %tmp_30, %tmp_31

ST_11: tmp8_cast (94)  [1/1] 0.00ns  loc: yuv_filter.c:59
.reset:71  %tmp8_cast = sext i14 %tmp8 to i16

ST_11: tmp_33 (95)  [1/1] 2.96ns  loc: yuv_filter.c:59
.reset:72  %tmp_33 = add i16 %tmp8_cast, %tmp7

ST_11: tmp_34 (96)  [1/1] 0.00ns  loc: yuv_filter.c:59
.reset:73  %tmp_34 = call i8 @_ssdm_op_PartSelect.i8.i16.i32.i32(i16 %tmp_33, i32 8, i32 15)

ST_11: StgValue_107 (98)  [2/2] 3.25ns  loc: yuv_filter.c:60
.reset:75  store i8 %Y, i8* %out_channels_ch1_add, align 1


 <State 12>: 5.32ns
ST_12: out_channels_ch2_add (44)  [1/1] 0.00ns  loc: yuv_filter.c:61
.reset:21  %out_channels_ch2_add = getelementptr [2457600 x i8]* %out_channels_ch2, i64 0, i64 %tmp_42_cast

ST_12: out_channels_ch3_add (45)  [1/1] 0.00ns  loc: yuv_filter.c:62
.reset:22  %out_channels_ch3_add = getelementptr [2457600 x i8]* %out_channels_ch3, i64 0, i64 %tmp_42_cast

ST_12: U (84)  [1/1] 2.07ns  loc: yuv_filter.c:58
.reset:61  %U = xor i8 %tmp_29, -128

ST_12: V (97)  [1/1] 2.07ns  loc: yuv_filter.c:59
.reset:74  %V = xor i8 %tmp_34, -128

ST_12: StgValue_112 (98)  [1/2] 3.25ns  loc: yuv_filter.c:60
.reset:75  store i8 %Y, i8* %out_channels_ch1_add, align 1

ST_12: StgValue_113 (99)  [2/2] 3.25ns  loc: yuv_filter.c:61
.reset:76  store i8 %U, i8* %out_channels_ch2_add, align 1

ST_12: StgValue_114 (100)  [2/2] 3.25ns  loc: yuv_filter.c:62
.reset:77  store i8 %V, i8* %out_channels_ch3_add, align 1


 <State 13>: 3.25ns
ST_13: StgValue_115 (24)  [1/1] 0.00ns
.reset:1  call void (...)* @_ssdm_op_SpecLoopName([30 x i8]* @RGB2YUV_LOOP_X_RGB2Y)

ST_13: StgValue_116 (25)  [1/1] 0.00ns
.reset:2  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 40000, i64 2457600, i64 784400)

ST_13: StgValue_117 (34)  [1/1] 0.00ns  loc: yuv_filter.c:52
.reset:11  call void (...)* @_ssdm_op_SpecLoopName([15 x i8]* @p_str2) nounwind

ST_13: tmp_19 (35)  [1/1] 0.00ns  loc: yuv_filter.c:52
.reset:12  %tmp_19 = call i32 (...)* @_ssdm_op_SpecRegionBegin([15 x i8]* @p_str2)

ST_13: StgValue_119 (36)  [1/1] 0.00ns  loc: yuv_filter.c:53
.reset:13  call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind

ST_13: StgValue_120 (99)  [1/2] 3.25ns  loc: yuv_filter.c:61
.reset:76  store i8 %U, i8* %out_channels_ch2_add, align 1

ST_13: StgValue_121 (100)  [1/2] 3.25ns  loc: yuv_filter.c:62
.reset:77  store i8 %V, i8* %out_channels_ch3_add, align 1

ST_13: empty (101)  [1/1] 0.00ns  loc: yuv_filter.c:63
.reset:78  %empty = call i32 (...)* @_ssdm_op_SpecRegionEnd([15 x i8]* @p_str2, i32 %tmp_19)

ST_13: StgValue_123 (103)  [1/1] 0.00ns  loc: yuv_filter.c:52
.reset:80  br label %1


 <State 14>: 0.00ns
ST_14: mrv (105)  [1/1] 0.00ns  loc: yuv_filter.c:65
:0  %mrv = insertvalue { i16, i16 } undef, i16 %in_width_read_3, 0

ST_14: mrv_1 (106)  [1/1] 0.00ns  loc: yuv_filter.c:65
:1  %mrv_1 = insertvalue { i16, i16 } %mrv, i16 %in_height_read11, 1

ST_14: StgValue_126 (107)  [1/1] 0.00ns  loc: yuv_filter.c:65
:2  ret { i16, i16 } %mrv_1



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 8ns, clock uncertainty: 1ns.

 <State 1>: 6.38ns
The critical path consists of the following:
	wire read on port 'in_height_read' [9]  (0 ns)
	'mul' operation ('bound') [13]  (6.38 ns)

 <State 2>: 5.1ns
The critical path consists of the following:
	'phi' operation ('y') with incoming values : ('y', yuv_filter.c:52) [18]  (0 ns)
	'icmp' operation ('exitcond9', yuv_filter.c:52) [26]  (3.03 ns)
	'select' operation ('y_mid2', yuv_filter.c:52) [27]  (2.07 ns)

 <State 3>: 4.11ns
The critical path consists of the following:
	'add' operation ('tmp_s', yuv_filter.c:54) [33]  (2.05 ns)
	'add' operation ('tmp_20', yuv_filter.c:54) [38]  (2.05 ns)

 <State 4>: 3.25ns
The critical path consists of the following:
	'getelementptr' operation ('in_channels_ch1_addr', yuv_filter.c:54) [40]  (0 ns)
	'load' operation ('R', yuv_filter.c:54) on array 'in_channels_ch1' [46]  (3.25 ns)

 <State 5>: 3.25ns
The critical path consists of the following:
	'load' operation ('R', yuv_filter.c:54) on array 'in_channels_ch1' [46]  (3.25 ns)

 <State 6>: 3.25ns
The critical path consists of the following:
	'getelementptr' operation ('in_channels_ch3_addr', yuv_filter.c:56) [42]  (0 ns)
	'load' operation ('B', yuv_filter.c:56) on array 'in_channels_ch3' [48]  (3.25 ns)

 <State 7>: 3.25ns
The critical path consists of the following:
	'load' operation ('R', yuv_filter.c:54) on array 'in_channels_ch1' [46]  (3.25 ns)

 <State 8>: 5.51ns
The critical path consists of the following:
	'mul' operation ('tmp_30', yuv_filter.c:59) [85]  (5.51 ns)

 <State 9>: 5.51ns
The critical path consists of the following:
	'mul' operation ('tmp_26', yuv_filter.c:58) [73]  (5.51 ns)

 <State 10>: 8.33ns
The critical path consists of the following:
	'mul' operation ('tmp_22', yuv_filter.c:57) [60]  (3.36 ns)
	'add' operation ('tmp3', yuv_filter.c:57) [66]  (3.02 ns)
	'add' operation ('tmp_23', yuv_filter.c:57) [68]  (1.95 ns)

 <State 11>: 9.34ns
The critical path consists of the following:
	'mul' operation ('tmp_31', yuv_filter.c:59) [86]  (3.36 ns)
	'add' operation ('tmp7', yuv_filter.c:59) [92]  (3.02 ns)
	'add' operation ('tmp_33', yuv_filter.c:59) [95]  (2.96 ns)

 <State 12>: 5.32ns
The critical path consists of the following:
	'xor' operation ('U', yuv_filter.c:58) [84]  (2.07 ns)
	'store' operation (yuv_filter.c:61) of variable 'U', yuv_filter.c:58 on array 'out_channels_ch2' [99]  (3.25 ns)

 <State 13>: 3.25ns
The critical path consists of the following:
	'store' operation (yuv_filter.c:61) of variable 'U', yuv_filter.c:58 on array 'out_channels_ch2' [99]  (3.25 ns)

 <State 14>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
