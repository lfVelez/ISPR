-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rgb2yuv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width_read : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of rgb2yuv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_FFB6 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110110110";
    constant ap_const_lv16_7A : STD_LOGIC_VECTOR (15 downto 0) := "0000000001111010";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_80 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";
    constant ap_const_lv15_7FDA : STD_LOGIC_VECTOR (14 downto 0) := "111111111011010";
    constant ap_const_lv16_FFA2 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110100010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_201 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_212 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_551_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_flatten_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_flatten_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal y_mid2_fu_253_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_mid2_reg_606 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_mid2_v_fu_261_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_mid2_v_reg_612 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_269_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_reg_617 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_21_fu_273_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_21_reg_622 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_20_fu_300_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_20_reg_627 : STD_LOGIC_VECTOR (22 downto 0);
    signal y_3_fu_306_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_42_cast_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_cast_reg_637 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter3_tmp_42_cast_reg_637 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter4_tmp_42_cast_reg_637 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter5_tmp_42_cast_reg_637 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter6_tmp_42_cast_reg_637 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter7_tmp_42_cast_reg_637 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter8_tmp_42_cast_reg_637 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter9_tmp_42_cast_reg_637 : STD_LOGIC_VECTOR (63 downto 0);
    signal R_reg_660 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter6_R_reg_660 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter7_R_reg_660 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter8_R_reg_660 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_668 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter6_G_reg_668 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter7_G_reg_668 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_cast1_fu_319_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_cast1_reg_680 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter7_tmp_42_cast1_reg_680 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter8_tmp_42_cast1_reg_680 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_686 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_337_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_reg_694 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_24_reg_699 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_322_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_reg_704 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_443_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_reg_709 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_reg_714 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_fu_476_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp8_reg_719 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_29_reg_734 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_reg_739 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal x_phi_fu_205_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal y_phi_fu_216_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond9_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_3_fu_242_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_cast_fu_277_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl7_cast_fu_284_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_cast_fu_297_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_s_fu_291_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_322_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_322_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_328_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_328_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_cast2_fu_334_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_fu_343_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_fu_354_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_fu_365_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl6_cast_fu_361_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_fu_350_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_fu_379_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_cast_fu_385_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl4_cast_fu_372_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_557_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_cast_fu_398_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_389_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_401_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl2_fu_417_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_fu_428_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_cast_fu_424_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast_fu_439_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast9_fu_435_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_neg_fu_449_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_fu_459_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg_cast_fu_455_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_cast_fu_466_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_32_fu_470_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp6_fu_491_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_566_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_496_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_28_fu_496_p2 : signal is "no";
    signal tmp8_cast_fu_511_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_574_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_fu_514_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp_33_fu_514_p2 : signal is "no";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal bound_fu_551_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_551_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_557_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_557_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_557_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_566_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_566_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_574_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_574_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_551_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_551_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_322_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_328_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_557_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_557_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_566_p10 : STD_LOGIC_VECTOR (14 downto 0);

    component yuv_filter_mul_8sbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_mul_8ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_mul_mudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component yuv_filter_mac_mueOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component yuv_filter_mac_mufYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_mac_mug8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    yuv_filter_mul_8sbkb_U1 : component yuv_filter_mul_8sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_322_p0,
        din1 => grp_fu_322_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_322_p2);

    yuv_filter_mul_8ncud_U2 : component yuv_filter_mul_8ncud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_328_p0,
        din1 => grp_fu_328_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_328_p2);

    yuv_filter_mul_mudEe_U3 : component yuv_filter_mul_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bound_fu_551_p0,
        din1 => bound_fu_551_p1,
        dout => bound_fu_551_p2);

    yuv_filter_mac_mueOg_U4 : component yuv_filter_mac_mueOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_557_p0,
        din1 => grp_fu_557_p1,
        din2 => grp_fu_557_p2,
        dout => grp_fu_557_p3);

    yuv_filter_mac_mufYi_U5 : component yuv_filter_mac_mufYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_566_p0,
        din1 => grp_fu_566_p1,
        din2 => tmp_26_reg_704,
        dout => grp_fu_566_p3);

    yuv_filter_mac_mug8j_U6 : component yuv_filter_mac_mug8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_574_p0,
        din1 => grp_fu_574_p1,
        din2 => tmp_30_reg_714,
        dout => grp_fu_574_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_231_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_190 <= indvar_flatten_next_fu_236_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_190 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_597 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                x_reg_201 <= tmp_mid2_v_reg_612;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_reg_201 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    y_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_597 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                y_reg_212 <= y_3_fu_306_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_reg_212 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter6_exitcond_flatten_reg_597 = ap_const_lv1_0))) then
                B_reg_686 <= in_channels_ch3_q0;
                tmp4_reg_694 <= tmp4_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter4_exitcond_flatten_reg_597 = ap_const_lv1_0))) then
                G_reg_668 <= in_channels_ch2_q0;
                R_reg_660 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_597 <= exitcond_flatten_reg_597;
                exitcond_flatten_reg_597 <= exitcond_flatten_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter2_exitcond_flatten_reg_597 <= ap_reg_pp0_iter1_exitcond_flatten_reg_597;
                ap_reg_pp0_iter3_exitcond_flatten_reg_597 <= ap_reg_pp0_iter2_exitcond_flatten_reg_597;
                    ap_reg_pp0_iter3_tmp_42_cast_reg_637(22 downto 0) <= tmp_42_cast_reg_637(22 downto 0);
                ap_reg_pp0_iter4_exitcond_flatten_reg_597 <= ap_reg_pp0_iter3_exitcond_flatten_reg_597;
                    ap_reg_pp0_iter4_tmp_42_cast_reg_637(22 downto 0) <= ap_reg_pp0_iter3_tmp_42_cast_reg_637(22 downto 0);
                ap_reg_pp0_iter5_exitcond_flatten_reg_597 <= ap_reg_pp0_iter4_exitcond_flatten_reg_597;
                    ap_reg_pp0_iter5_tmp_42_cast_reg_637(22 downto 0) <= ap_reg_pp0_iter4_tmp_42_cast_reg_637(22 downto 0);
                ap_reg_pp0_iter6_G_reg_668 <= G_reg_668;
                ap_reg_pp0_iter6_R_reg_660 <= R_reg_660;
                ap_reg_pp0_iter6_exitcond_flatten_reg_597 <= ap_reg_pp0_iter5_exitcond_flatten_reg_597;
                    ap_reg_pp0_iter6_tmp_42_cast_reg_637(22 downto 0) <= ap_reg_pp0_iter5_tmp_42_cast_reg_637(22 downto 0);
                ap_reg_pp0_iter7_G_reg_668 <= ap_reg_pp0_iter6_G_reg_668;
                ap_reg_pp0_iter7_R_reg_660 <= ap_reg_pp0_iter6_R_reg_660;
                ap_reg_pp0_iter7_exitcond_flatten_reg_597 <= ap_reg_pp0_iter6_exitcond_flatten_reg_597;
                    ap_reg_pp0_iter7_tmp_42_cast1_reg_680(7 downto 0) <= tmp_42_cast1_reg_680(7 downto 0);
                    ap_reg_pp0_iter7_tmp_42_cast_reg_637(22 downto 0) <= ap_reg_pp0_iter6_tmp_42_cast_reg_637(22 downto 0);
                ap_reg_pp0_iter8_R_reg_660 <= ap_reg_pp0_iter7_R_reg_660;
                ap_reg_pp0_iter8_exitcond_flatten_reg_597 <= ap_reg_pp0_iter7_exitcond_flatten_reg_597;
                    ap_reg_pp0_iter8_tmp_42_cast1_reg_680(7 downto 0) <= ap_reg_pp0_iter7_tmp_42_cast1_reg_680(7 downto 0);
                    ap_reg_pp0_iter8_tmp_42_cast_reg_637(22 downto 0) <= ap_reg_pp0_iter7_tmp_42_cast_reg_637(22 downto 0);
                ap_reg_pp0_iter9_exitcond_flatten_reg_597 <= ap_reg_pp0_iter8_exitcond_flatten_reg_597;
                    ap_reg_pp0_iter9_tmp_42_cast_reg_637(22 downto 0) <= ap_reg_pp0_iter8_tmp_42_cast_reg_637(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                bound_reg_592 <= bound_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter7_exitcond_flatten_reg_597 = ap_const_lv1_0))) then
                    tmp8_reg_719(13 downto 1) <= tmp8_fu_476_p2(13 downto 1);
                tmp_24_reg_699 <= tmp_23_fu_401_p2(15 downto 8);
                tmp_26_reg_704 <= grp_fu_322_p2;
                    tmp_27_reg_709(15 downto 4) <= tmp_27_fu_443_p2(15 downto 4);
                tmp_30_reg_714 <= grp_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_597 = ap_const_lv1_0))) then
                tmp_20_reg_627 <= tmp_20_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_fu_231_p2 = ap_const_lv1_0))) then
                tmp_21_reg_622 <= tmp_21_fu_273_p1;
                tmp_reg_617 <= tmp_fu_269_p1;
                y_mid2_reg_606 <= y_mid2_fu_253_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter8_exitcond_flatten_reg_597 = ap_const_lv1_0))) then
                tmp_29_reg_734 <= tmp_28_fu_496_p2(15 downto 8);
                tmp_34_reg_739 <= tmp_33_fu_514_p2(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter5_exitcond_flatten_reg_597 = ap_const_lv1_0))) then
                    tmp_42_cast1_reg_680(7 downto 0) <= tmp_42_cast1_fu_319_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter1_exitcond_flatten_reg_597 = ap_const_lv1_0))) then
                    tmp_42_cast_reg_637(22 downto 0) <= tmp_42_cast_fu_311_p1(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_231_p2 = ap_const_lv1_0))) then
                tmp_mid2_v_reg_612 <= tmp_mid2_v_fu_261_p3;
            end if;
        end if;
    end process;
    tmp_42_cast_reg_637(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter3_tmp_42_cast_reg_637(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter4_tmp_42_cast_reg_637(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter5_tmp_42_cast_reg_637(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter6_tmp_42_cast_reg_637(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter7_tmp_42_cast_reg_637(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter8_tmp_42_cast_reg_637(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter9_tmp_42_cast_reg_637(63 downto 23) <= "00000000000000000000000000000000000000000";
    tmp_42_cast1_reg_680(15 downto 8) <= "00000000";
    ap_reg_pp0_iter7_tmp_42_cast1_reg_680(15 downto 8) <= "00000000";
    ap_reg_pp0_iter8_tmp_42_cast1_reg_680(15 downto 8) <= "00000000";
    tmp_27_reg_709(3 downto 0) <= "0000";
    tmp8_reg_719(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_231_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_231_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_231_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_231_p2)
    begin
        if ((exitcond_flatten_fu_231_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= in_width_read;
    ap_return_1 <= in_height_read;
    bound_fu_551_p0 <= bound_fu_551_p00(16 - 1 downto 0);
    bound_fu_551_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_height_read),32));
    bound_fu_551_p1 <= bound_fu_551_p10(16 - 1 downto 0);
    bound_fu_551_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_width_read),32));
    exitcond9_fu_248_p2 <= "1" when (y_phi_fu_216_p4 = in_height_read) else "0";
    exitcond_flatten_fu_231_p2 <= "1" when (indvar_flatten_reg_190 = bound_reg_592) else "0";
    grp_fu_322_p0 <= ap_const_lv16_FFB6(8 - 1 downto 0);
    grp_fu_322_p1 <= grp_fu_322_p10(8 - 1 downto 0);
    grp_fu_322_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_reg_668),16));
    grp_fu_328_p0 <= ap_const_lv16_7A(8 - 1 downto 0);
    grp_fu_328_p1 <= grp_fu_328_p10(8 - 1 downto 0);
    grp_fu_328_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(R_reg_660),16));
    grp_fu_557_p0 <= ap_const_lv13_19(6 - 1 downto 0);
    grp_fu_557_p1 <= grp_fu_557_p10(8 - 1 downto 0);
    grp_fu_557_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_reg_686),13));
    grp_fu_557_p2 <= grp_fu_557_p20(9 - 1 downto 0);
    grp_fu_557_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_reg_694),13));
    grp_fu_566_p0 <= ap_const_lv15_7FDA(7 - 1 downto 0);
    grp_fu_566_p1 <= grp_fu_566_p10(8 - 1 downto 0);
    grp_fu_566_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter8_R_reg_660),15));
    grp_fu_574_p0 <= ap_const_lv16_FFA2(8 - 1 downto 0);
    grp_fu_574_p1 <= ap_reg_pp0_iter8_tmp_42_cast1_reg_680(8 - 1 downto 0);
    in_channels_ch1_address0 <= tmp_42_cast_fu_311_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5)))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= tmp_42_cast_fu_311_p1(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5)))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= ap_reg_pp0_iter3_tmp_42_cast_reg_637(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter6)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7)))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_236_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_190) + unsigned(ap_const_lv32_1));
    out_channels_ch1_address0 <= ap_reg_pp0_iter8_tmp_42_cast_reg_637(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10)))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= std_logic_vector(unsigned(ap_const_lv8_10) + unsigned(tmp_24_reg_699));

    out_channels_ch1_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter8_exitcond_flatten_reg_597, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter8_exitcond_flatten_reg_597 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= ap_reg_pp0_iter9_tmp_42_cast_reg_637(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11)))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= (tmp_29_reg_734 xor ap_const_lv8_80);

    out_channels_ch2_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter9_exitcond_flatten_reg_597, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter9_exitcond_flatten_reg_597 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= ap_reg_pp0_iter9_tmp_42_cast_reg_637(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11)))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= (tmp_34_reg_739 xor ap_const_lv8_80);

    out_channels_ch3_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter9_exitcond_flatten_reg_597, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter9_exitcond_flatten_reg_597 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_neg_cast_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_neg_fu_449_p2),14));

    p_neg_fu_449_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(p_shl3_cast9_fu_435_p1));
    p_shl1_cast_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_459_p3),14));
    p_shl1_fu_459_p3 <= (B_reg_686 & ap_const_lv1_0);
    p_shl2_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_417_p3),16));
    p_shl2_fu_417_p3 <= (B_reg_686 & ap_const_lv7_0);
    p_shl3_cast9_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_428_p3),13));
    p_shl3_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_428_p3),16));
    p_shl3_fu_428_p3 <= (B_reg_686 & ap_const_lv4_0);
    p_shl4_cast_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_365_p3),16));
    p_shl4_fu_365_p3 <= (ap_reg_pp0_iter7_G_reg_668 & ap_const_lv7_0);
    p_shl5_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_343_p3),15));
    p_shl5_fu_343_p3 <= (ap_reg_pp0_iter7_R_reg_660 & ap_const_lv6_0);
    p_shl6_cast_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_fu_354_p3),15));
    p_shl6_fu_354_p3 <= (ap_reg_pp0_iter7_R_reg_660 & ap_const_lv1_0);
    p_shl7_cast_fu_284_p3 <= (tmp_21_reg_622 & ap_const_lv8_0);
    p_shl_cast_fu_277_p3 <= (tmp_reg_617 & ap_const_lv10_0);
    tmp1_fu_389_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_385_p1) + unsigned(p_shl4_cast_fu_372_p1));
    tmp2_cast_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_379_p2),16));
    tmp2_fu_379_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_361_p1) + unsigned(p_shl5_cast_fu_350_p1));
    tmp3_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_557_p3),16));
    tmp4_fu_337_p2 <= std_logic_vector(unsigned(ap_const_lv9_80) + unsigned(tmp_42_cast2_fu_334_p1));
    tmp6_fu_491_p2 <= std_logic_vector(unsigned(ap_const_lv16_80) + unsigned(tmp_27_reg_709));
        tmp8_cast_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_reg_719),16));

    tmp8_fu_476_p2 <= std_logic_vector(unsigned(ap_const_lv14_80) + unsigned(tmp_32_fu_470_p2));
    tmp_20_fu_300_p2 <= std_logic_vector(unsigned(tmp_cast_fu_297_p1) + unsigned(tmp_s_fu_291_p2));
    tmp_21_fu_273_p1 <= tmp_mid2_v_fu_261_p3(15 - 1 downto 0);
    tmp_23_fu_401_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_398_p1) + unsigned(tmp1_fu_389_p2));
    tmp_27_fu_443_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_424_p1) - unsigned(p_shl3_cast_fu_439_p1));
    tmp_28_fu_496_p2 <= std_logic_vector(unsigned(tmp6_fu_491_p2) + unsigned(grp_fu_566_p3));
    tmp_32_fu_470_p2 <= std_logic_vector(signed(p_neg_cast_fu_455_p1) - signed(p_shl1_cast_fu_466_p1));
    tmp_33_fu_514_p2 <= std_logic_vector(signed(tmp8_cast_fu_511_p1) + signed(grp_fu_574_p3));
    tmp_42_cast1_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_reg_668),16));
    tmp_42_cast2_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter6_G_reg_668),9));
    tmp_42_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_reg_627),64));
    tmp_cast_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_mid2_reg_606),23));
    tmp_fu_269_p1 <= tmp_mid2_v_fu_261_p3(13 - 1 downto 0);
    tmp_mid2_v_fu_261_p3 <= 
        x_3_fu_242_p2 when (exitcond9_fu_248_p2(0) = '1') else 
        x_phi_fu_205_p4;
    tmp_s_fu_291_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_277_p3) + unsigned(p_shl7_cast_fu_284_p3));
    x_3_fu_242_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(x_phi_fu_205_p4));

    x_phi_fu_205_p4_assign_proc : process(x_reg_201, exitcond_flatten_reg_597, ap_CS_fsm_pp0_stage0, tmp_mid2_v_reg_612, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_597 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            x_phi_fu_205_p4 <= tmp_mid2_v_reg_612;
        else 
            x_phi_fu_205_p4 <= x_reg_201;
        end if; 
    end process;

    y_3_fu_306_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(y_mid2_reg_606));
    y_mid2_fu_253_p3 <= 
        ap_const_lv16_0 when (exitcond9_fu_248_p2(0) = '1') else 
        y_phi_fu_216_p4;

    y_phi_fu_216_p4_assign_proc : process(y_reg_212, exitcond_flatten_reg_597, ap_CS_fsm_pp0_stage0, y_3_fu_306_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_597 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            y_phi_fu_216_p4 <= y_3_fu_306_p2;
        else 
            y_phi_fu_216_p4 <= y_reg_212;
        end if; 
    end process;

end behav;
