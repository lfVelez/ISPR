-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv2rgb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width_read : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv2rgb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv17_1FF30 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100110000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv18_12A : STD_LOGIC_VECTOR (17 downto 0) := "000000000100101010";
    constant ap_const_lv18_80 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_const_lv18_199 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110011001";
    constant ap_const_lv16_FF9C : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_207 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_218 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_flatten_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_flatten_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_exitcond_flatten_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal y_mid2_fu_259_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_mid2_reg_621 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_mid2_v_fu_267_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_mid2_v_reg_627 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_275_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_reg_632 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_fu_279_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_reg_637 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_fu_306_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_8_reg_642 : STD_LOGIC_VECTOR (22 downto 0);
    signal y_2_fu_312_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_28_cast_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_cast_reg_652 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter3_tmp_28_cast_reg_652 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter4_tmp_28_cast_reg_652 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter5_tmp_28_cast_reg_652 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter6_tmp_28_cast_reg_652 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter7_tmp_28_cast_reg_652 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter8_tmp_28_cast_reg_652 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter9_tmp_28_cast_reg_652 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter10_tmp_28_cast_reg_652 : STD_LOGIC_VECTOR (63 downto 0);
    signal E_fu_321_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal E_reg_676 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter6_E_reg_676 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter7_E_reg_676 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter8_E_reg_676 : STD_LOGIC_VECTOR (7 downto 0);
    signal Y_reg_687 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_fu_339_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_692 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_570_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_reg_699 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_reg_706 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_580_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_11_reg_711 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal icmp_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_369_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_15_fu_369_p2 : signal is "no";
    signal tmp_15_reg_723 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_16_reg_729 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_fu_415_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_18_reg_734 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_19_reg_740 : STD_LOGIC_VECTOR (2 downto 0);
    signal G_fu_503_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_755 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_fu_546_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_760 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal x_phi_fu_211_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal y_phi_fu_222_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond5_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_2_fu_248_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast_fu_290_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl2_cast_fu_283_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_s_fu_297_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_cast_fu_303_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_330_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_348_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_588_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp1_cast_fu_366_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_fu_384_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl1_fu_395_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_402_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp2_fu_406_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 of tmp2_fu_406_p2 : signal is "no";
    signal p_shl_cast_fu_391_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp2_cast_fu_411_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_12_fu_431_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp_fu_447_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_fu_438_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp1_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_473_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp2_fu_489_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp2_fu_480_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp2_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_516_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp3_fu_532_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp3_fu_523_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal bound_fu_564_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_564_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_570_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_570_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_570_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_570_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_580_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_588_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_564_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_564_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_570_p10 : STD_LOGIC_VECTOR (8 downto 0);

    component yuv_filter_mul_9sibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component yuv_filter_mul_mudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component yuv_filter_ama_adjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_mukbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_mulbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    yuv_filter_mul_9sibs_U30 : component yuv_filter_mul_9sibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_330_p0,
        din1 => E_reg_676,
        ce => ap_const_logic_1,
        dout => grp_fu_330_p2);

    yuv_filter_mul_mudEe_x_U31 : component yuv_filter_mul_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bound_fu_564_p0,
        din1 => bound_fu_564_p1,
        dout => bound_fu_564_p2);

    yuv_filter_ama_adjbC_U32 : component yuv_filter_ama_adjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        din2_WIDTH => 10,
        din3_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_570_p0,
        din1 => grp_fu_570_p1,
        din2 => grp_fu_570_p2,
        din3 => grp_fu_570_p3,
        dout => grp_fu_570_p4);

    yuv_filter_mac_mukbM_U33 : component yuv_filter_mac_mukbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_580_p0,
        din1 => ap_reg_pp0_iter8_E_reg_676,
        din2 => tmp_10_reg_699,
        dout => grp_fu_580_p3);

    yuv_filter_mac_mulbW_U34 : component yuv_filter_mac_mulbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_588_p0,
        din1 => D_reg_692,
        din2 => tmp_14_reg_706,
        dout => grp_fu_588_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_237_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_196 <= indvar_flatten_next_fu_242_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_196 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_612 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                x_reg_207 <= tmp_mid2_v_reg_627;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_reg_207 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    y_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_612 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                y_reg_218 <= y_2_fu_312_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_reg_218 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter9_exitcond_flatten_reg_612 = ap_const_lv1_0))) then
                B_reg_760 <= B_fu_546_p3;
                G_reg_755 <= G_fu_503_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter7_exitcond_flatten_reg_612 = ap_const_lv1_0))) then
                D_reg_692 <= D_fu_339_p2;
                tmp_14_reg_706 <= grp_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter4_exitcond_flatten_reg_612 = ap_const_lv1_0))) then
                E_reg_676 <= E_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter6_exitcond_flatten_reg_612 = ap_const_lv1_0))) then
                Y_reg_687 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter10_exitcond_flatten_reg_612 <= ap_reg_pp0_iter9_exitcond_flatten_reg_612;
                    ap_reg_pp0_iter10_tmp_28_cast_reg_652(22 downto 0) <= ap_reg_pp0_iter9_tmp_28_cast_reg_652(22 downto 0);
                ap_reg_pp0_iter2_exitcond_flatten_reg_612 <= ap_reg_pp0_iter1_exitcond_flatten_reg_612;
                ap_reg_pp0_iter3_exitcond_flatten_reg_612 <= ap_reg_pp0_iter2_exitcond_flatten_reg_612;
                    ap_reg_pp0_iter3_tmp_28_cast_reg_652(22 downto 0) <= tmp_28_cast_reg_652(22 downto 0);
                ap_reg_pp0_iter4_exitcond_flatten_reg_612 <= ap_reg_pp0_iter3_exitcond_flatten_reg_612;
                    ap_reg_pp0_iter4_tmp_28_cast_reg_652(22 downto 0) <= ap_reg_pp0_iter3_tmp_28_cast_reg_652(22 downto 0);
                ap_reg_pp0_iter5_exitcond_flatten_reg_612 <= ap_reg_pp0_iter4_exitcond_flatten_reg_612;
                    ap_reg_pp0_iter5_tmp_28_cast_reg_652(22 downto 0) <= ap_reg_pp0_iter4_tmp_28_cast_reg_652(22 downto 0);
                ap_reg_pp0_iter6_E_reg_676 <= E_reg_676;
                ap_reg_pp0_iter6_exitcond_flatten_reg_612 <= ap_reg_pp0_iter5_exitcond_flatten_reg_612;
                    ap_reg_pp0_iter6_tmp_28_cast_reg_652(22 downto 0) <= ap_reg_pp0_iter5_tmp_28_cast_reg_652(22 downto 0);
                ap_reg_pp0_iter7_E_reg_676 <= ap_reg_pp0_iter6_E_reg_676;
                ap_reg_pp0_iter7_exitcond_flatten_reg_612 <= ap_reg_pp0_iter6_exitcond_flatten_reg_612;
                    ap_reg_pp0_iter7_tmp_28_cast_reg_652(22 downto 0) <= ap_reg_pp0_iter6_tmp_28_cast_reg_652(22 downto 0);
                ap_reg_pp0_iter8_E_reg_676 <= ap_reg_pp0_iter7_E_reg_676;
                ap_reg_pp0_iter8_exitcond_flatten_reg_612 <= ap_reg_pp0_iter7_exitcond_flatten_reg_612;
                    ap_reg_pp0_iter8_tmp_28_cast_reg_652(22 downto 0) <= ap_reg_pp0_iter7_tmp_28_cast_reg_652(22 downto 0);
                ap_reg_pp0_iter9_exitcond_flatten_reg_612 <= ap_reg_pp0_iter8_exitcond_flatten_reg_612;
                    ap_reg_pp0_iter9_tmp_28_cast_reg_652(22 downto 0) <= ap_reg_pp0_iter8_tmp_28_cast_reg_652(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_612 <= exitcond_flatten_reg_612;
                exitcond_flatten_reg_612 <= exitcond_flatten_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                bound_reg_607 <= bound_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter8_exitcond_flatten_reg_612 = ap_const_lv1_0))) then
                icmp_reg_717 <= icmp_fu_357_p2;
                tmp_15_reg_723 <= tmp_15_fu_369_p2;
                tmp_16_reg_729 <= tmp_15_fu_369_p2(17 downto 16);
                tmp_18_reg_734 <= tmp_18_fu_415_p2;
                tmp_19_reg_740 <= tmp_18_fu_415_p2(18 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter7_exitcond_flatten_reg_612 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8))) then
                tmp_10_reg_699 <= grp_fu_570_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_reg_pp0_iter8_exitcond_flatten_reg_612 = ap_const_lv1_0))) then
                tmp_11_reg_711 <= grp_fu_580_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter1_exitcond_flatten_reg_612 = ap_const_lv1_0))) then
                    tmp_28_cast_reg_652(22 downto 0) <= tmp_28_cast_fu_317_p1(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_fu_237_p2 = ap_const_lv1_0))) then
                tmp_2_reg_637 <= tmp_2_fu_279_p1;
                tmp_reg_632 <= tmp_fu_275_p1;
                y_mid2_reg_621 <= y_mid2_fu_259_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_612 = ap_const_lv1_0))) then
                tmp_8_reg_642 <= tmp_8_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_237_p2 = ap_const_lv1_0))) then
                tmp_mid2_v_reg_627 <= tmp_mid2_v_fu_267_p3;
            end if;
        end if;
    end process;
    tmp_28_cast_reg_652(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter3_tmp_28_cast_reg_652(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter4_tmp_28_cast_reg_652(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter5_tmp_28_cast_reg_652(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter6_tmp_28_cast_reg_652(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter7_tmp_28_cast_reg_652(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter8_tmp_28_cast_reg_652(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter9_tmp_28_cast_reg_652(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter10_tmp_28_cast_reg_652(63 downto 23) <= "00000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_237_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_237_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_237_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    B_fu_546_p3 <= 
        p_phitmp3_fu_532_p3 when (tmp_9_fu_540_p2(0) = '1') else 
        phitmp3_fu_523_p4;
    D_fu_339_p2 <= (in_channels_ch2_q0 xor ap_const_lv8_80);
    E_fu_321_p2 <= (in_channels_ch3_q0 xor ap_const_lv8_80);
    G_fu_503_p3 <= 
        p_phitmp2_fu_489_p3 when (tmp_6_fu_497_p2(0) = '1') else 
        phitmp2_fu_480_p4;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_237_p2)
    begin
        if ((exitcond_flatten_fu_237_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= in_width_read;
    ap_return_1 <= in_height_read;
    bound_fu_564_p0 <= bound_fu_564_p00(16 - 1 downto 0);
    bound_fu_564_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_height_read),32));
    bound_fu_564_p1 <= bound_fu_564_p10(16 - 1 downto 0);
    bound_fu_564_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_width_read),32));
    exitcond5_fu_254_p2 <= "1" when (y_phi_fu_222_p4 = in_height_read) else "0";
    exitcond_flatten_fu_237_p2 <= "1" when (indvar_flatten_reg_196 = bound_reg_607) else "0";
    grp_fu_330_p0 <= ap_const_lv17_1FF30(9 - 1 downto 0);
    grp_fu_570_p0 <= ap_const_lv9_1F0(5 - 1 downto 0);
    grp_fu_570_p1 <= grp_fu_570_p10(8 - 1 downto 0);
    grp_fu_570_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_reg_687),9));
    grp_fu_570_p2 <= ap_const_lv18_12A(10 - 1 downto 0);
    grp_fu_570_p3 <= ap_const_lv18_80(9 - 1 downto 0);
    grp_fu_580_p0 <= ap_const_lv18_199(10 - 1 downto 0);
    grp_fu_588_p0 <= ap_const_lv16_FF9C(8 - 1 downto 0);
    icmp1_fu_468_p2 <= "1" when (tmp_16_reg_729 = ap_const_lv2_1) else "0";
    icmp2_fu_511_p2 <= "1" when (signed(tmp_19_reg_740) > signed(ap_const_lv3_0)) else "0";
    icmp_fu_357_p2 <= "1" when (tmp_5_fu_348_p4 = ap_const_lv2_1) else "0";
    in_channels_ch1_address0 <= ap_reg_pp0_iter3_tmp_28_cast_reg_652(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter6)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7)))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= ap_reg_pp0_iter4_tmp_28_cast_reg_652(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter6)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7)))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= tmp_28_cast_fu_317_p1(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5)))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_242_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_196) + unsigned(ap_const_lv32_1));
    out_channels_ch1_address0 <= ap_reg_pp0_iter9_tmp_28_cast_reg_652(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11)))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= 
        p_phitmp_fu_447_p3 when (tmp_3_fu_454_p2(0) = '1') else 
        phitmp_fu_438_p4;

    out_channels_ch1_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter9_exitcond_flatten_reg_612, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter9_exitcond_flatten_reg_612 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= ap_reg_pp0_iter10_tmp_28_cast_reg_652(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12)))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= G_reg_755;

    out_channels_ch2_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter10_exitcond_flatten_reg_612, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter10_exitcond_flatten_reg_612 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= ap_reg_pp0_iter10_tmp_28_cast_reg_652(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12)))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= B_reg_760;

    out_channels_ch3_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter10_exitcond_flatten_reg_612, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter10_exitcond_flatten_reg_612 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_phitmp2_fu_489_p3 <= 
        ap_const_lv8_FF when (icmp1_fu_468_p2(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp3_fu_532_p3 <= 
        ap_const_lv8_FF when (icmp2_fu_511_p2(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp_fu_447_p3 <= 
        ap_const_lv8_FF when (icmp_reg_717(0) = '1') else 
        ap_const_lv8_0;
        p_shl1_cast_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl1_fu_395_p3),18));

    p_shl1_fu_395_p3 <= (D_reg_692 & ap_const_lv2_0);
    p_shl2_cast_fu_283_p3 <= (tmp_reg_632 & ap_const_lv10_0);
    p_shl3_cast_fu_290_p3 <= (tmp_2_reg_637 & ap_const_lv8_0);
        p_shl_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_fu_384_p3),19));

    p_shl_fu_384_p3 <= (D_reg_692 & ap_const_lv9_0);
    phitmp2_fu_480_p4 <= tmp_15_reg_723(15 downto 8);
    phitmp3_fu_523_p4 <= tmp_18_reg_734(15 downto 8);
    phitmp_fu_438_p4 <= tmp_11_reg_711(15 downto 8);
        tmp1_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_588_p3),18));

        tmp2_cast_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_406_p2),19));

    tmp2_fu_406_p2 <= std_logic_vector(signed(tmp_10_reg_699) + signed(p_shl1_cast_fu_402_p1));
    tmp_12_fu_431_p3 <= tmp_11_reg_711(17 downto 17);
    tmp_15_fu_369_p2 <= std_logic_vector(signed(tmp_10_reg_699) + signed(tmp1_cast_fu_366_p1));
    tmp_17_fu_473_p3 <= tmp_15_reg_723(17 downto 17);
    tmp_18_fu_415_p2 <= std_logic_vector(signed(p_shl_cast_fu_391_p1) + signed(tmp2_cast_fu_411_p1));
    tmp_20_fu_516_p3 <= tmp_18_reg_734(18 downto 18);
    tmp_28_cast_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_642),64));
    tmp_2_fu_279_p1 <= tmp_mid2_v_fu_267_p3(15 - 1 downto 0);
    tmp_3_fu_454_p2 <= (icmp_reg_717 or tmp_12_fu_431_p3);
    tmp_5_fu_348_p4 <= grp_fu_580_p3(17 downto 16);
    tmp_6_fu_497_p2 <= (icmp1_fu_468_p2 or tmp_17_fu_473_p3);
    tmp_8_fu_306_p2 <= std_logic_vector(unsigned(tmp_s_fu_297_p2) + unsigned(tmp_cast_fu_303_p1));
    tmp_9_fu_540_p2 <= (icmp2_fu_511_p2 or tmp_20_fu_516_p3);
    tmp_cast_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_mid2_reg_621),23));
    tmp_fu_275_p1 <= tmp_mid2_v_fu_267_p3(13 - 1 downto 0);
    tmp_mid2_v_fu_267_p3 <= 
        x_2_fu_248_p2 when (exitcond5_fu_254_p2(0) = '1') else 
        x_phi_fu_211_p4;
    tmp_s_fu_297_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_290_p3) + unsigned(p_shl2_cast_fu_283_p3));
    x_2_fu_248_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(x_phi_fu_211_p4));

    x_phi_fu_211_p4_assign_proc : process(x_reg_207, exitcond_flatten_reg_612, ap_CS_fsm_pp0_stage0, tmp_mid2_v_reg_627, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_612 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            x_phi_fu_211_p4 <= tmp_mid2_v_reg_627;
        else 
            x_phi_fu_211_p4 <= x_reg_207;
        end if; 
    end process;

    y_2_fu_312_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(y_mid2_reg_621));
    y_mid2_fu_259_p3 <= 
        ap_const_lv16_0 when (exitcond5_fu_254_p2(0) = '1') else 
        y_phi_fu_222_p4;

    y_phi_fu_222_p4_assign_proc : process(y_reg_218, exitcond_flatten_reg_612, ap_CS_fsm_pp0_stage0, y_2_fu_312_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_612 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            y_phi_fu_222_p4 <= y_2_fu_312_p2;
        else 
            y_phi_fu_222_p4 <= y_reg_218;
        end if; 
    end process;

end behav;
