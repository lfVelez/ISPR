-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_scale is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width_read : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Y_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    U_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    V_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv_scale is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_189 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_200 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_fu_211_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_cast_reg_398 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_cast_fu_215_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_cast_reg_403 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_cast_fu_219_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_cast_reg_408 : STD_LOGIC_VECTOR (14 downto 0);
    signal bound_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_flatten_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal y_mid2_fu_253_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_mid2_reg_427 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_mid2_v_fu_261_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_mid2_v_reg_433 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_269_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_reg_438 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_fu_273_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_reg_443 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_fu_300_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_5_reg_448 : STD_LOGIC_VECTOR (22 downto 0);
    signal y_1_fu_306_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_10_cast_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_cast_reg_458 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter3_tmp_10_cast_reg_458 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter4_tmp_10_cast_reg_458 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter5_tmp_10_cast_reg_458 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter6_tmp_10_cast_reg_458 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter7_tmp_10_cast_reg_458 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter8_tmp_10_cast_reg_458 : STD_LOGIC_VECTOR (63 downto 0);
    signal Y_reg_480 : STD_LOGIC_VECTOR (7 downto 0);
    signal U_reg_485 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_reg_490 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_510 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_515 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_520 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal x_phi_fu_193_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal y_phi_fu_204_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond3_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_242_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_cast_fu_277_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl1_cast_fu_284_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_5_cast_fu_297_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_3_fu_291_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_320_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_320_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_328_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_328_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_336_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_336_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_320_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal bound_fu_381_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_381_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_381_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_381_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_320_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_328_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_336_p00 : STD_LOGIC_VECTOR (14 downto 0);

    component yuv_filter_mul_8nhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component yuv_filter_mul_mudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    yuv_filter_mul_8nhbi_U15 : component yuv_filter_mul_8nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_320_p0,
        din1 => grp_fu_320_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_320_p2);

    yuv_filter_mul_8nhbi_U16 : component yuv_filter_mul_8nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_328_p0,
        din1 => grp_fu_328_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_328_p2);

    yuv_filter_mul_8nhbi_U17 : component yuv_filter_mul_8nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_336_p0,
        din1 => grp_fu_336_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_336_p2);

    yuv_filter_mul_mudEe_x_U18 : component yuv_filter_mul_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bound_fu_381_p0,
        din1 => bound_fu_381_p1,
        dout => bound_fu_381_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_231_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_178 <= indvar_flatten_next_fu_236_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_178 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                x_reg_189 <= tmp_3_mid2_v_reg_433;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_reg_189 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    y_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                y_reg_200 <= y_1_fu_306_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_reg_200 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter4_exitcond_flatten_reg_418 = ap_const_lv1_0))) then
                U_reg_485 <= in_channels_ch2_q0;
                V_reg_490 <= in_channels_ch3_q0;
                Y_reg_480 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_418 <= exitcond_flatten_reg_418;
                exitcond_flatten_reg_418 <= exitcond_flatten_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter2_exitcond_flatten_reg_418 <= ap_reg_pp0_iter1_exitcond_flatten_reg_418;
                ap_reg_pp0_iter3_exitcond_flatten_reg_418 <= ap_reg_pp0_iter2_exitcond_flatten_reg_418;
                    ap_reg_pp0_iter3_tmp_10_cast_reg_458(22 downto 0) <= tmp_10_cast_reg_458(22 downto 0);
                ap_reg_pp0_iter4_exitcond_flatten_reg_418 <= ap_reg_pp0_iter3_exitcond_flatten_reg_418;
                    ap_reg_pp0_iter4_tmp_10_cast_reg_458(22 downto 0) <= ap_reg_pp0_iter3_tmp_10_cast_reg_458(22 downto 0);
                ap_reg_pp0_iter5_exitcond_flatten_reg_418 <= ap_reg_pp0_iter4_exitcond_flatten_reg_418;
                    ap_reg_pp0_iter5_tmp_10_cast_reg_458(22 downto 0) <= ap_reg_pp0_iter4_tmp_10_cast_reg_458(22 downto 0);
                ap_reg_pp0_iter6_exitcond_flatten_reg_418 <= ap_reg_pp0_iter5_exitcond_flatten_reg_418;
                    ap_reg_pp0_iter6_tmp_10_cast_reg_458(22 downto 0) <= ap_reg_pp0_iter5_tmp_10_cast_reg_458(22 downto 0);
                ap_reg_pp0_iter7_exitcond_flatten_reg_418 <= ap_reg_pp0_iter6_exitcond_flatten_reg_418;
                    ap_reg_pp0_iter7_tmp_10_cast_reg_458(22 downto 0) <= ap_reg_pp0_iter6_tmp_10_cast_reg_458(22 downto 0);
                ap_reg_pp0_iter8_exitcond_flatten_reg_418 <= ap_reg_pp0_iter7_exitcond_flatten_reg_418;
                    ap_reg_pp0_iter8_tmp_10_cast_reg_458(22 downto 0) <= ap_reg_pp0_iter7_tmp_10_cast_reg_458(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                bound_reg_413 <= bound_fu_381_p2;
                    tmp_1_cast_reg_403(7 downto 0) <= tmp_1_cast_fu_215_p1(7 downto 0);
                    tmp_2_cast_reg_408(7 downto 0) <= tmp_2_cast_fu_219_p1(7 downto 0);
                    tmp_cast_reg_398(7 downto 0) <= tmp_cast_fu_211_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter1_exitcond_flatten_reg_418 = ap_const_lv1_0))) then
                    tmp_10_cast_reg_458(22 downto 0) <= tmp_10_cast_fu_311_p1(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_fu_231_p2 = ap_const_lv1_0))) then
                tmp_1_reg_443 <= tmp_1_fu_273_p1;
                tmp_reg_438 <= tmp_fu_269_p1;
                y_mid2_reg_427 <= y_mid2_fu_253_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_231_p2 = ap_const_lv1_0))) then
                tmp_3_mid2_v_reg_433 <= tmp_3_mid2_v_fu_261_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter7_exitcond_flatten_reg_418 = ap_const_lv1_0))) then
                tmp_4_reg_510 <= grp_fu_320_p2(14 downto 7);
                tmp_6_reg_515 <= grp_fu_328_p2(14 downto 7);
                tmp_9_reg_520 <= grp_fu_336_p2(14 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_418 = ap_const_lv1_0))) then
                tmp_5_reg_448 <= tmp_5_fu_300_p2;
            end if;
        end if;
    end process;
    tmp_cast_reg_398(14 downto 8) <= "0000000";
    tmp_1_cast_reg_403(14 downto 8) <= "0000000";
    tmp_2_cast_reg_408(14 downto 8) <= "0000000";
    tmp_10_cast_reg_458(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter3_tmp_10_cast_reg_458(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter4_tmp_10_cast_reg_458(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter5_tmp_10_cast_reg_458(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter6_tmp_10_cast_reg_458(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter7_tmp_10_cast_reg_458(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_pp0_iter8_tmp_10_cast_reg_458(63 downto 23) <= "00000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_231_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_231_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_231_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_231_p2)
    begin
        if ((exitcond_flatten_fu_231_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= in_width_read;
    ap_return_1 <= in_height_read;
    bound_fu_381_p0 <= bound_fu_381_p00(16 - 1 downto 0);
    bound_fu_381_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_height_read),32));
    bound_fu_381_p1 <= bound_fu_381_p10(16 - 1 downto 0);
    bound_fu_381_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_width_read),32));
    exitcond3_fu_248_p2 <= "1" when (y_phi_fu_204_p4 = in_height_read) else "0";
    exitcond_flatten_fu_231_p2 <= "1" when (indvar_flatten_reg_178 = bound_reg_413) else "0";
    grp_fu_320_p0 <= grp_fu_320_p00(8 - 1 downto 0);
    grp_fu_320_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_reg_480),15));
    grp_fu_320_p1 <= tmp_cast_reg_398(8 - 1 downto 0);
    grp_fu_328_p0 <= grp_fu_328_p00(8 - 1 downto 0);
    grp_fu_328_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(U_reg_485),15));
    grp_fu_328_p1 <= tmp_1_cast_reg_403(8 - 1 downto 0);
    grp_fu_336_p0 <= grp_fu_336_p00(8 - 1 downto 0);
    grp_fu_336_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(V_reg_490),15));
    grp_fu_336_p1 <= tmp_2_cast_reg_408(8 - 1 downto 0);
    in_channels_ch1_address0 <= tmp_10_cast_fu_311_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5)))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= tmp_10_cast_fu_311_p1(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5)))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= tmp_10_cast_fu_311_p1(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5)))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_236_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_178) + unsigned(ap_const_lv32_1));
    out_channels_ch1_address0 <= ap_reg_pp0_iter8_tmp_10_cast_reg_458(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10)))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= tmp_4_reg_510;

    out_channels_ch1_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter8_exitcond_flatten_reg_418, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter8_exitcond_flatten_reg_418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= ap_reg_pp0_iter8_tmp_10_cast_reg_458(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10)))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= tmp_6_reg_515;

    out_channels_ch2_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter8_exitcond_flatten_reg_418, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter8_exitcond_flatten_reg_418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= ap_reg_pp0_iter8_tmp_10_cast_reg_458(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10)))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= tmp_9_reg_520;

    out_channels_ch3_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter8_exitcond_flatten_reg_418, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter8_exitcond_flatten_reg_418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_284_p3 <= (tmp_1_reg_443 & ap_const_lv8_0);
    p_shl_cast_fu_277_p3 <= (tmp_reg_438 & ap_const_lv10_0);
    tmp_10_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_448),64));
    tmp_1_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(U_scale),15));
    tmp_1_fu_273_p1 <= tmp_3_mid2_v_fu_261_p3(15 - 1 downto 0);
    tmp_2_cast_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(V_scale),15));
    tmp_3_fu_291_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_277_p3) + unsigned(p_shl1_cast_fu_284_p3));
    tmp_3_mid2_v_fu_261_p3 <= 
        x_1_fu_242_p2 when (exitcond3_fu_248_p2(0) = '1') else 
        x_phi_fu_193_p4;
    tmp_5_cast_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_mid2_reg_427),23));
    tmp_5_fu_300_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_297_p1) + unsigned(tmp_3_fu_291_p2));
    tmp_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_scale),15));
    tmp_fu_269_p1 <= tmp_3_mid2_v_fu_261_p3(13 - 1 downto 0);
    x_1_fu_242_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(x_phi_fu_193_p4));

    x_phi_fu_193_p4_assign_proc : process(x_reg_189, exitcond_flatten_reg_418, ap_CS_fsm_pp0_stage0, tmp_3_mid2_v_reg_433, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            x_phi_fu_193_p4 <= tmp_3_mid2_v_reg_433;
        else 
            x_phi_fu_193_p4 <= x_reg_189;
        end if; 
    end process;

    y_1_fu_306_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(y_mid2_reg_427));
    y_mid2_fu_253_p3 <= 
        ap_const_lv16_0 when (exitcond3_fu_248_p2(0) = '1') else 
        y_phi_fu_204_p4;

    y_phi_fu_204_p4_assign_proc : process(y_reg_200, exitcond_flatten_reg_418, ap_CS_fsm_pp0_stage0, y_1_fu_306_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            y_phi_fu_204_p4 <= y_1_fu_306_p2;
        else 
            y_phi_fu_204_p4 <= y_reg_200;
        end if; 
    end process;

end behav;
