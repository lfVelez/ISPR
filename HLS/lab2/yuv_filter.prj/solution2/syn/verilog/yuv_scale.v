// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_scale (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width_read,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        Y_scale,
        U_scale,
        V_scale,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state13 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width_read;
input  [15:0] in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
input  [7:0] Y_scale;
input  [7:0] U_scale;
input  [7:0] V_scale;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] indvar_flatten_reg_178;
reg   [15:0] x_reg_189;
reg   [15:0] y_reg_200;
wire   [14:0] tmp_cast_fu_211_p1;
reg   [14:0] tmp_cast_reg_398;
wire   [14:0] tmp_1_cast_fu_215_p1;
reg   [14:0] tmp_1_cast_reg_403;
wire   [14:0] tmp_2_cast_fu_219_p1;
reg   [14:0] tmp_2_cast_reg_408;
wire   [31:0] bound_fu_381_p2;
reg   [31:0] bound_reg_413;
wire   [0:0] exitcond_flatten_fu_231_p2;
reg   [0:0] exitcond_flatten_reg_418;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_418;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_418;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_418;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_418;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_418;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_418;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_418;
reg   [0:0] ap_reg_pp0_iter8_exitcond_flatten_reg_418;
wire   [31:0] indvar_flatten_next_fu_236_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [15:0] y_mid2_fu_253_p3;
reg   [15:0] y_mid2_reg_427;
wire   [15:0] tmp_3_mid2_v_fu_261_p3;
reg   [15:0] tmp_3_mid2_v_reg_433;
wire   [12:0] tmp_fu_269_p1;
reg   [12:0] tmp_reg_438;
wire   [14:0] tmp_1_fu_273_p1;
reg   [14:0] tmp_1_reg_443;
wire   [22:0] tmp_5_fu_300_p2;
reg   [22:0] tmp_5_reg_448;
wire   [15:0] y_1_fu_306_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] tmp_10_cast_fu_311_p1;
reg   [63:0] tmp_10_cast_reg_458;
reg   [63:0] ap_reg_pp0_iter3_tmp_10_cast_reg_458;
reg   [63:0] ap_reg_pp0_iter4_tmp_10_cast_reg_458;
reg   [63:0] ap_reg_pp0_iter5_tmp_10_cast_reg_458;
reg   [63:0] ap_reg_pp0_iter6_tmp_10_cast_reg_458;
reg   [63:0] ap_reg_pp0_iter7_tmp_10_cast_reg_458;
reg   [63:0] ap_reg_pp0_iter8_tmp_10_cast_reg_458;
reg   [7:0] Y_reg_480;
reg   [7:0] U_reg_485;
reg   [7:0] V_reg_490;
reg   [7:0] tmp_4_reg_510;
reg   [7:0] tmp_6_reg_515;
reg   [7:0] tmp_9_reg_520;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg   [15:0] x_phi_fu_193_p4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [15:0] y_phi_fu_204_p4;
wire   [0:0] exitcond3_fu_248_p2;
wire   [15:0] x_1_fu_242_p2;
wire   [22:0] p_shl_cast_fu_277_p3;
wire   [22:0] p_shl1_cast_fu_284_p3;
wire   [22:0] tmp_5_cast_fu_297_p1;
wire   [22:0] tmp_3_fu_291_p2;
wire   [7:0] grp_fu_320_p0;
wire   [7:0] grp_fu_320_p1;
wire   [7:0] grp_fu_328_p0;
wire   [7:0] grp_fu_328_p1;
wire   [7:0] grp_fu_336_p0;
wire   [7:0] grp_fu_336_p1;
wire   [14:0] grp_fu_320_p2;
wire   [14:0] grp_fu_328_p2;
wire   [14:0] grp_fu_336_p2;
wire    ap_CS_fsm_state13;
wire   [15:0] bound_fu_381_p0;
wire   [15:0] bound_fu_381_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] bound_fu_381_p00;
wire   [31:0] bound_fu_381_p10;
wire   [14:0] grp_fu_320_p00;
wire   [14:0] grp_fu_328_p00;
wire   [14:0] grp_fu_336_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

yuv_filter_mul_8nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
yuv_filter_mul_8nhbi_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_320_p0),
    .din1(grp_fu_320_p1),
    .ce(1'b1),
    .dout(grp_fu_320_p2)
);

yuv_filter_mul_8nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
yuv_filter_mul_8nhbi_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_328_p0),
    .din1(grp_fu_328_p1),
    .ce(1'b1),
    .dout(grp_fu_328_p2)
);

yuv_filter_mul_8nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
yuv_filter_mul_8nhbi_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_336_p0),
    .din1(grp_fu_336_p1),
    .ce(1'b1),
    .dout(grp_fu_336_p2)
);

yuv_filter_mul_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
yuv_filter_mul_mudEe_x_U18(
    .din0(bound_fu_381_p0),
    .din1(bound_fu_381_p1),
    .dout(bound_fu_381_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_231_p2 == 1'd0))) begin
        indvar_flatten_reg_178 <= indvar_flatten_next_fu_236_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_178 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_418 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        x_reg_189 <= tmp_3_mid2_v_reg_433;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_reg_189 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_418 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        y_reg_200 <= y_1_fu_306_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_reg_200 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter4_exitcond_flatten_reg_418 == 1'd0))) begin
        U_reg_485 <= in_channels_ch2_q0;
        V_reg_490 <= in_channels_ch3_q0;
        Y_reg_480 <= in_channels_ch1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_418 <= exitcond_flatten_reg_418;
        exitcond_flatten_reg_418 <= exitcond_flatten_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_418 <= ap_reg_pp0_iter1_exitcond_flatten_reg_418;
        ap_reg_pp0_iter3_exitcond_flatten_reg_418 <= ap_reg_pp0_iter2_exitcond_flatten_reg_418;
        ap_reg_pp0_iter3_tmp_10_cast_reg_458[22 : 0] <= tmp_10_cast_reg_458[22 : 0];
        ap_reg_pp0_iter4_exitcond_flatten_reg_418 <= ap_reg_pp0_iter3_exitcond_flatten_reg_418;
        ap_reg_pp0_iter4_tmp_10_cast_reg_458[22 : 0] <= ap_reg_pp0_iter3_tmp_10_cast_reg_458[22 : 0];
        ap_reg_pp0_iter5_exitcond_flatten_reg_418 <= ap_reg_pp0_iter4_exitcond_flatten_reg_418;
        ap_reg_pp0_iter5_tmp_10_cast_reg_458[22 : 0] <= ap_reg_pp0_iter4_tmp_10_cast_reg_458[22 : 0];
        ap_reg_pp0_iter6_exitcond_flatten_reg_418 <= ap_reg_pp0_iter5_exitcond_flatten_reg_418;
        ap_reg_pp0_iter6_tmp_10_cast_reg_458[22 : 0] <= ap_reg_pp0_iter5_tmp_10_cast_reg_458[22 : 0];
        ap_reg_pp0_iter7_exitcond_flatten_reg_418 <= ap_reg_pp0_iter6_exitcond_flatten_reg_418;
        ap_reg_pp0_iter7_tmp_10_cast_reg_458[22 : 0] <= ap_reg_pp0_iter6_tmp_10_cast_reg_458[22 : 0];
        ap_reg_pp0_iter8_exitcond_flatten_reg_418 <= ap_reg_pp0_iter7_exitcond_flatten_reg_418;
        ap_reg_pp0_iter8_tmp_10_cast_reg_458[22 : 0] <= ap_reg_pp0_iter7_tmp_10_cast_reg_458[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bound_reg_413 <= bound_fu_381_p2;
        tmp_1_cast_reg_403[7 : 0] <= tmp_1_cast_fu_215_p1[7 : 0];
        tmp_2_cast_reg_408[7 : 0] <= tmp_2_cast_fu_219_p1[7 : 0];
        tmp_cast_reg_398[7 : 0] <= tmp_cast_fu_211_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter1_exitcond_flatten_reg_418 == 1'd0))) begin
        tmp_10_cast_reg_458[22 : 0] <= tmp_10_cast_fu_311_p1[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_fu_231_p2 == 1'd0))) begin
        tmp_1_reg_443 <= tmp_1_fu_273_p1;
        tmp_reg_438 <= tmp_fu_269_p1;
        y_mid2_reg_427 <= y_mid2_fu_253_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_231_p2 == 1'd0))) begin
        tmp_3_mid2_v_reg_433 <= tmp_3_mid2_v_fu_261_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter7_exitcond_flatten_reg_418 == 1'd0))) begin
        tmp_4_reg_510 <= {{grp_fu_320_p2[14:7]}};
        tmp_6_reg_515 <= {{grp_fu_328_p2[14:7]}};
        tmp_9_reg_520 <= {{grp_fu_336_p2[14:7]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_418 == 1'd0))) begin
        tmp_5_reg_448 <= tmp_5_fu_300_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_231_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state13))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter10))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5)))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5)))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5)))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10)))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter8_exitcond_flatten_reg_418 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter9))) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10)))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter8_exitcond_flatten_reg_418 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter9))) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10)))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter8_exitcond_flatten_reg_418 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter9))) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_418 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        x_phi_fu_193_p4 = tmp_3_mid2_v_reg_433;
    end else begin
        x_phi_fu_193_p4 = x_reg_189;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_418 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        y_phi_fu_204_p4 = y_1_fu_306_p2;
    end else begin
        y_phi_fu_204_p4 = y_reg_200;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10) & (ap_enable_reg_pp0_iter9 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_231_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10) & (ap_enable_reg_pp0_iter9 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_231_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = in_width_read;

assign ap_return_1 = in_height_read;

assign bound_fu_381_p0 = bound_fu_381_p00;

assign bound_fu_381_p00 = in_height_read;

assign bound_fu_381_p1 = bound_fu_381_p10;

assign bound_fu_381_p10 = in_width_read;

assign exitcond3_fu_248_p2 = ((y_phi_fu_204_p4 == in_height_read) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_231_p2 = ((indvar_flatten_reg_178 == bound_reg_413) ? 1'b1 : 1'b0);

assign grp_fu_320_p0 = grp_fu_320_p00;

assign grp_fu_320_p00 = Y_reg_480;

assign grp_fu_320_p1 = tmp_cast_reg_398;

assign grp_fu_328_p0 = grp_fu_328_p00;

assign grp_fu_328_p00 = U_reg_485;

assign grp_fu_328_p1 = tmp_1_cast_reg_403;

assign grp_fu_336_p0 = grp_fu_336_p00;

assign grp_fu_336_p00 = V_reg_490;

assign grp_fu_336_p1 = tmp_2_cast_reg_408;

assign in_channels_ch1_address0 = tmp_10_cast_fu_311_p1;

assign in_channels_ch2_address0 = tmp_10_cast_fu_311_p1;

assign in_channels_ch3_address0 = tmp_10_cast_fu_311_p1;

assign indvar_flatten_next_fu_236_p2 = (indvar_flatten_reg_178 + 32'd1);

assign out_channels_ch1_address0 = ap_reg_pp0_iter8_tmp_10_cast_reg_458;

assign out_channels_ch1_d0 = tmp_4_reg_510;

assign out_channels_ch2_address0 = ap_reg_pp0_iter8_tmp_10_cast_reg_458;

assign out_channels_ch2_d0 = tmp_6_reg_515;

assign out_channels_ch3_address0 = ap_reg_pp0_iter8_tmp_10_cast_reg_458;

assign out_channels_ch3_d0 = tmp_9_reg_520;

assign p_shl1_cast_fu_284_p3 = {{tmp_1_reg_443}, {8'd0}};

assign p_shl_cast_fu_277_p3 = {{tmp_reg_438}, {10'd0}};

assign tmp_10_cast_fu_311_p1 = tmp_5_reg_448;

assign tmp_1_cast_fu_215_p1 = U_scale;

assign tmp_1_fu_273_p1 = tmp_3_mid2_v_fu_261_p3[14:0];

assign tmp_2_cast_fu_219_p1 = V_scale;

assign tmp_3_fu_291_p2 = (p_shl_cast_fu_277_p3 + p_shl1_cast_fu_284_p3);

assign tmp_3_mid2_v_fu_261_p3 = ((exitcond3_fu_248_p2[0:0] === 1'b1) ? x_1_fu_242_p2 : x_phi_fu_193_p4);

assign tmp_5_cast_fu_297_p1 = y_mid2_reg_427;

assign tmp_5_fu_300_p2 = (tmp_5_cast_fu_297_p1 + tmp_3_fu_291_p2);

assign tmp_cast_fu_211_p1 = Y_scale;

assign tmp_fu_269_p1 = tmp_3_mid2_v_fu_261_p3[12:0];

assign x_1_fu_242_p2 = (16'd1 + x_phi_fu_193_p4);

assign y_1_fu_306_p2 = (16'd1 + y_mid2_reg_427);

assign y_mid2_fu_253_p3 = ((exitcond3_fu_248_p2[0:0] === 1'b1) ? 16'd0 : y_phi_fu_204_p4);

always @ (posedge ap_clk) begin
    tmp_cast_reg_398[14:8] <= 7'b0000000;
    tmp_1_cast_reg_403[14:8] <= 7'b0000000;
    tmp_2_cast_reg_408[14:8] <= 7'b0000000;
    tmp_10_cast_reg_458[63:23] <= 41'b00000000000000000000000000000000000000000;
    ap_reg_pp0_iter3_tmp_10_cast_reg_458[63:23] <= 41'b00000000000000000000000000000000000000000;
    ap_reg_pp0_iter4_tmp_10_cast_reg_458[63:23] <= 41'b00000000000000000000000000000000000000000;
    ap_reg_pp0_iter5_tmp_10_cast_reg_458[63:23] <= 41'b00000000000000000000000000000000000000000;
    ap_reg_pp0_iter6_tmp_10_cast_reg_458[63:23] <= 41'b00000000000000000000000000000000000000000;
    ap_reg_pp0_iter7_tmp_10_cast_reg_458[63:23] <= 41'b00000000000000000000000000000000000000000;
    ap_reg_pp0_iter8_tmp_10_cast_reg_458[63:23] <= 41'b00000000000000000000000000000000000000000;
end

endmodule //yuv_scale
