// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _yuv_scale_HH_
#define _yuv_scale_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "yuv_filter_mul_8nhbi.h"
#include "yuv_filter_mul_mudEe.h"

namespace ap_rtl {

struct yuv_scale : public sc_module {
    // Port declarations 34
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<22> > in_channels_ch1_address0;
    sc_out< sc_logic > in_channels_ch1_ce0;
    sc_in< sc_lv<8> > in_channels_ch1_q0;
    sc_out< sc_lv<22> > in_channels_ch2_address0;
    sc_out< sc_logic > in_channels_ch2_ce0;
    sc_in< sc_lv<8> > in_channels_ch2_q0;
    sc_out< sc_lv<22> > in_channels_ch3_address0;
    sc_out< sc_logic > in_channels_ch3_ce0;
    sc_in< sc_lv<8> > in_channels_ch3_q0;
    sc_in< sc_lv<16> > in_width_read;
    sc_in< sc_lv<16> > in_height_read;
    sc_out< sc_lv<22> > out_channels_ch1_address0;
    sc_out< sc_logic > out_channels_ch1_ce0;
    sc_out< sc_logic > out_channels_ch1_we0;
    sc_out< sc_lv<8> > out_channels_ch1_d0;
    sc_out< sc_lv<22> > out_channels_ch2_address0;
    sc_out< sc_logic > out_channels_ch2_ce0;
    sc_out< sc_logic > out_channels_ch2_we0;
    sc_out< sc_lv<8> > out_channels_ch2_d0;
    sc_out< sc_lv<22> > out_channels_ch3_address0;
    sc_out< sc_logic > out_channels_ch3_ce0;
    sc_out< sc_logic > out_channels_ch3_we0;
    sc_out< sc_lv<8> > out_channels_ch3_d0;
    sc_in< sc_lv<8> > Y_scale;
    sc_in< sc_lv<8> > U_scale;
    sc_in< sc_lv<8> > V_scale;
    sc_out< sc_lv<16> > ap_return_0;
    sc_out< sc_lv<16> > ap_return_1;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    yuv_scale(sc_module_name name);
    SC_HAS_PROCESS(yuv_scale);

    ~yuv_scale();

    sc_trace_file* mVcdFile;

    yuv_filter_mul_8nhbi<1,3,8,8,15>* yuv_filter_mul_8nhbi_U15;
    yuv_filter_mul_8nhbi<1,3,8,8,15>* yuv_filter_mul_8nhbi_U16;
    yuv_filter_mul_8nhbi<1,3,8,8,15>* yuv_filter_mul_8nhbi_U17;
    yuv_filter_mul_mudEe<1,1,16,16,32>* yuv_filter_mul_mudEe_x_U18;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > indvar_flatten_reg_178;
    sc_signal< sc_lv<16> > x_reg_189;
    sc_signal< sc_lv<16> > y_reg_200;
    sc_signal< sc_lv<15> > tmp_cast_fu_211_p1;
    sc_signal< sc_lv<15> > tmp_cast_reg_398;
    sc_signal< sc_lv<15> > tmp_1_cast_fu_215_p1;
    sc_signal< sc_lv<15> > tmp_1_cast_reg_403;
    sc_signal< sc_lv<15> > tmp_2_cast_fu_219_p1;
    sc_signal< sc_lv<15> > tmp_2_cast_reg_408;
    sc_signal< sc_lv<32> > bound_fu_381_p2;
    sc_signal< sc_lv<32> > bound_reg_413;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_231_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_418;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter9;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter10;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_flatten_reg_418;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter2_exitcond_flatten_reg_418;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter3_exitcond_flatten_reg_418;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter4_exitcond_flatten_reg_418;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter5_exitcond_flatten_reg_418;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter6_exitcond_flatten_reg_418;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter7_exitcond_flatten_reg_418;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter8_exitcond_flatten_reg_418;
    sc_signal< sc_lv<32> > indvar_flatten_next_fu_236_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<16> > y_mid2_fu_253_p3;
    sc_signal< sc_lv<16> > y_mid2_reg_427;
    sc_signal< sc_lv<16> > tmp_3_mid2_v_fu_261_p3;
    sc_signal< sc_lv<16> > tmp_3_mid2_v_reg_433;
    sc_signal< sc_lv<13> > tmp_fu_269_p1;
    sc_signal< sc_lv<13> > tmp_reg_438;
    sc_signal< sc_lv<15> > tmp_1_fu_273_p1;
    sc_signal< sc_lv<15> > tmp_1_reg_443;
    sc_signal< sc_lv<23> > tmp_5_fu_300_p2;
    sc_signal< sc_lv<23> > tmp_5_reg_448;
    sc_signal< sc_lv<16> > y_1_fu_306_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<64> > tmp_10_cast_fu_311_p1;
    sc_signal< sc_lv<64> > tmp_10_cast_reg_458;
    sc_signal< sc_lv<64> > ap_reg_pp0_iter3_tmp_10_cast_reg_458;
    sc_signal< sc_lv<64> > ap_reg_pp0_iter4_tmp_10_cast_reg_458;
    sc_signal< sc_lv<64> > ap_reg_pp0_iter5_tmp_10_cast_reg_458;
    sc_signal< sc_lv<64> > ap_reg_pp0_iter6_tmp_10_cast_reg_458;
    sc_signal< sc_lv<64> > ap_reg_pp0_iter7_tmp_10_cast_reg_458;
    sc_signal< sc_lv<64> > ap_reg_pp0_iter8_tmp_10_cast_reg_458;
    sc_signal< sc_lv<8> > Y_reg_480;
    sc_signal< sc_lv<8> > U_reg_485;
    sc_signal< sc_lv<8> > V_reg_490;
    sc_signal< sc_lv<8> > tmp_4_reg_510;
    sc_signal< sc_lv<8> > tmp_6_reg_515;
    sc_signal< sc_lv<8> > tmp_9_reg_520;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter10;
    sc_signal< sc_lv<16> > x_phi_fu_193_p4;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_lv<16> > y_phi_fu_204_p4;
    sc_signal< sc_lv<1> > exitcond3_fu_248_p2;
    sc_signal< sc_lv<16> > x_1_fu_242_p2;
    sc_signal< sc_lv<23> > p_shl_cast_fu_277_p3;
    sc_signal< sc_lv<23> > p_shl1_cast_fu_284_p3;
    sc_signal< sc_lv<23> > tmp_5_cast_fu_297_p1;
    sc_signal< sc_lv<23> > tmp_3_fu_291_p2;
    sc_signal< sc_lv<8> > grp_fu_320_p0;
    sc_signal< sc_lv<8> > grp_fu_320_p1;
    sc_signal< sc_lv<8> > grp_fu_328_p0;
    sc_signal< sc_lv<8> > grp_fu_328_p1;
    sc_signal< sc_lv<8> > grp_fu_336_p0;
    sc_signal< sc_lv<8> > grp_fu_336_p1;
    sc_signal< sc_lv<15> > grp_fu_320_p2;
    sc_signal< sc_lv<15> > grp_fu_328_p2;
    sc_signal< sc_lv<15> > grp_fu_336_p2;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<16> > bound_fu_381_p0;
    sc_signal< sc_lv<16> > bound_fu_381_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<32> > bound_fu_381_p00;
    sc_signal< sc_lv<32> > bound_fu_381_p10;
    sc_signal< sc_lv<15> > grp_fu_320_p00;
    sc_signal< sc_lv<15> > grp_fu_328_p00;
    sc_signal< sc_lv<15> > grp_fu_336_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state13;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state13();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_state10_pp0_stage0_iter8();
    void thread_ap_block_state11_pp0_stage0_iter9();
    void thread_ap_block_state12_pp0_stage0_iter10();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_bound_fu_381_p0();
    void thread_bound_fu_381_p00();
    void thread_bound_fu_381_p1();
    void thread_bound_fu_381_p10();
    void thread_exitcond3_fu_248_p2();
    void thread_exitcond_flatten_fu_231_p2();
    void thread_grp_fu_320_p0();
    void thread_grp_fu_320_p00();
    void thread_grp_fu_320_p1();
    void thread_grp_fu_328_p0();
    void thread_grp_fu_328_p00();
    void thread_grp_fu_328_p1();
    void thread_grp_fu_336_p0();
    void thread_grp_fu_336_p00();
    void thread_grp_fu_336_p1();
    void thread_in_channels_ch1_address0();
    void thread_in_channels_ch1_ce0();
    void thread_in_channels_ch2_address0();
    void thread_in_channels_ch2_ce0();
    void thread_in_channels_ch3_address0();
    void thread_in_channels_ch3_ce0();
    void thread_indvar_flatten_next_fu_236_p2();
    void thread_out_channels_ch1_address0();
    void thread_out_channels_ch1_ce0();
    void thread_out_channels_ch1_d0();
    void thread_out_channels_ch1_we0();
    void thread_out_channels_ch2_address0();
    void thread_out_channels_ch2_ce0();
    void thread_out_channels_ch2_d0();
    void thread_out_channels_ch2_we0();
    void thread_out_channels_ch3_address0();
    void thread_out_channels_ch3_ce0();
    void thread_out_channels_ch3_d0();
    void thread_out_channels_ch3_we0();
    void thread_p_shl1_cast_fu_284_p3();
    void thread_p_shl_cast_fu_277_p3();
    void thread_tmp_10_cast_fu_311_p1();
    void thread_tmp_1_cast_fu_215_p1();
    void thread_tmp_1_fu_273_p1();
    void thread_tmp_2_cast_fu_219_p1();
    void thread_tmp_3_fu_291_p2();
    void thread_tmp_3_mid2_v_fu_261_p3();
    void thread_tmp_5_cast_fu_297_p1();
    void thread_tmp_5_fu_300_p2();
    void thread_tmp_cast_fu_211_p1();
    void thread_tmp_fu_269_p1();
    void thread_x_1_fu_242_p2();
    void thread_x_phi_fu_193_p4();
    void thread_y_1_fu_306_p2();
    void thread_y_mid2_fu_253_p3();
    void thread_y_phi_fu_204_p4();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
