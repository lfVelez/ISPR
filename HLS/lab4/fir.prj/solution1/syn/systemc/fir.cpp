// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> fir::ap_ST_fsm_state1 = "1";
const sc_lv<6> fir::ap_ST_fsm_state2 = "10";
const sc_lv<6> fir::ap_ST_fsm_state3 = "100";
const sc_lv<6> fir::ap_ST_fsm_state4 = "1000";
const sc_lv<6> fir::ap_ST_fsm_pp0_stage0 = "10000";
const sc_lv<6> fir::ap_ST_fsm_state8 = "100000";
const sc_lv<32> fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool fir::ap_const_boolean_1 = true;
const int fir::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> fir::ap_const_lv32_1 = "1";
const sc_lv<32> fir::ap_const_lv32_4 = "100";
const bool fir::ap_const_boolean_0 = false;
const sc_lv<1> fir::ap_const_lv1_0 = "0";
const sc_lv<32> fir::ap_const_lv32_2 = "10";
const sc_lv<32> fir::ap_const_lv32_3 = "11";
const sc_lv<1> fir::ap_const_lv1_1 = "1";
const sc_lv<6> fir::ap_const_lv6_39 = "111001";
const sc_lv<32> fir::ap_const_lv32_5 = "101";
const sc_lv<6> fir::ap_const_lv6_0 = "000000";
const sc_lv<6> fir::ap_const_lv6_3F = "111111";
const sc_lv<32> fir::ap_const_lv32_F = "1111";
const sc_lv<32> fir::ap_const_lv32_1E = "11110";
const sc_lv<26> fir::ap_const_lv26_3FFFE86 = "11111111111111111010000110";

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {
    shift_reg_U = new fir_shift_reg("shift_reg_U");
    shift_reg_U->clk(ap_clk);
    shift_reg_U->reset(ap_rst_n_inv);
    shift_reg_U->address0(shift_reg_address0);
    shift_reg_U->ce0(shift_reg_ce0);
    shift_reg_U->q0(shift_reg_q0);
    shift_reg_U->address1(shift_reg_address1);
    shift_reg_U->ce1(shift_reg_ce1);
    shift_reg_U->we1(shift_reg_we1);
    shift_reg_U->d1(shift_reg_d1);
    c_U = new fir_c("c_U");
    c_U->clk(ap_clk);
    c_U->reset(ap_rst_n_inv);
    c_U->address0(c_address0);
    c_U->ce0(c_ce0);
    c_U->q0(c_q0);
    fir_fir_io_s_axi_U = new fir_fir_io_s_axi<C_S_AXI_FIR_IO_ADDR_WIDTH,C_S_AXI_FIR_IO_DATA_WIDTH>("fir_fir_io_s_axi_U");
    fir_fir_io_s_axi_U->AWVALID(s_axi_fir_io_AWVALID);
    fir_fir_io_s_axi_U->AWREADY(s_axi_fir_io_AWREADY);
    fir_fir_io_s_axi_U->AWADDR(s_axi_fir_io_AWADDR);
    fir_fir_io_s_axi_U->WVALID(s_axi_fir_io_WVALID);
    fir_fir_io_s_axi_U->WREADY(s_axi_fir_io_WREADY);
    fir_fir_io_s_axi_U->WDATA(s_axi_fir_io_WDATA);
    fir_fir_io_s_axi_U->WSTRB(s_axi_fir_io_WSTRB);
    fir_fir_io_s_axi_U->ARVALID(s_axi_fir_io_ARVALID);
    fir_fir_io_s_axi_U->ARREADY(s_axi_fir_io_ARREADY);
    fir_fir_io_s_axi_U->ARADDR(s_axi_fir_io_ARADDR);
    fir_fir_io_s_axi_U->RVALID(s_axi_fir_io_RVALID);
    fir_fir_io_s_axi_U->RREADY(s_axi_fir_io_RREADY);
    fir_fir_io_s_axi_U->RDATA(s_axi_fir_io_RDATA);
    fir_fir_io_s_axi_U->RRESP(s_axi_fir_io_RRESP);
    fir_fir_io_s_axi_U->BVALID(s_axi_fir_io_BVALID);
    fir_fir_io_s_axi_U->BREADY(s_axi_fir_io_BREADY);
    fir_fir_io_s_axi_U->BRESP(s_axi_fir_io_BRESP);
    fir_fir_io_s_axi_U->ACLK(ap_clk);
    fir_fir_io_s_axi_U->ARESET(ap_rst_n_inv);
    fir_fir_io_s_axi_U->ACLK_EN(ap_var_for_const0);
    fir_fir_io_s_axi_U->ap_start(ap_start);
    fir_fir_io_s_axi_U->interrupt(interrupt);
    fir_fir_io_s_axi_U->ap_ready(ap_ready);
    fir_fir_io_s_axi_U->ap_done(ap_done);
    fir_fir_io_s_axi_U->ap_idle(ap_idle);
    fir_fir_io_s_axi_U->y(y);
    fir_fir_io_s_axi_U->y_ap_vld(y_ap_vld);
    fir_fir_io_s_axi_U->x(x);
    fir_mul_mul_16s_1bkb_U0 = new fir_mul_mul_16s_1bkb<1,1,16,10,26>("fir_mul_mul_16s_1bkb_U0");
    fir_mul_mul_16s_1bkb_U0->din0(reg_136);
    fir_mul_mul_16s_1bkb_U0->din1(acc_fu_193_p1);
    fir_mul_mul_16s_1bkb_U0->dout(acc_fu_193_p2);
    fir_mac_muladd_16cud_U1 = new fir_mac_muladd_16cud<1,1,16,16,37,37>("fir_mac_muladd_16cud_U1");
    fir_mac_muladd_16cud_U1->din0(c_load_reg_256);
    fir_mac_muladd_16cud_U1->din1(reg_136);
    fir_mac_muladd_16cud_U1->din2(acc1_reg_115);
    fir_mac_muladd_16cud_U1->dout(grp_fu_199_p3);
    fir_mac_muladd_10dEe_U2 = new fir_mac_muladd_10dEe<1,1,10,16,31,31>("fir_mac_muladd_10dEe_U2");
    fir_mac_muladd_10dEe_U2->din0(grp_fu_207_p0);
    fir_mac_muladd_10dEe_U2->din1(x_read_reg_221);
    fir_mac_muladd_10dEe_U2->din2(grp_fu_207_p2);
    fir_mac_muladd_10dEe_U2->dout(grp_fu_207_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_acc_cast_fu_144_p1);
    sensitive << ( acc_reg_216 );

    SC_METHOD(thread_acc_fu_193_p1);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011001);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011011);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state5);
    sensitive << ( tmp_3_fu_147_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_c_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_cast1_fu_153_p1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );

    SC_METHOD(thread_c_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_grp_fu_207_p0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_fu_207_p2);
    sensitive << ( acc1_reg_115 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_i_1_cast_fu_164_p1);
    sensitive << ( i_1_fu_158_p2 );

    SC_METHOD(thread_i_1_fu_158_p2);
    sensitive << ( i_phi_fu_129_p4 );

    SC_METHOD(thread_i_cast1_fu_153_p1);
    sensitive << ( i_phi_fu_129_p4 );

    SC_METHOD(thread_i_phi_fu_129_p4);
    sensitive << ( i_reg_125 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_3_reg_232 );
    sensitive << ( i_1_reg_241 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );

    SC_METHOD(thread_shift_reg_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( i_1_cast_fu_164_p1 );

    SC_METHOD(thread_shift_reg_address1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( i_cast1_reg_236 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_shift_reg_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_shift_reg_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_shift_reg_d1);
    sensitive << ( shift_reg_q0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( x_read_reg_221 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_shift_reg_we1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( tmp_3_reg_232 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_tmp_3_fu_147_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( i_phi_fu_129_p4 );

    SC_METHOD(thread_y);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_fu_207_p3 );

    SC_METHOD(thread_y_ap_vld);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_3_fu_147_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_flag00011011 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_fir_io_AWVALID, "(port)s_axi_fir_io_AWVALID");
    sc_trace(mVcdFile, s_axi_fir_io_AWREADY, "(port)s_axi_fir_io_AWREADY");
    sc_trace(mVcdFile, s_axi_fir_io_AWADDR, "(port)s_axi_fir_io_AWADDR");
    sc_trace(mVcdFile, s_axi_fir_io_WVALID, "(port)s_axi_fir_io_WVALID");
    sc_trace(mVcdFile, s_axi_fir_io_WREADY, "(port)s_axi_fir_io_WREADY");
    sc_trace(mVcdFile, s_axi_fir_io_WDATA, "(port)s_axi_fir_io_WDATA");
    sc_trace(mVcdFile, s_axi_fir_io_WSTRB, "(port)s_axi_fir_io_WSTRB");
    sc_trace(mVcdFile, s_axi_fir_io_ARVALID, "(port)s_axi_fir_io_ARVALID");
    sc_trace(mVcdFile, s_axi_fir_io_ARREADY, "(port)s_axi_fir_io_ARREADY");
    sc_trace(mVcdFile, s_axi_fir_io_ARADDR, "(port)s_axi_fir_io_ARADDR");
    sc_trace(mVcdFile, s_axi_fir_io_RVALID, "(port)s_axi_fir_io_RVALID");
    sc_trace(mVcdFile, s_axi_fir_io_RREADY, "(port)s_axi_fir_io_RREADY");
    sc_trace(mVcdFile, s_axi_fir_io_RDATA, "(port)s_axi_fir_io_RDATA");
    sc_trace(mVcdFile, s_axi_fir_io_RRESP, "(port)s_axi_fir_io_RRESP");
    sc_trace(mVcdFile, s_axi_fir_io_BVALID, "(port)s_axi_fir_io_BVALID");
    sc_trace(mVcdFile, s_axi_fir_io_BREADY, "(port)s_axi_fir_io_BREADY");
    sc_trace(mVcdFile, s_axi_fir_io_BRESP, "(port)s_axi_fir_io_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, y, "y");
    sc_trace(mVcdFile, y_ap_vld, "y_ap_vld");
    sc_trace(mVcdFile, x, "x");
    sc_trace(mVcdFile, shift_reg_address0, "shift_reg_address0");
    sc_trace(mVcdFile, shift_reg_ce0, "shift_reg_ce0");
    sc_trace(mVcdFile, shift_reg_q0, "shift_reg_q0");
    sc_trace(mVcdFile, shift_reg_address1, "shift_reg_address1");
    sc_trace(mVcdFile, shift_reg_ce1, "shift_reg_ce1");
    sc_trace(mVcdFile, shift_reg_we1, "shift_reg_we1");
    sc_trace(mVcdFile, shift_reg_d1, "shift_reg_d1");
    sc_trace(mVcdFile, c_address0, "c_address0");
    sc_trace(mVcdFile, c_ce0, "c_ce0");
    sc_trace(mVcdFile, c_q0, "c_q0");
    sc_trace(mVcdFile, acc1_reg_115, "acc1_reg_115");
    sc_trace(mVcdFile, i_reg_125, "i_reg_125");
    sc_trace(mVcdFile, reg_136, "reg_136");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter0, "ap_block_state5_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter1, "ap_block_state6_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter2, "ap_block_state7_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011001, "ap_block_pp0_stage0_flag00011001");
    sc_trace(mVcdFile, tmp_3_reg_232, "tmp_3_reg_232");
    sc_trace(mVcdFile, acc_fu_193_p2, "acc_fu_193_p2");
    sc_trace(mVcdFile, acc_reg_216, "acc_reg_216");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, x_read_reg_221, "x_read_reg_221");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, acc_cast_fu_144_p1, "acc_cast_fu_144_p1");
    sc_trace(mVcdFile, tmp_3_fu_147_p2, "tmp_3_fu_147_p2");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_tmp_3_reg_232, "ap_reg_pp0_iter1_tmp_3_reg_232");
    sc_trace(mVcdFile, i_cast1_fu_153_p1, "i_cast1_fu_153_p1");
    sc_trace(mVcdFile, i_cast1_reg_236, "i_cast1_reg_236");
    sc_trace(mVcdFile, i_1_fu_158_p2, "i_1_fu_158_p2");
    sc_trace(mVcdFile, i_1_reg_241, "i_1_reg_241");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, c_load_reg_256, "c_load_reg_256");
    sc_trace(mVcdFile, grp_fu_199_p3, "grp_fu_199_p3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011011, "ap_block_pp0_stage0_flag00011011");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state5, "ap_condition_pp0_exit_iter0_state5");
    sc_trace(mVcdFile, i_phi_fu_129_p4, "i_phi_fu_129_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00000000, "ap_block_pp0_stage0_flag00000000");
    sc_trace(mVcdFile, i_1_cast_fu_164_p1, "i_1_cast_fu_164_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_207_p3, "grp_fu_207_p3");
    sc_trace(mVcdFile, acc_fu_193_p1, "acc_fu_193_p1");
    sc_trace(mVcdFile, grp_fu_207_p0, "grp_fu_207_p0");
    sc_trace(mVcdFile, grp_fu_207_p2, "grp_fu_207_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete shift_reg_U;
    delete c_U;
    delete fir_fir_io_s_axi_U;
    delete fir_mul_mul_16s_1bkb_U0;
    delete fir_mac_muladd_16cud_U1;
    delete fir_mac_muladd_10dEe_U2;
}

void fir::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fir::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_3_reg_232.read()))) {
        acc1_reg_115 = grp_fu_199_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        acc1_reg_115 = acc_cast_fu_144_p1.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state5.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state5.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state5.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(tmp_3_reg_232.read(), ap_const_lv1_0))) {
        i_reg_125 = i_1_reg_241.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_125 = ap_const_lv6_39;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        acc_reg_216 = acc_fu_193_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_tmp_3_reg_232 = tmp_3_reg_232.read();
        tmp_3_reg_232 = tmp_3_fu_147_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_3_reg_232.read(), ap_const_lv1_0))) {
        c_load_reg_256 = c_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_147_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        i_1_reg_241 = i_1_fu_158_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_147_p2.read()))) {
        i_cast1_reg_236 = i_cast1_fu_153_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(tmp_3_reg_232.read(), ap_const_lv1_0)))) {
        reg_136 = shift_reg_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x_read_reg_221 = x.read();
    }
}

void fir::thread_acc_cast_fu_144_p1() {
    acc_cast_fu_144_p1 = esl_sext<37,26>(acc_reg_216.read());
}

void fir::thread_acc_fu_193_p1() {
    acc_fu_193_p1 =  (sc_lv<10>) (ap_const_lv26_3FFFE86);
}

void fir::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[4];
}

void fir::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fir::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fir::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fir::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fir::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[5];
}

void fir::thread_ap_block_pp0_stage0_flag00000000() {
    ap_block_pp0_stage0_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_block_pp0_stage0_flag00011001() {
    ap_block_pp0_stage0_flag00011001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_block_pp0_stage0_flag00011011() {
    ap_block_pp0_stage0_flag00011011 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_block_state5_pp0_stage0_iter0() {
    ap_block_state5_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_block_state6_pp0_stage0_iter1() {
    ap_block_state6_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_block_state7_pp0_stage0_iter2() {
    ap_block_state7_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_condition_pp0_exit_iter0_state5() {
    if (esl_seteq<1,1,1>(tmp_3_fu_147_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state5 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state5 = ap_const_logic_0;
    }
}

void fir::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fir::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void fir::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fir::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void fir::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fir::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void fir::thread_c_address0() {
    c_address0 =  (sc_lv<6>) (i_cast1_fu_153_p1.read());
}

void fir::thread_c_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        c_ce0 = ap_const_logic_1;
    } else {
        c_ce0 = ap_const_logic_0;
    }
}

void fir::thread_grp_fu_207_p0() {
    grp_fu_207_p0 =  (sc_lv<10>) (ap_const_lv26_3FFFE86);
}

void fir::thread_grp_fu_207_p2() {
    grp_fu_207_p2 = acc1_reg_115.read().range(31-1, 0);
}

void fir::thread_i_1_cast_fu_164_p1() {
    i_1_cast_fu_164_p1 = esl_zext<32,6>(i_1_fu_158_p2.read());
}

void fir::thread_i_1_fu_158_p2() {
    i_1_fu_158_p2 = (!i_phi_fu_129_p4.read().is_01() || !ap_const_lv6_3F.is_01())? sc_lv<6>(): (sc_biguint<6>(i_phi_fu_129_p4.read()) + sc_bigint<6>(ap_const_lv6_3F));
}

void fir::thread_i_cast1_fu_153_p1() {
    i_cast1_fu_153_p1 = esl_zext<32,6>(i_phi_fu_129_p4.read());
}

void fir::thread_i_phi_fu_129_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_232.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0))) {
        i_phi_fu_129_p4 = i_1_reg_241.read();
    } else {
        i_phi_fu_129_p4 = i_reg_125.read();
    }
}

void fir::thread_shift_reg_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0))) {
        shift_reg_address0 =  (sc_lv<6>) (i_1_cast_fu_164_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        shift_reg_address0 = ap_const_lv6_39;
    } else {
        shift_reg_address0 = "XXXXXX";
    }
}

void fir::thread_shift_reg_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        shift_reg_address1 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0))) {
        shift_reg_address1 =  (sc_lv<6>) (i_cast1_reg_236.read());
    } else {
        shift_reg_address1 = "XXXXXX";
    }
}

void fir::thread_shift_reg_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        shift_reg_ce0 = ap_const_logic_1;
    } else {
        shift_reg_ce0 = ap_const_logic_0;
    }
}

void fir::thread_shift_reg_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        shift_reg_ce1 = ap_const_logic_1;
    } else {
        shift_reg_ce1 = ap_const_logic_0;
    }
}

void fir::thread_shift_reg_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        shift_reg_d1 = x_read_reg_221.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0))) {
        shift_reg_d1 = shift_reg_q0.read();
    } else {
        shift_reg_d1 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void fir::thread_shift_reg_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(tmp_3_reg_232.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        shift_reg_we1 = ap_const_logic_1;
    } else {
        shift_reg_we1 = ap_const_logic_0;
    }
}

void fir::thread_tmp_3_fu_147_p2() {
    tmp_3_fu_147_p2 = (!i_phi_fu_129_p4.read().is_01() || !ap_const_lv6_0.is_01())? sc_lv<1>(): sc_lv<1>(i_phi_fu_129_p4.read() == ap_const_lv6_0);
}

void fir::thread_y() {
    y = grp_fu_207_p3.read().range(30, 15);
}

void fir::thread_y_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        y_ap_vld = ap_const_logic_1;
    } else {
        y_ap_vld = ap_const_logic_0;
    }
}

void fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 16 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_3_fu_147_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(tmp_3_fu_147_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_AWVALID\" :  \"" << s_axi_fir_io_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_fir_io_AWREADY\" :  \"" << s_axi_fir_io_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_AWADDR\" :  \"" << s_axi_fir_io_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_WVALID\" :  \"" << s_axi_fir_io_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_WREADY\" :  \"" << s_axi_fir_io_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_WDATA\" :  \"" << s_axi_fir_io_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_WSTRB\" :  \"" << s_axi_fir_io_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_ARVALID\" :  \"" << s_axi_fir_io_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_ARREADY\" :  \"" << s_axi_fir_io_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_ARADDR\" :  \"" << s_axi_fir_io_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_RVALID\" :  \"" << s_axi_fir_io_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_RREADY\" :  \"" << s_axi_fir_io_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_RDATA\" :  \"" << s_axi_fir_io_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_RRESP\" :  \"" << s_axi_fir_io_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_BVALID\" :  \"" << s_axi_fir_io_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_BREADY\" :  \"" << s_axi_fir_io_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_BRESP\" :  \"" << s_axi_fir_io_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

